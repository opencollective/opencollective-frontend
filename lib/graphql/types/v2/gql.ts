/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  fragment AccountHoverCardFields on Account {\n    id\n    name\n    slug\n    type\n    description\n    imageUrl\n    isHost\n    isArchived\n    ... on Individual {\n      isGuest\n    }\n    ... on AccountWithHost {\n      host {\n        id\n        slug\n      }\n      approvedAt\n    }\n\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n      }\n    }\n  }\n": types.AccountHoverCardFieldsFragmentDoc,
    "\n  query UserContextualMemberships(\n    $userSlug: String!\n    $accountSlug: String\n    $hostSlug: String\n    $getHostAdmin: Boolean!\n    $getAccountAdmin: Boolean!\n  ) {\n    account(slug: $userSlug) {\n      id\n      accountAdminMemberships: memberOf(role: [ADMIN], account: { slug: $accountSlug }, isApproved: true)\n        @include(if: $getAccountAdmin) {\n        nodes {\n          id\n          role\n          since\n          account {\n            id\n            slug\n          }\n        }\n      }\n      hostAdminMemberships: memberOf(role: [ADMIN], account: { slug: $hostSlug }, isApproved: true)\n        @include(if: $getHostAdmin) {\n        nodes {\n          id\n          role\n          since\n          account {\n            id\n            slug\n          }\n        }\n      }\n    }\n  }\n": types.UserContextualMembershipsDocument,
    "\n  query SearchTags($term: String) {\n    tagStats(tagSearchTerm: $term) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n": types.SearchTagsDocument,
    "\n  mutation CancelRecurringContribution($order: OrderReferenceInput!, $reason: String!, $reasonCode: String!) {\n    cancelOrder(order: $order, reason: $reason, reasonCode: $reasonCode) {\n      id\n      status\n    }\n  }\n": types.CancelRecurringContributionDocument,
    "\n      query EditPaymentMethodModal($order: OrderReferenceInput!) {\n        order(order: $order) {\n          id\n          totalAmount {\n            currency\n            valueInCents\n          }\n          fromAccount {\n            id\n            slug\n          }\n          toAccount {\n            id\n            slug\n            ... on AccountWithHost {\n              host {\n                id\n                slug\n                paypalClientId\n                supportedPaymentMethods\n              }\n            }\n            ... on Organization {\n              host {\n                id\n                slug\n                paypalClientId\n                supportedPaymentMethods\n              }\n            }\n          }\n        }\n      }\n    ": types.EditPaymentMethodModalDocument,
    "\n      mutation AddStripePaymentMethodFromSetupIntent(\n        $setupIntent: SetupIntentInput!\n        $account: AccountReferenceInput!\n      ) {\n        addStripePaymentMethodFromSetupIntent(setupIntent: $setupIntent, account: $account) {\n          id\n          type\n          name\n        }\n      }\n    ": types.AddStripePaymentMethodFromSetupIntentDocument,
    "\n  query TagStats($host: AccountReferenceInput) {\n    tagStats(host: $host, limit: 5) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n": types.TagStatsDocument,
    "\n      mutation FollowAccount($accountSlug: String!) {\n        followAccount(account: { slug: $accountSlug }) {\n          member {\n            id\n          }\n        }\n      }\n    ": types.FollowAccountDocument,
    "\n      mutation UnfollowAccount($accountSlug: String!) {\n        unfollowAccount(account: { slug: $accountSlug }) {\n          member {\n            id\n          }\n        }\n      }\n    ": types.UnfollowAccountDocument,
    "\n      query OCFTransitionBanner($slug: String!) {\n        account(slug: $slug) {\n          id\n          name\n          slug\n          type\n          ... on AccountWithHost {\n            host {\n              id\n              legacyId\n            }\n          }\n          duplicatedFromAccount {\n            id\n            name\n            slug\n            imageUrl\n            ... on AccountWithHost {\n              host {\n                id\n                legacyId\n              }\n            }\n          }\n          newAccounts: duplicatedAccounts(limit: 1) {\n            totalCount\n            nodes {\n              id\n              name\n              slug\n              imageUrl\n              ... on AccountWithHost {\n                host {\n                  id\n                  legacyId\n                }\n              }\n            }\n          }\n        }\n      }\n    ": types.OcfTransitionBannerDocument,
    "\n  query PaypalPlan(\n    $account: AccountReferenceInput!\n    $tier: TierReferenceInput\n    $amount: AmountInput!\n    $frequency: ContributionFrequency!\n    $order: OrderReferenceInput\n  ) {\n    paypalPlan(account: $account, tier: $tier, amount: $amount, frequency: $frequency, order: $order) {\n      id\n    }\n  }\n": types.PaypalPlanDocument,
    "\n  mutation EditAccountSettings($account: AccountReferenceInput!, $key: AccountSettingsKey!, $value: JSON!) {\n    editAccountSetting(account: $account, key: $key, value: $value) {\n      id\n      settings\n    }\n  }\n": types.EditAccountSettingsDocument,
    "\n  query HostExpenseModalCurrencyExchangeRate($requests: [CurrencyExchangeRateRequest!]!) {\n    currencyExchangeRate(requests: $requests) {\n      value\n      source\n      fromCurrency\n      toCurrency\n      date\n      isApproximate\n    }\n  }\n": types.HostExpenseModalCurrencyExchangeRateDocument,
    "\n  mutation DeleteUpdate($id: String!) {\n    deleteUpdate(id: $id) {\n      id\n    }\n  }\n": types.DeleteUpdateDocument,
    "\n  mutation SendSurveyResponse(\n    $surveyKey: String!\n    $responseId: String!\n    $score: Int!\n    $text: String\n    $okToContact: Boolean\n  ) {\n    sendSurveyResponse(\n      surveyKey: $surveyKey\n      responseId: $responseId\n      score: $score\n      text: $text\n      okToContact: $okToContact\n    )\n  }\n": types.SendSurveyResponseDocument,
    "\n  query FindAFiscalHost(\n    $tags: [String]\n    $limit: Int\n    $offset: Int\n    $country: [CountryISO]\n    $currency: String\n    $searchTerm: String\n  ) {\n    hosts(\n      tag: $tags\n      limit: $limit\n      offset: $offset\n      tagSearchOperator: OR\n      country: $country\n      currency: $currency\n      searchTerm: $searchTerm\n    ) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        createdAt\n        settings\n        type\n        name\n        slug\n        description\n        longDescription\n        currency\n        totalHostedCollectives\n        hostFeePercent\n        isTrustedHost\n        location {\n          id\n          country\n        }\n        tags\n      }\n    }\n  }\n": types.FindAFiscalHostDocument,
    "\n  fragment AgreementMutationFields on Agreement {\n    id\n    ...AgreementViewFields\n    account {\n      id\n      ... on AccountWithHost {\n        # Refetch account agreements count to update the cache\n        hostAgreements {\n          totalCount\n        }\n      }\n    }\n  }\n  \n": types.AgreementMutationFieldsFragmentDoc,
    "\n  mutation AddAgreement(\n    $host: AccountReferenceInput!\n    $account: AccountReferenceInput!\n    $attachment: Upload\n    $title: NonEmptyString!\n    $notes: String\n    $expiresAt: DateTime\n  ) {\n    addAgreement(\n      host: $host\n      title: $title\n      account: $account\n      attachment: $attachment\n      expiresAt: $expiresAt\n      notes: $notes\n    ) {\n      id\n      ...AgreementMutationFields\n    }\n  }\n  \n": types.AddAgreementDocument,
    "\n  mutation EditAgreement(\n    $agreement: AgreementReferenceInput!\n    $title: NonEmptyString!\n    $expiresAt: DateTime\n    $notes: String\n    $attachment: Upload\n  ) {\n    editAgreement(agreement: $agreement, title: $title, expiresAt: $expiresAt, notes: $notes, attachment: $attachment) {\n      id\n      ...AgreementMutationFields\n    }\n  }\n  \n": types.EditAgreementDocument,
    "\n  mutation DeleteAgreement($id: String!) {\n    deleteAgreement(agreement: { id: $id }) {\n      id\n    }\n  }\n": types.DeleteAgreementDocument,
    "\n  fragment AgreementViewFields on Agreement {\n    id\n    title\n    createdAt\n    expiresAt\n    notes\n    account {\n      id\n      type\n      legacyId\n      slug\n      imageUrl\n      name\n      ...AccountHoverCardFields\n    }\n    createdBy {\n      id\n      type\n      legacyId\n      slug\n      imageUrl\n      name\n      ...AccountHoverCardFields\n    }\n    attachment {\n      id\n      url\n      name\n      size\n      type\n    }\n  }\n  \n": types.AgreementViewFieldsFragmentDoc,
    "\n  fragment NavbarFields on CollectiveFeatures {\n    id\n    ABOUT\n    CONNECTED_ACCOUNTS\n    RECEIVE_FINANCIAL_CONTRIBUTIONS\n    RECURRING_CONTRIBUTIONS\n    EVENTS\n    PROJECTS\n    USE_EXPENSES\n    RECEIVE_EXPENSES\n    COLLECTIVE_GOALS\n    TOP_FINANCIAL_CONTRIBUTORS\n    CONVERSATIONS\n    UPDATES\n    TEAM\n    CONTACT_FORM\n    RECEIVE_HOST_APPLICATIONS\n    HOST_DASHBOARD\n    TRANSACTIONS\n    REQUEST_VIRTUAL_CARDS\n  }\n": types.NavbarFieldsFragmentDoc,
    "\n  fragment ProjectSectionCardFields on Account {\n    id\n    legacyId\n    slug\n    name\n    description\n    imageUrl\n    isActive\n    isArchived\n    backgroundImageUrl(height: 208)\n  }\n": types.ProjectSectionCardFieldsFragmentDoc,
    "\n      query ProjectsSectionSearch($slug: String, $searchTerm: String) {\n        account(slug: $slug) {\n          projects: childrenAccounts(accountType: [PROJECT], searchTerm: $searchTerm) {\n            totalCount\n            nodes {\n              ...ProjectSectionCardFields\n            }\n          }\n        }\n      }\n\n      \n    ": types.ProjectsSectionSearchDocument,
    "\n  query UpdatesSection($slug: String!, $onlyPublishedUpdates: Boolean) {\n    account(slug: $slug) {\n      id\n      updates(limit: 3, onlyPublishedUpdates: $onlyPublishedUpdates) {\n        nodes {\n          id\n          slug\n          title\n          summary\n          createdAt\n          publishedAt\n          isPrivate\n          userCanSeeUpdate\n          fromAccount {\n            id\n            type\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n    }\n  }\n": types.UpdatesSectionDocument,
    "\n  query ContributionFlowPaymentMethods($slug: String) {\n    account(slug: $slug) {\n      id\n      paymentMethods(\n        type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID, COLLECTIVE]\n        includeExpired: true\n      ) {\n        id\n        name\n        data\n        service\n        type\n        expiryDate\n        providerType\n        sourcePaymentMethod {\n          id\n          name\n          data\n          service\n          type\n          expiryDate\n          providerType\n          balance {\n            currency\n          }\n          limitedToHosts {\n            id\n            legacyId\n            slug\n          }\n        }\n        balance {\n          valueInCents\n          currency\n        }\n        account {\n          id\n          slug\n          type\n          name\n          imageUrl\n        }\n        limitedToHosts {\n          id\n          legacyId\n          slug\n        }\n      }\n    }\n  }\n": types.ContributionFlowPaymentMethodsDocument,
    "\n  fragment ConfirmContributionFields on Order {\n    id\n    hostFeePercent\n    pendingContributionData {\n      expectedAt\n      paymentMethod\n      ponumber\n      memo\n      fromAccountInfo {\n        name\n        email\n      }\n    }\n    memo\n    fromAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      isIncognito\n      ... on Individual {\n        isGuest\n      }\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      ... on AccountWithHost {\n        bankTransfersHostFeePercent: hostFeePercent(paymentMethodType: MANUAL)\n        host {\n          id\n          settings\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          settings\n        }\n      }\n    }\n    createdByAccount {\n      id\n      slug\n      name\n      imageUrl\n    }\n    totalAmount {\n      valueInCents\n      currency\n    }\n    amount {\n      currency\n      valueInCents\n    }\n    taxAmount {\n      currency\n      valueInCents\n    }\n    tax {\n      id\n      type\n      rate\n    }\n    platformTipAmount {\n      currency\n      valueInCents\n    }\n    platformTipEligible\n  }\n": types.ConfirmContributionFieldsFragmentDoc,
    "\n  mutation ConfirmContribution($order: OrderUpdateInput!, $action: ProcessOrderAction!) {\n    processPendingOrder(order: $order, action: $action) {\n      id\n      legacyId\n      status\n      permissions {\n        id\n        canMarkAsPaid\n        canMarkAsExpired\n      }\n      ...ConfirmContributionFields\n    }\n  }\n  \n": types.ConfirmContributionDocument,
    "\n  query ContributionDrawer($orderId: Int!) {\n    order(order: { legacyId: $orderId }) {\n      id\n      legacyId\n      nextChargeDate\n      lastChargedAt\n      amount {\n        value\n        valueInCents\n        currency\n      }\n      totalAmount {\n        value\n        valueInCents\n        currency\n      }\n      paymentMethod {\n        id\n        type\n      }\n      status\n      description\n      createdAt\n      processedAt\n      frequency\n      tier {\n        id\n        name\n        description\n      }\n      createdByAccount {\n        ...ContributionDrawerAccountFields\n      }\n      individual: createdByAccount {\n        ...ContributionDrawerAccountFields\n      }\n      fromAccount {\n        ...ContributionDrawerAccountFields\n        ... on AccountWithHost {\n          host {\n            id\n            slug\n          }\n        }\n      }\n      toAccount {\n        ...ContributionDrawerAccountFields\n      }\n      platformTipEligible\n      platformTipAmount {\n        value\n        valueInCents\n        currency\n      }\n      hostFeePercent\n      tags\n      tax {\n        type\n        idNumber\n        rate\n      }\n      accountingCategory {\n        id\n        name\n        friendlyName\n        code\n      }\n      activities {\n        nodes {\n          id\n          type\n          createdAt\n          fromAccount {\n            ...ContributionDrawerAccountFields\n          }\n          account {\n            ...ContributionDrawerAccountFields\n          }\n          host {\n            ...ContributionDrawerAccountFields\n          }\n          individual {\n            ...ContributionDrawerAccountFields\n          }\n          data\n          transaction {\n            ...ContributionDrawerTransactionFields\n          }\n        }\n      }\n      customData\n      memo\n      needsConfirmation\n      pendingContributionData {\n        expectedAt\n        paymentMethod\n        ponumber\n        memo\n        fromAccountInfo {\n          name\n          email\n        }\n      }\n      transactions {\n        ...ContributionDrawerTransactionFields\n      }\n      permissions {\n        id\n        canResume\n        canMarkAsExpired\n        canMarkAsPaid\n        canEdit\n        canComment\n        canSeePrivateActivities\n        canSetTags\n        canUpdateAccountingCategory\n      }\n    }\n  }\n\n  fragment ContributionDrawerAccountFields on Account {\n    id\n    name\n    slug\n    isIncognito\n    type\n    imageUrl\n    isHost\n    isArchived\n    ... on Individual {\n      isGuest\n    }\n    ... on AccountWithHost {\n      host {\n        id\n        slug\n        type\n        accountingCategories {\n          nodes {\n            id\n            code\n            name\n            friendlyName\n            kind\n            appliesTo\n          }\n        }\n      }\n      approvedAt\n    }\n\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n      }\n    }\n  }\n\n  fragment ContributionDrawerTransactionFields on Transaction {\n    id\n    legacyId\n    uuid\n    kind\n    amount {\n      currency\n      valueInCents\n    }\n    netAmount {\n      currency\n      valueInCents\n    }\n    group\n    type\n    description\n    createdAt\n    isRefunded\n    isRefund\n    isOrderRejected\n    account {\n      ...ContributionDrawerAccountFields\n    }\n    oppositeAccount {\n      ...ContributionDrawerAccountFields\n    }\n    expense {\n      id\n      type\n    }\n    permissions {\n      id\n      canRefund\n      canDownloadInvoice\n      canReject\n    }\n    paymentProcessorUrl\n  }\n": types.ContributionDrawerDocument,
    "\n  fragment CommentFields on Comment {\n    id\n    createdAt\n    html\n    reactions\n    userReactions\n    type\n    account {\n      id\n      slug\n      type\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n    }\n    fromAccount {\n      id\n      type\n      name\n      slug\n      imageUrl\n      ...AccountHoverCardFields\n    }\n  }\n  \n": types.CommentFieldsFragmentDoc,
    "\n  fragment ConversationListFragment on ConversationCollection {\n    totalCount\n    offset\n    limit\n    nodes {\n      id\n      title\n      summary\n      slug\n      createdAt\n      tags\n      fromAccount {\n        id\n        name\n        type\n        slug\n        imageUrl\n      }\n      followers(limit: 5) {\n        totalCount\n        nodes {\n          id\n          slug\n          type\n          name\n          imageUrl(height: 64)\n        }\n      }\n      stats {\n        id\n        commentsCount\n      }\n    }\n  }\n": types.ConversationListFragmentFragmentDoc,
    "\n  query IsUserFollowingConversation($id: String!) {\n    loggedInAccount {\n      id\n      slug\n      imageUrl\n      type\n      name\n      ... on Individual {\n        isFollowingConversation(id: $id)\n      }\n    }\n  }\n": types.IsUserFollowingConversationDocument,
    "\n  mutation EditComment($comment: CommentUpdateInput!) {\n    editComment(comment: $comment) {\n      id\n      ...CommentFields\n    }\n  }\n  \n": types.EditCommentDocument,
    "\n  mutation EditCrowdfundingRedesignSettings($account: AccountReferenceInput!, $value: JSON!) {\n    editAccountSetting(account: $account, key: \"crowdfundingRedesign\", value: $value) {\n      id\n      settings\n    }\n  }\n": types.EditCrowdfundingRedesignSettingsDocument,
    "\n  query TransactionGroupDetails($slug: String, $groupId: String!) {\n    transactionGroup(account: { slug: $slug }, groupId: $groupId) {\n      id\n      totalAmount {\n        valueInCents\n        currency\n      }\n      account {\n        id\n        name\n        slug\n        imageUrl\n      }\n      createdAt\n      primaryTransaction {\n        kind\n        type\n        oppositeAccount {\n          id\n          name\n          slug\n          imageUrl\n          type\n        }\n      }\n      transactions {\n        id\n        kind\n        type\n        account {\n          id\n          name\n          slug\n          imageUrl\n          type\n        }\n        oppositeAccount {\n          id\n          name\n          slug\n          imageUrl\n          type\n        }\n        expense {\n          id\n          status\n          amountV2 {\n            valueInCents\n            currency\n          }\n        }\n        order {\n          id\n        }\n        amount {\n          valueInCents\n          currency\n        }\n      }\n    }\n  }\n": types.TransactionGroupDetailsDocument,
    "\n  query TransactionGroups($slug: String!, $limit: Int, $type: TransactionType) {\n    transactionGroups(account: { slug: $slug }, limit: $limit, type: $type) {\n      totalCount\n      nodes {\n        id\n        totalAmount {\n          valueInCents\n          currency\n        }\n        createdAt\n        primaryTransaction {\n          id\n          kind\n          type\n          oppositeAccount {\n            id\n            name\n            slug\n            imageUrl\n            type\n          }\n        }\n      }\n    }\n  }\n": types.TransactionGroupsDocument,
    "\n  query Finances(\n    $slug: String!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $compareFrom: DateTime\n    $compareTo: DateTime\n    $includeComparison: Boolean!\n    $includeBalance: Boolean!\n    $includeSpent: Boolean!\n    $includeReceived: Boolean!\n    $includeBalanceTimeseries: Boolean!\n    $includeReceivedTimeseries: Boolean!\n    $timeUnit: TimeUnit\n    $includeChildren: Boolean!\n  ) {\n    account(slug: $slug) {\n      id\n      name\n      type\n\n      totalBalance: stats {\n        id\n        current: balance(includeChildren: $includeChildren, dateTo: $dateTo) {\n          currency\n          valueInCents\n        }\n        comparison: balance(includeChildren: $includeChildren, dateTo: $compareTo) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n\n      balanceTimeseries: stats @include(if: $includeBalanceTimeseries) {\n        id\n        current: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n\n      totalSpent: stats {\n        id\n        current: totalAmountSpent(includeChildren: $includeChildren, dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountSpent(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      totalReceived: stats {\n        id\n        current: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          net: true\n        ) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n\n      receivedTimeseries: stats @include(if: $includeReceivedTimeseries) {\n        id\n        current: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n          net: true\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n          net: true\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n\n      ...ProfileMetrics\n\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          ...ProfileMetrics\n        }\n      }\n    }\n  }\n\n  fragment ProfileMetrics on Account {\n    ...AccountHoverCardFields\n    balance: stats @include(if: $includeBalance) {\n      id\n      current: balance(dateTo: $dateTo) {\n        currency\n        valueInCents\n      }\n      # comparison: balance(dateTo: $compareTo) @include(if: $includeComparison) {\n      #   currency\n      #   valueInCents\n      # }\n    }\n    spent: stats @include(if: $includeSpent) {\n      id\n      current: totalAmountSpent(dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n        currency\n        valueInCents\n      }\n      # comparison: totalAmountSpent(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n      #   @include(if: $includeComparison) {\n      #   currency\n      #   valueInCents\n      # }\n    }\n    received: stats @include(if: $includeReceived) {\n      id\n      current: totalAmountReceived(dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n        currency\n        valueInCents\n      }\n      # comparison: totalAmountReceived(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n      #   @include(if: $includeComparison) {\n      #   currency\n      #   valueInCents\n      # }\n    }\n  }\n  \n": types.FinancesDocument,
    "\n  query Updates($slug: String!) {\n    account(slug: $slug) {\n      updates(onlyPublishedUpdates: true) {\n        totalCount\n        nodes {\n          id\n          title\n          html\n          slug\n          summary\n          reactions\n          userReactions\n          userCanSeeUpdate\n          publishedAt\n          fromAccount {\n            id\n            name\n            slug\n            imageUrl\n            type\n          }\n          comments {\n            totalCount\n          }\n        }\n      }\n    }\n  }\n": types.UpdatesDocument,
    "\n  query ProfilePage($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      slug\n      imageUrl\n      description\n      longDescription\n      backgroundImageUrl\n      settings\n      type\n      currency\n      isActive\n      socialLinks {\n        type\n        url\n      }\n\n      updates(onlyPublishedUpdates: true) {\n        totalCount\n        nodes {\n          id\n          title\n          html\n          slug\n          summary\n          reactions\n          userReactions\n          userCanSeeUpdate\n          publishedAt\n          fromAccount {\n            id\n            name\n            slug\n            imageUrl\n            type\n          }\n          comments {\n            totalCount\n          }\n        }\n      }\n      expenses(limit: 20, direction: RECEIVED, status: PAID) {\n        totalCount\n        nodes {\n          id\n          description\n          type\n          status\n          createdAt\n          payee {\n            id\n            name\n            type\n            imageUrl\n            slug\n          }\n          account {\n            id\n            name\n            type\n            imageUrl\n            slug\n          }\n          amountV2 {\n            valueInCents\n            currency\n          }\n        }\n      }\n\n      contributionTransactions: transactions(\n        limit: 20\n        kind: [CONTRIBUTION, ADDED_FUNDS]\n        isRefund: false\n        type: CREDIT\n      ) {\n        totalCount\n        nodes {\n          id\n          description\n          createdAt\n          type\n          kind\n          fromAccount {\n            id\n            name\n            type\n            slug\n            imageUrl\n          }\n          toAccount {\n            id\n            name\n            type\n            slug\n            imageUrl\n          }\n          amount {\n            valueInCents\n            currency\n          }\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          settings\n          imageUrl\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n\n      ... on AccountWithContributions {\n        tiers {\n          totalCount\n          nodes {\n            id\n            name\n            slug\n            type\n            description\n            button\n            amount {\n              valueInCents\n              currency\n            }\n            currency\n            minimumAmount {\n              valueInCents\n              currency\n            }\n            endsAt\n            amountType\n            frequency\n            availableQuantity\n          }\n        }\n\n        financialContributors: contributors(roles: [BACKER], limit: 150) {\n          totalCount\n          nodes {\n            id\n            name\n            roles\n            isAdmin\n            isCore\n            isBacker\n            since\n            image\n            description\n            collectiveSlug\n            totalAmountDonated\n            type\n            publicMessage\n            isIncognito\n          }\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          name\n          description\n          type\n          slug\n          settings\n          currency\n          stats {\n            totalAmountReceived {\n              valueInCents\n              currency\n            }\n            yearlyBudget {\n              valueInCents\n              currency\n            }\n            contributorsCount\n          }\n        }\n      }\n\n      stats {\n        totalAmountReceived {\n          valueInCents\n          currency\n        }\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        contributorsCount\n      }\n    }\n  }\n": types.ProfilePageDocument,
    "\n  query ProfileLayout($collectiveSlug: String!, $accountSlug: String, $includeAccount: Boolean!) {\n    account: account(slug: $accountSlug) @include(if: $includeAccount) {\n      id\n      name\n      slug\n      settings\n      type\n      description\n      longDescription\n      backgroundImageUrl\n      currency\n      stats {\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        totalAmountReceived(net: true) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisMonth: totalAmountReceived(\n          net: true\n          dateFrom: \"2024-02-01T00:00:00.000Z\"\n          dateTo: \"2024-03-01T00:00:00.000Z\"\n        ) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisYear: totalAmountReceived(\n          net: true\n          dateFrom: \"2024-01-01T00:00:00.000Z\"\n          dateTo: \"2025-01-01T00:00:00.000Z\"\n        ) {\n          valueInCents\n          currency\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      # TODO: mutualize the account stuff as a fragment\n      ... on AccountWithContributions {\n        financialContributors: contributors(roles: [BACKER], limit: 5) {\n          totalCount\n          nodes {\n            id\n            name\n            roles\n            isAdmin\n            isCore\n            isBacker\n            since\n            image\n            description\n            collectiveSlug\n            totalAmountDonated\n            type\n            publicMessage\n            isIncognito\n          }\n        }\n      }\n    }\n    collective: account(slug: $collectiveSlug) {\n      id\n      name\n      slug\n      imageUrl\n      description\n      longDescription\n      backgroundImageUrl\n      settings\n      type\n      currency\n      isActive\n      socialLinks {\n        type\n        url\n      }\n      stats {\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        totalAmountReceived(net: true) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisMonth: totalAmountReceived(\n          net: true\n          dateFrom: \"2024-02-01T00:00:00.000Z\"\n          dateTo: \"2024-03-01T00:00:00.000Z\"\n        ) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisYear: totalAmountReceived(\n          net: true\n          dateFrom: \"2024-01-01T00:00:00.000Z\"\n          dateTo: \"2025-01-01T00:00:00.000Z\"\n        ) {\n          valueInCents\n          currency\n        }\n      }\n      ... on AccountWithContributions {\n        tiers {\n          totalCount\n          nodes {\n            id\n            name\n            slug\n            type\n            description\n            button\n            amount {\n              valueInCents\n              currency\n            }\n            currency\n            minimumAmount {\n              valueInCents\n              currency\n            }\n            endsAt\n            amountType\n            frequency\n            availableQuantity\n          }\n        }\n        financialContributors: contributors(roles: [BACKER], limit: 5) {\n          totalCount\n          nodes {\n            id\n            name\n            roles\n            isAdmin\n            isCore\n            isBacker\n            since\n            image\n            description\n            collectiveSlug\n            totalAmountDonated\n            type\n            publicMessage\n            isIncognito\n          }\n        }\n      }\n\n      updates(onlyPublishedUpdates: true) {\n        totalCount\n      }\n      expenses(limit: 0, direction: RECEIVED, status: PAID, includeChildrenExpenses: true) {\n        totalCount\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          settings\n          imageUrl\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          name\n          description\n          type\n          slug\n          settings\n          currency\n          stats {\n            totalAmountReceived {\n              valueInCents\n              currency\n            }\n            yearlyBudget {\n              valueInCents\n              currency\n            }\n            contributorsCount\n          }\n        }\n      }\n    }\n  }\n": types.ProfileLayoutDocument,
    "\n  query ContributePage($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      slug\n      imageUrl\n      longDescription\n      backgroundImageUrl\n      settings\n      type\n      currency\n      isActive\n\n      stats {\n        totalAmountReceived {\n          valueInCents\n          currency\n        }\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        contributorsCount\n      }\n      ... on AccountWithContributions {\n        tiers {\n          totalCount\n          nodes {\n            id\n            name\n            slug\n            type\n            description\n            button\n            amount {\n              valueInCents\n              currency\n            }\n            currency\n            minimumAmount {\n              valueInCents\n              currency\n            }\n            endsAt\n            amountType\n            frequency\n            availableQuantity\n          }\n        }\n\n        financialContributors: contributors(roles: [BACKER], limit: 5) {\n          totalCount\n          nodes {\n            id\n            name\n            roles\n            isAdmin\n            isCore\n            isBacker\n            since\n            image\n            description\n            collectiveSlug\n            totalAmountDonated\n            type\n            publicMessage\n            isIncognito\n          }\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          settings\n          imageUrl\n        }\n      }\n    }\n    projects: accounts(\n      parent: { slug: $slug }\n      type: [PROJECT]\n      isActive: true\n      orderBy: { field: BALANCE, direction: DESC }\n    ) {\n      totalCount\n      nodes {\n        id\n        name\n        description\n        type\n        slug\n        settings\n        currency\n        stats {\n          totalAmountReceived {\n            valueInCents\n            currency\n          }\n          yearlyBudget {\n            valueInCents\n            currency\n          }\n          contributorsCount\n        }\n      }\n    }\n    events: accounts(\n      parent: { slug: $slug }\n      type: [EVENT]\n      isActive: true\n      orderBy: { field: BALANCE, direction: DESC }\n    ) {\n      totalCount\n      nodes {\n        id\n        name\n        description\n        type\n        slug\n        settings\n        currency\n        stats {\n          totalAmountReceived {\n            valueInCents\n            currency\n          }\n          yearlyBudget {\n            valueInCents\n            currency\n          }\n          contributorsCount\n        }\n      }\n    }\n  }\n": types.ContributePageDocument,
    "\n  query GoalProgress($slug: String!, $oneYearAgo: DateTime, $thisMonthStart: DateTime, $thisYearStart: DateTime) {\n    account(slug: $slug) {\n      id\n      slug\n      type\n      currency\n      ... on AccountWithContributions {\n        activeContributors(limit: 5) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n        activeContributorsForBudgetGoal: activeContributors(\n          includeActiveRecurringContributions: true\n          dateFrom: $oneYearAgo\n          limit: 5\n        ) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n        activeContributorsForYearlyBudget: activeContributors(\n          includeActiveRecurringContributions: true\n          dateFrom: $oneYearAgo\n          limit: 5\n        ) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n        activeContributorsForCalendarYear: activeContributors(dateFrom: $thisYearStart, limit: 5) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n        activeContributorsForCalendarMonth: activeContributors(dateFrom: $thisMonthStart, limit: 5) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n      }\n\n      stats {\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        totalAmountReceived(net: true) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisMonth: totalAmountReceived(net: true, dateFrom: $thisMonthStart) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisYear: totalAmountReceived(net: true, dateFrom: $thisYearStart) {\n          valueInCents\n          currency\n        }\n      }\n      members(role: [BACKER], limit: 5) {\n        totalCount\n        limit\n        nodes {\n          id\n          account {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n      }\n    }\n  }\n": types.GoalProgressDocument,
    "\n  query Account($slug: String!) {\n    account(slug: $slug) {\n      id\n      ...AccountHoverCardFields\n    }\n  }\n  \n": types.AccountDocument,
    "\n  query AccountFilterSearch($searchTerm: String) {\n    accounts(searchTerm: $searchTerm) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n": types.AccountFilterSearchDocument,
    "\n  query AccountingCategories($hostSlug: String) {\n    host(slug: $hostSlug) {\n      id\n      accountingCategories {\n        nodes {\n          id\n          code\n          name\n          kind\n          appliesTo\n        }\n      }\n    }\n  }\n": types.AccountingCategoriesDocument,
    "\n  query ExpenseTags($searchTerm: String, $host: AccountReferenceInput, $account: AccountReferenceInput) {\n    tagStats: expenseTagStats(tagSearchTerm: $searchTerm, host: $host, account: $account) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n": types.ExpenseTagsDocument,
    "\n  query HostedAccountFilterSearch($searchTerm: String, $hostSlug: String, $orderBy: OrderByInput) {\n    accounts(searchTerm: $searchTerm, host: { slug: $hostSlug }, orderBy: $orderBy) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n": types.HostedAccountFilterSearchDocument,
    "\n  query HostsFilterSearch($searchTerm: String, $orderBy: OrderByInput) {\n    accounts(searchTerm: $searchTerm, isHost: true, orderBy: $orderBy) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n": types.HostsFilterSearchDocument,
    "\n  query VirtualCardFilter($id: String!) {\n    virtualCard(virtualCard: { id: $id }) {\n      id\n      name\n      last4\n    }\n  }\n": types.VirtualCardFilterDocument,
    "\n  query Dashboard($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      createdAt\n      slug\n      name\n      isHost\n      type\n      settings\n      isArchived\n      isActive\n      isIncognito\n      imageUrl(height: 256)\n      canHaveChangelogUpdates\n      connectedAccounts {\n        id\n        service\n      }\n      duplicatedAccounts {\n        totalCount\n      }\n      pendingExpenses: expenses(status: PENDING, direction: RECEIVED, includeChildrenExpenses: true, limit: 0) {\n        totalCount\n      }\n      pausedIncomingContributions: orders(filter: INCOMING, status: PAUSED, includeIncognito: true) {\n        totalCount\n      }\n      pausedOutgoingContributions: orders(filter: OUTGOING, status: PAUSED, includeIncognito: true) {\n        totalCount\n      }\n      ... on AccountWithContributions {\n        canStartResumeContributionsProcess\n        hasResumeContributionsProcessStarted\n      }\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          slug\n          name\n          type\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n        VIRTUAL_CARDS\n        USE_PAYMENT_METHODS\n        EMIT_GIFT_CARDS\n      }\n      policies {\n        id\n        REQUIRE_2FA_FOR_ADMINS\n      }\n      ... on Organization {\n        host {\n          id\n          requiredLegalDocuments\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          policies {\n            id\n            REQUIRE_2FA_FOR_ADMINS\n          }\n        }\n      }\n      ... on AccountWithHost {\n        hostFeePercent\n        isApproved\n        host {\n          id\n          requiredLegalDocuments\n          legacyId\n          slug\n          name\n          settings\n          policies {\n            id\n            EXPENSE_AUTHOR_CANNOT_APPROVE {\n              enabled\n              amountInCents\n              appliesToHostedCollectives\n              appliesToSingleAdminCollectives\n            }\n            COLLECTIVE_MINIMUM_ADMINS {\n              numberOfAdmins\n              applies\n              freeze\n            }\n          }\n        }\n      }\n    }\n  }\n  \n": types.DashboardDocument,
    "\n  query DashboardContributorsMetadata($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      currency\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      ALL: members(role: [BACKER, FOLLOWER]) {\n        totalCount\n      }\n      FOLLOWERS: members(role: [FOLLOWER]) {\n        totalCount\n      }\n      BACKERS: members(role: [BACKER]) {\n        totalCount\n      }\n    }\n  }\n": types.DashboardContributorsMetadataDocument,
    "\n  query DashboardContributors(\n    $slug: String!\n    $offset: Int\n    $limit: Int\n    $role: [MemberRole!]\n    $orderBy: ChronologicalOrderInput\n    $email: EmailAddress\n  ) {\n    account(slug: $slug) {\n      id\n      members(role: $role, offset: $offset, limit: $limit, orderBy: $orderBy, email: $email) {\n        totalCount\n        nodes {\n          id\n          role\n          tier {\n            id\n            name\n          }\n          account {\n            id\n            slug\n            name\n          }\n          totalDonations {\n            currency\n            valueInCents\n          }\n          publicMessage\n          description\n          since\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.DashboardContributorsDocument,
    "\n  query HostAgreements($hostSlug: String!, $limit: Int!, $offset: Int!, $account: [AccountReferenceInput]) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      hostedAccountAgreements(limit: $limit, offset: $offset, accounts: $account) {\n        totalCount\n        nodes {\n          id\n          ...AgreementViewFields\n        }\n      }\n    }\n  }\n  \n": types.HostAgreementsDocument,
    "\n  query HostVirtualCardRequestsMetaData($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n    }\n    pending: virtualCardRequests(host: { slug: $hostSlug }, status: [PENDING], limit: 0, offset: 0) {\n      totalCount\n    }\n    approved: virtualCardRequests(host: { slug: $hostSlug }, status: [APPROVED], limit: 0, offset: 0) {\n      totalCount\n    }\n    rejected: virtualCardRequests(host: { slug: $hostSlug }, status: [REJECTED], limit: 0, offset: 0) {\n      totalCount\n    }\n  }\n": types.HostVirtualCardRequestsMetaDataDocument,
    "\n  query HostVirtualCardRequests(\n    $hostSlug: String!\n    $account: [AccountReferenceInput]\n    $status: [VirtualCardRequestStatus]\n    $limit: Int!\n    $offset: Int!\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n    }\n    virtualCardRequests(\n      host: { slug: $hostSlug }\n      collective: $account\n      status: $status\n      limit: $limit\n      offset: $offset\n    ) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        purpose\n        notes\n        status\n        currency\n        spendingLimitAmount {\n          valueInCents\n          currency\n        }\n        spendingLimitInterval\n        createdAt\n        account {\n          id\n          name\n          slug\n          imageUrl\n          ...AccountHoverCardFields\n        }\n        host {\n          id\n          name\n          slug\n          imageUrl\n        }\n        assignee {\n          id\n          name\n          email\n          slug\n          imageUrl\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n": types.HostVirtualCardRequestsDocument,
    "\n  query HostedVirtualCardAccounts($slug: String) {\n    host(slug: $slug) {\n      id\n      hostedVirtualCardCollectives(limit: 500) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n": types.HostedVirtualCardAccountsDocument,
    "\n  query HostedVirtualCardsMetaData($slug: String) {\n    host(slug: $slug) {\n      id\n      slug\n      currency\n      active: hostedVirtualCards(status: [ACTIVE], limit: 0) {\n        totalCount\n      }\n      inactive: hostedVirtualCards(status: [INACTIVE], limit: 0) {\n        totalCount\n      }\n      canceled: hostedVirtualCards(status: [CANCELED], limit: 0) {\n        totalCount\n      }\n    }\n  }\n": types.HostedVirtualCardsMetaDataDocument,
    "\n  query HostedVirtualCards(\n    $slug: String\n    $limit: Int!\n    $offset: Int!\n    $account: [AccountReferenceInput]\n    $status: [VirtualCardStatus]\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $amountFrom: AmountInput\n    $amountTo: AmountInput\n    $hasMissingReceipts: Boolean\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n  ) {\n    host(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      imageUrl\n      currency\n      settings\n      stripe {\n        username\n      }\n      hostedVirtualCards(\n        limit: $limit\n        offset: $offset\n        collectiveAccountIds: $account\n        status: $status\n        withExpensesDateFrom: $dateFrom\n        withExpensesDateTo: $dateTo\n        spentAmountFrom: $amountFrom\n        spentAmountTo: $amountTo\n        hasMissingReceipts: $hasMissingReceipts\n        searchTerm: $searchTerm\n        orderBy: $orderBy\n      ) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          name\n          last4\n          data\n          status\n          privateData\n          provider\n          spendingLimitAmount\n          spendingLimitInterval\n          spendingLimitRenewsOn\n          remainingLimit\n          currency\n          createdAt\n          account {\n            id\n            name\n            slug\n            imageUrl\n            ...AccountHoverCardFields\n          }\n          assignee {\n            id\n            name\n            email\n            slug\n            imageUrl\n            ...AccountHoverCardFields\n          }\n        }\n      }\n    }\n  }\n  \n": types.HostedVirtualCardsDocument,
    "\n  fragment HostFields on Host {\n    id\n    name\n    legalName\n    slug\n    type\n    expensePolicy\n    settings\n    currency\n    requiredLegalDocuments\n    features {\n      id\n      MULTI_CURRENCY_EXPENSES\n    }\n    location {\n      id\n      address\n      country\n    }\n    transferwise {\n      id\n      availableCurrencies\n    }\n    supportedPayoutMethods\n    isTrustedHost\n    vendors(searchTerm: $searchTerm, isArchived: $isArchived, limit: $limit, offset: $offset)\n      @skip(if: $includePotentialVendors) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...VendorFields\n      }\n    }\n    potentialVendors @include(if: $includePotentialVendors) {\n      nodes {\n        id\n        slug\n        name\n        type\n        description\n        tags\n        imageUrl(height: 96)\n        isArchived\n        createdAt\n      }\n    }\n  }\n\n  query DashboardVendors(\n    $slug: String!\n    $searchTerm: String\n    $isArchived: Boolean\n    $includePotentialVendors: Boolean!\n    $limit: Int\n    $offset: Int\n  ) {\n    account(slug: $slug) {\n      id\n      ... on AccountWithHost {\n        host {\n          id\n          ...HostFields\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          ...HostFields\n        }\n      }\n    }\n  }\n  \n": types.HostFieldsFragmentDoc,
    "\n      query AccountingCategoryTable($hostSlug: String!) {\n        host(slug: $hostSlug) {\n          id\n          type\n        }\n      }\n    ": types.AccountingCategoryTableDocument,
    "\n  query AdminAccountingCategories($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      type\n      slug\n      accountingCategories {\n        totalCount\n        nodes {\n          id\n          kind\n          code\n          hostOnly\n          instructions\n          name\n          friendlyName\n          expensesTypes\n          createdAt\n          appliesTo\n        }\n      }\n    }\n  }\n": types.AdminAccountingCategoriesDocument,
    "\n  mutation EditAccountingCategories($hostSlug: String!, $categories: [AccountingCategoryInput!]!) {\n    editAccountingCategories(account: { slug: $hostSlug }, categories: $categories) {\n      id\n      ... on Organization {\n        host {\n          id\n          slug\n          accountingCategories {\n            totalCount\n            nodes {\n              id\n              kind\n              code\n              name\n              hostOnly\n              instructions\n              friendlyName\n              expensesTypes\n              createdAt\n              appliesTo\n            }\n          }\n        }\n      }\n    }\n  }\n": types.EditAccountingCategoriesDocument,
    "\n  mutation InternalTransfer($order: OrderCreateInput!) {\n    createOrder(order: $order) {\n      order {\n        id\n        fromAccount {\n          id\n          stats {\n            id\n            balance {\n              valueInCents\n            }\n          }\n        }\n      }\n    }\n  }\n": types.InternalTransferDocument,
    "\n  fragment DashboardAccountsQueryFields on Account {\n    id\n    legacyId\n    name\n    slug\n    type\n    currency\n    imageUrl(height: 96)\n    isFrozen\n    isActive\n    isHost\n    tags\n    settings\n    createdAt\n    stats {\n      id\n      balance {\n        valueInCents\n        currency\n      }\n      totalAmountSpent {\n        valueInCents\n        currency\n      }\n      totalAmountReceived {\n        valueInCents\n        currency\n      }\n    }\n    paymentMethods(service: OPENCOLLECTIVE, type: COLLECTIVE) {\n      id\n      service\n      name\n    }\n  }\n": types.DashboardAccountsQueryFieldsFragmentDoc,
    "\n  query AccountsDashboardMetadata($accountSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      isActive\n      isArchived\n      all: childrenAccounts(limit: 1) {\n        totalCount\n      }\n      active: childrenAccounts(limit: 1, isActive: true) {\n        totalCount\n      }\n      archived: childrenAccounts(limit: 1, isActive: false) {\n        totalCount\n      }\n    }\n  }\n": types.AccountsDashboardMetadataDocument,
    "\n  query AccountsDashboard($accountSlug: String!, $limit: Int!, $offset: Int!, $isActive: Boolean) {\n    account(slug: $accountSlug) {\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      type\n      settings\n      ...DashboardAccountsQueryFields\n      stats {\n        id\n        consolidatedBalance {\n          valueInCents\n          currency\n        }\n      }\n      childrenAccounts(limit: $limit, offset: $offset, isActive: $isActive) {\n        totalCount\n        nodes {\n          id\n          ...DashboardAccountsQueryFields\n        }\n      }\n    }\n  }\n\n  \n": types.AccountsDashboardDocument,
    "\n  query HostedAccountDetail($id: String!) {\n    account(id: $id) {\n      ...DashboardAccountsQueryFields\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      type\n      settings\n      ... on AccountWithParent {\n        parent {\n          id\n        }\n      }\n      stats {\n        id\n        consolidatedBalance {\n          valueInCents\n          currency\n        }\n      }\n      members(role: [ADMIN]) {\n        nodes {\n          id\n          account {\n            id\n            ...AccountHoverCardFields\n            emails\n          }\n        }\n      }\n      transactions(limit: 10, offset: 0, kind: [ADDED_FUNDS, CONTRIBUTION, EXPENSE]) {\n        nodes {\n          id\n          clearedAt\n          createdAt\n          type\n          kind\n          description\n          isRefund\n          isRefunded\n          isInReview\n          isDisputed\n          isOrderRejected\n          amount {\n            valueInCents\n            currency\n          }\n          netAmount {\n            valueInCents\n            currency\n          }\n          oppositeAccount {\n            id\n            slug\n            name\n            imageUrl\n          }\n        }\n      }\n    }\n    activities(account: { id: $id }, limit: 5, offset: 0, type: [COLLECTIVE]) {\n      nodes {\n        id\n        type\n        createdAt\n        data\n        isSystem\n        account {\n          id\n          slug\n          name\n          imageUrl\n        }\n        fromAccount {\n          id\n          slug\n          name\n          imageUrl\n        }\n        individual {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n  }\n\n  \n  \n": types.HostedAccountDetailDocument,
    "\n  fragment AddFundsOrderFields on Order {\n    id\n    description\n    memo\n    processedAt\n    hostFeePercent\n    totalAmount {\n      valueInCents\n    }\n    paymentProcessorFee {\n      valueInCents\n    }\n    taxAmount {\n      valueInCents\n    }\n    transactions {\n      id\n      type\n      kind\n      amount {\n        valueInCents\n      }\n    }\n    fromAccount {\n      id\n      slug\n      name\n    }\n    toAccount {\n      id\n      slug\n      name\n      stats {\n        id\n        balance {\n          valueInCents\n        }\n      }\n    }\n    accountingCategory {\n      id\n      code\n      name\n      kind\n    }\n    tier {\n      id\n      legacyId\n      slug\n      name\n    }\n  }\n": types.AddFundsOrderFieldsFragmentDoc,
    "\n  mutation AddFunds(\n    $fromAccount: AccountReferenceInput!\n    $account: AccountReferenceInput!\n    $tier: TierReferenceInput\n    $amount: AmountInput!\n    $paymentProcessorFee: AmountInput\n    $description: String!\n    $memo: String\n    $processedAt: DateTime\n    $hostFeePercent: Float!\n    $invoiceTemplate: String\n    $tax: TaxInput\n    $accountingCategory: AccountingCategoryReferenceInput\n    $transactionsImportRow: TransactionsImportRowReferenceInput\n  ) {\n    addFunds(\n      account: $account\n      fromAccount: $fromAccount\n      amount: $amount\n      paymentProcessorFee: $paymentProcessorFee\n      description: $description\n      memo: $memo\n      processedAt: $processedAt\n      hostFeePercent: $hostFeePercent\n      tier: $tier\n      invoiceTemplate: $invoiceTemplate\n      tax: $tax\n      accountingCategory: $accountingCategory\n      transactionsImportRow: $transactionsImportRow\n    ) {\n      id\n      ...AddFundsOrderFields\n    }\n  }\n  \n": types.AddFundsDocument,
    "\n  mutation EditAddedFunds(\n    $order: OrderReferenceInput!\n    $fromAccount: AccountReferenceInput!\n    $account: AccountReferenceInput!\n    $tier: TierReferenceInput\n    $amount: AmountInput!\n    $paymentProcessorFee: AmountInput\n    $description: String!\n    $memo: String\n    $processedAt: DateTime\n    $hostFeePercent: Float!\n    $invoiceTemplate: String\n    $tax: TaxInput\n    $accountingCategory: AccountingCategoryReferenceInput\n  ) {\n    editAddedFunds(\n      order: $order\n      account: $account\n      fromAccount: $fromAccount\n      amount: $amount\n      paymentProcessorFee: $paymentProcessorFee\n      description: $description\n      memo: $memo\n      processedAt: $processedAt\n      hostFeePercent: $hostFeePercent\n      tier: $tier\n      invoiceTemplate: $invoiceTemplate\n      tax: $tax\n      accountingCategory: $accountingCategory\n    ) {\n      id\n      ...AddFundsOrderFields\n    }\n  }\n  \n": types.EditAddedFundsDocument,
    "\n  fragment AddFundsTierFields on Tier {\n    id\n    slug\n    legacyId\n    name\n  }\n": types.AddFundsTierFieldsFragmentDoc,
    "\n  fragment AddFundsAccountQueryHostFields on Host {\n    id\n    type\n    legacyId\n    slug\n    name\n    settings\n    plan {\n      id\n      hostFees\n    }\n    policies {\n      id\n      REQUIRE_2FA_FOR_ADMINS\n    }\n    isTrustedHost\n    vendors(forAccount: { slug: $slug }) {\n      nodes {\n        id\n        slug\n        name\n        type\n        description\n        imageUrl(height: 64)\n      }\n    }\n    orderAccountingCategories: accountingCategories(kind: [CONTRIBUTION, ADDED_FUNDS]) {\n      nodes {\n        id\n        code\n        name\n        kind\n        appliesTo\n      }\n    }\n  }\n": types.AddFundsAccountQueryHostFieldsFragmentDoc,
    "\n  query AddFundsAccount($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      type\n      isHost\n      name\n      slug\n      currency\n      settings\n      ... on Organization {\n        tiers {\n          nodes {\n            id\n            ...AddFundsTierFields\n          }\n        }\n        host {\n          ...AddFundsAccountQueryHostFields\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          imageUrl\n          type\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          slug\n          name\n          imageUrl\n          type\n        }\n      }\n      ... on Host {\n        ...AddFundsAccountQueryHostFields\n      }\n      ... on AccountWithHost {\n        addedFundsHostFeePercent: hostFeePercent(paymentMethodType: HOST)\n        host {\n          ...AddFundsAccountQueryHostFields\n        }\n      }\n      ... on AccountWithContributions {\n        tiers {\n          nodes {\n            id\n            ...AddFundsTierFields\n          }\n        }\n      }\n    }\n  }\n  \n  \n": types.AddFundsAccountDocument,
    "\n  mutation EditAccountFee($account: AccountReferenceInput!, $hostFeePercent: Float!, $isCustomFee: Boolean!) {\n    editAccountFeeStructure(account: $account, hostFeePercent: $hostFeePercent, isCustomFee: $isCustomFee) {\n      id\n      ... on AccountWithHost {\n        hostFeesStructure\n        hostFeePercent\n      }\n      childrenAccounts {\n        nodes {\n          id\n          ... on AccountWithHost {\n            hostFeesStructure\n            hostFeePercent\n          }\n        }\n      }\n    }\n  }\n": types.EditAccountFeeDocument,
    "\n      mutation UpdateCollectiveAdminsCanSeePayoutMethodPolicy($account: AccountReferenceInput!, $value: Boolean!) {\n        setPolicies(account: $account, policies: { COLLECTIVE_ADMINS_CAN_SEE_PAYOUT_METHODS: $value }) {\n          id\n          policies {\n            id\n            COLLECTIVE_ADMINS_CAN_SEE_PAYOUT_METHODS\n          }\n        }\n      }\n    ": types.UpdateCollectiveAdminsCanSeePayoutMethodPolicyDocument,
    "\n  query DisputedContributionsWarning($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      slug\n      hasDisputedOrders\n      hasInReviewOrders\n    }\n  }\n": types.DisputedContributionsWarningDocument,
    "\n  mutation EditAccountFreezeStatus(\n    $account: AccountReferenceInput!\n    $action: AccountFreezeAction!\n    $pauseExistingRecurringContributions: Boolean!\n    $messageForAccountAdmins: String\n    $messageForContributors: String\n  ) {\n    editAccountFreezeStatus(\n      account: $account\n      action: $action\n      messageForAccountAdmins: $messageForAccountAdmins\n      messageForContributors: $messageForContributors\n      pauseExistingRecurringContributions: $pauseExistingRecurringContributions\n    ) {\n      id\n      isFrozen\n      childrenAccounts {\n        nodes {\n          id\n          isFrozen\n        }\n      }\n    }\n  }\n": types.EditAccountFreezeStatusDocument,
    "\n  query FreezeAccountModal($accountId: String!) {\n    account(id: $accountId) {\n      id\n      name\n      slug\n      isFrozen\n      imageUrl(height: 64)\n      ...AccountSubscriptionsInfo\n      childrenAccounts {\n        nodes {\n          ...AccountSubscriptionsInfo\n        }\n      }\n    }\n  }\n  fragment AccountSubscriptionsInfo on Account {\n    stats {\n      activeRecurringContributionsBreakdown {\n        count\n      }\n    }\n    activePayPalSubscriptionOrders: orders(\n      filter: INCOMING\n      onlyActiveSubscriptions: true\n      paymentMethodService: PAYPAL\n      paymentMethodType: SUBSCRIPTION\n    ) {\n      totalCount\n    }\n  }\n": types.FreezeAccountModalDocument,
    "\n      query HostApplicationThread($hostApplication: HostApplicationReferenceInput!, $offset: Int!, $limit: Int!) {\n        hostApplication(hostApplication: $hostApplication) {\n          ...HostApplicationFields\n          threadComments: comments(limit: $limit, offset: $offset, orderBy: { field: CREATED_AT, direction: ASC }) {\n            totalCount\n            offset\n            limit\n            nodes {\n              ...CommentFields\n            }\n          }\n        }\n      }\n\n      \n      \n    ": types.HostApplicationThreadDocument,
    "\n      query HostApplicationRequests($accountSlug: String!, $limit: Int, $offset: Int) {\n        account(slug: $accountSlug) {\n          hostApplicationRequests(limit: $limit, offset: $offset) {\n            totalCount\n            nodes {\n              ...HostApplicationFields\n            }\n          }\n        }\n      }\n\n      \n    ": types.HostApplicationRequestsDocument,
    "\n  fragment HostApplicationFields on HostApplication {\n    id\n    message\n    customData\n    status\n    createdAt\n    comments {\n      totalCount\n    }\n\n    host {\n      id\n      legacyId\n      name\n      slug\n      website\n      description\n      type\n      imageUrl\n      createdAt\n      policies {\n        id\n        COLLECTIVE_MINIMUM_ADMINS {\n          numberOfAdmins\n        }\n      }\n    }\n\n    account {\n      id\n      legacyId\n      name\n      slug\n      website\n      description\n      type\n      imageUrl\n      createdAt\n      ... on AccountWithHost {\n        isActive\n        approvedAt\n        isApproved\n        host {\n          id\n        }\n      }\n      memberInvitations(role: [ADMIN]) {\n        id\n        role\n      }\n      admins: members(role: ADMIN) {\n        totalCount\n        nodes {\n          id\n          account {\n            id\n            type\n            slug\n            name\n            imageUrl\n            ...AccountHoverCardFields\n            emails\n          }\n        }\n      }\n      ...AccountHoverCardFields\n    }\n  }\n\n  \n": types.HostApplicationFieldsFragmentDoc,
    "\n  fragment ProcessHostApplicationFields on AccountWithHost {\n    isActive\n    approvedAt\n    isApproved\n    host {\n      id\n    }\n  }\n": types.ProcessHostApplicationFieldsFragmentDoc,
    "\n  query HostApplicationsMetadata($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      slug\n      name\n      type\n      settings\n      policies {\n        id\n        COLLECTIVE_MINIMUM_ADMINS {\n          numberOfAdmins\n        }\n      }\n\n      unreplied: hostApplications(limit: 0, offset: 0, lastCommentBy: COLLECTIVE_ADMIN) {\n        totalCount\n      }\n      pending: hostApplications(limit: 0, offset: 0, status: PENDING) {\n        totalCount\n      }\n      approved: hostApplications(limit: 0, offset: 0, status: APPROVED) {\n        totalCount\n      }\n      rejected: hostApplications(limit: 0, offset: 0, status: REJECTED) {\n        totalCount\n      }\n    }\n  }\n": types.HostApplicationsMetadataDocument,
    "\n  query HostApplications(\n    $hostSlug: String!\n    $limit: Int\n    $offset: Int\n    $orderBy: ChronologicalOrderInput\n    $searchTerm: String\n    $status: HostApplicationStatus\n    $lastCommentBy: [LastCommentBy]\n  ) {\n    host(slug: $hostSlug) {\n      id\n\n      hostApplications(\n        limit: $limit\n        offset: $offset\n        orderBy: $orderBy\n        status: $status\n        searchTerm: $searchTerm\n        lastCommentBy: $lastCommentBy\n      ) {\n        offset\n        limit\n        totalCount\n        nodes {\n          ...HostApplicationFields\n        }\n      }\n    }\n  }\n  \n": types.HostApplicationsDocument,
    "\n  mutation ProcessHostApplication(\n    $host: AccountReferenceInput\n    $account: AccountReferenceInput\n    $hostApplication: HostApplicationReferenceInput\n    $action: ProcessHostApplicationAction!\n    $message: String\n  ) {\n    processHostApplication(\n      host: $host\n      account: $account\n      hostApplication: $hostApplication\n      action: $action\n      message: $message\n    ) {\n      account {\n        id\n        ... on AccountWithHost {\n          ...ProcessHostApplicationFields\n        }\n      }\n      conversation {\n        id\n        slug\n      }\n      hostApplication {\n        ...HostApplicationFields\n      }\n    }\n  }\n  \n  \n": types.ProcessHostApplicationDocument,
    "\n  fragment HostedCollectiveFields on Account {\n    id\n    legacyId\n    name\n    slug\n    website\n    type\n    currency\n    imageUrl(height: 96)\n    isFrozen\n    isHost\n    tags\n    settings\n    createdAt\n    stats {\n      id\n      balance {\n        valueInCents\n        currency\n      }\n      consolidatedBalance: balance(includeChildren: true) {\n        valueInCents\n        currency\n      }\n    }\n    policies {\n      id\n      COLLECTIVE_ADMINS_CAN_SEE_PAYOUT_METHODS\n    }\n    ... on AccountWithHost {\n      hostFeesStructure\n      hostFeePercent\n      approvedAt\n      hostAgreements {\n        totalCount\n        nodes {\n          id\n          title\n          attachment {\n            id\n            url\n            name\n            type\n          }\n        }\n      }\n      host {\n        id\n        legacyId\n        name\n        slug\n        imageUrl(height: 96)\n      }\n    }\n    ... on AccountWithContributions {\n      totalFinancialContributors\n    }\n    childrenAccounts {\n      nodes {\n        id\n        slug\n        name\n        type\n        stats {\n          id\n          balance {\n            valueInCents\n            currency\n          }\n        }\n        ... on AccountWithHost {\n          hostFeesStructure\n          hostFeePercent\n          approvedAt\n        }\n        members(role: [ADMIN]) {\n          nodes {\n            id\n            account {\n              id\n              ...AccountHoverCardFields\n              emails\n            }\n          }\n        }\n      }\n    }\n    members(role: [ADMIN]) {\n      nodes {\n        id\n        account {\n          id\n          ...AccountHoverCardFields\n          emails\n        }\n      }\n    }\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n        name\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n": types.HostedCollectiveFieldsFragmentDoc,
    "\n  query HostedCollectivesMetadata($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      currency\n      all: hostedAccounts(limit: 1, accountType: [COLLECTIVE, FUND]) {\n        totalCount\n        currencies\n      }\n      active: hostedAccounts(limit: 1, accountType: [COLLECTIVE, FUND], isFrozen: false) {\n        totalCount\n      }\n      frozen: hostedAccounts(limit: 1, isFrozen: true) {\n        totalCount\n      }\n      unhosted: hostedAccounts(limit: 1, accountType: [COLLECTIVE, FUND], isUnhosted: true) {\n        totalCount\n      }\n    }\n  }\n": types.HostedCollectivesMetadataDocument,
    "\n  query HostedCollectives(\n    $hostSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $sort: OrderByInput\n    $hostFeesStructure: HostFeeStructure\n    $searchTerm: String\n    $type: [AccountType]\n    $isApproved: Boolean\n    $isFrozen: Boolean\n    $isUnhosted: Boolean\n    $balance: AmountRangeInput\n    $consolidatedBalance: AmountRangeInput\n    $currencies: [String]\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      type\n      settings\n      hostFeePercent\n      plan {\n        id\n        hostFees\n        hostFeeSharePercent\n      }\n      hostedAccounts(\n        limit: $limit\n        offset: $offset\n        searchTerm: $searchTerm\n        hostFeesStructure: $hostFeesStructure\n        accountType: $type\n        orderBy: $sort\n        isApproved: $isApproved\n        isFrozen: $isFrozen\n        isUnhosted: $isUnhosted\n        balance: $balance\n        consolidatedBalance: $consolidatedBalance\n        currencies: $currencies\n      ) {\n        offset\n        limit\n        totalCount\n        nodes {\n          id\n          ...HostedCollectiveFields\n        }\n      }\n    }\n  }\n\n  \n": types.HostedCollectivesDocument,
    "\n  query HostedCollectiveDetail($id: String!) {\n    account(id: $id) {\n      id\n      ...HostedCollectiveFields\n      transactions(limit: 10, offset: 0, kind: [ADDED_FUNDS, CONTRIBUTION, EXPENSE]) {\n        nodes {\n          id\n          clearedAt\n          createdAt\n          type\n          kind\n          description\n          isRefund\n          isRefunded\n          isInReview\n          isDisputed\n          isOrderRejected\n          amount {\n            valueInCents\n            currency\n          }\n          netAmount {\n            valueInCents\n            currency\n          }\n          oppositeAccount {\n            id\n            slug\n            name\n            imageUrl\n          }\n        }\n      }\n    }\n    activities(account: { id: $id }, limit: 5, offset: 0, type: [COLLECTIVE]) {\n      nodes {\n        id\n        type\n        createdAt\n        data\n        isSystem\n        account {\n          id\n          slug\n          name\n          imageUrl\n        }\n        fromAccount {\n          id\n          slug\n          name\n          imageUrl\n        }\n        individual {\n          id\n          slug\n          name\n          imageUrl\n        }\n        host {\n          id\n          name\n          slug\n          type\n        }\n      }\n    }\n  }\n\n  \n": types.HostedCollectiveDetailDocument,
    "\n  query AllCollectives(\n    $limit: Int!\n    $offset: Int!\n    $sort: OrderByInput\n    $searchTerm: String\n    $type: [AccountType]\n    $isHost: Boolean\n    $host: [AccountReferenceInput]\n    $isActive: Boolean\n    $consolidatedBalance: AmountRangeInput\n  ) {\n    accounts(\n      limit: $limit\n      offset: $offset\n      searchTerm: $searchTerm\n      type: $type\n      orderBy: $sort\n      isHost: $isHost\n      isActive: $isActive\n      host: $host\n      consolidatedBalance: $consolidatedBalance\n      skipGuests: false\n    ) {\n      offset\n      limit\n      totalCount\n      nodes {\n        id\n        ...HostedCollectiveFields\n      }\n    }\n  }\n\n  \n": types.AllCollectivesDocument,
    "\n  query DashboardContributionsMetadata(\n    $slug: String!\n    $filter: AccountOrdersFilter!\n    $onlyExpectedFunds: Boolean!\n    $expectedFundsFilter: ExpectedFundsFilter\n    $includeHostedAccounts: Boolean!\n    $includeChildrenAccounts: Boolean\n  ) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      currency\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          slug\n          name\n          ... on AccountWithContributions {\n            tiers {\n              nodes {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      ... on AccountWithContributions {\n        canStartResumeContributionsProcess\n        hasResumeContributionsProcessStarted\n        tiers {\n          nodes {\n            id\n            name\n          }\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          type\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          imageUrl\n          type\n          hostFeePercent\n        }\n      }\n\n      PENDING: orders(\n        filter: $filter\n        expectedFundsFilter: $expectedFundsFilter\n        status: [PENDING]\n        includeHostedAccounts: $includeHostedAccounts\n      ) @include(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      EXPIRED: orders(\n        filter: $filter\n        expectedFundsFilter: $expectedFundsFilter\n        status: [EXPIRED]\n        includeHostedAccounts: $includeHostedAccounts\n      ) @include(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      RECURRING: orders(\n        filter: $filter\n        frequency: [MONTHLY, YEARLY]\n        status: [ACTIVE, ERROR]\n        includeIncognito: true\n        includeHostedAccounts: $includeHostedAccounts\n        includeChildrenAccounts: $includeChildrenAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      PAID: orders(\n        filter: $filter\n        includeIncognito: true\n        status: [PAID]\n        includeHostedAccounts: $includeHostedAccounts\n        expectedFundsFilter: $expectedFundsFilter\n      ) @include(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      ONETIME: orders(\n        filter: $filter\n        frequency: [ONETIME]\n        status: [PAID, PROCESSING]\n        includeIncognito: true\n        minAmount: 1\n        includeHostedAccounts: $includeHostedAccounts\n        includeChildrenAccounts: $includeChildrenAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      CANCELED: orders(\n        filter: $filter\n        status: [CANCELLED]\n        includeIncognito: true\n        expectedFundsFilter: $expectedFundsFilter\n        includeHostedAccounts: $includeHostedAccounts\n        includeChildrenAccounts: $includeChildrenAccounts\n      ) {\n        totalCount\n      }\n      PAUSED: orders(\n        filter: $filter\n        status: [PAUSED]\n        includeIncognito: true\n        includeHostedAccounts: $includeHostedAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      PAUSED_RESUMABLE: orders(\n        filter: INCOMING\n        status: [PAUSED]\n        includeIncognito: true\n        includeHostedAccounts: false\n        includeChildrenAccounts: true\n        pausedBy: [COLLECTIVE, HOST, PLATFORM]\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      DISPUTED: orders(\n        filter: $filter\n        status: [DISPUTED]\n        includeIncognito: true\n        includeHostedAccounts: $includeHostedAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      IN_REVIEW: orders(\n        filter: $filter\n        status: [IN_REVIEW]\n        includeIncognito: true\n        includeHostedAccounts: $includeHostedAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n    }\n  }\n": types.DashboardContributionsMetadataDocument,
    "\n  query DashboardRecurringContributions(\n    $slug: String!\n    $searchTerm: String\n    $offset: Int\n    $limit: Int\n    $filter: AccountOrdersFilter!\n    $frequency: [ContributionFrequency]\n    $status: [OrderStatus!]\n    $includeIncognito: Boolean\n    $minAmount: Int\n    $maxAmount: Int\n    $paymentMethod: PaymentMethodReferenceInput\n    $includeHostedAccounts: Boolean!\n    $includeChildrenAccounts: Boolean\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $expectedDateFrom: DateTime\n    $expectedDateTo: DateTime\n    $chargedDateFrom: DateTime\n    $chargedDateTo: DateTime\n    $expectedFundsFilter: ExpectedFundsFilter\n    $orderBy: ChronologicalOrderInput\n    $tier: [TierReferenceInput!]\n  ) {\n    account(slug: $slug) {\n      id\n      orders(\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n        expectedDateFrom: $expectedDateFrom\n        expectedDateTo: $expectedDateTo\n        filter: $filter\n        frequency: $frequency\n        status: $status\n        includeIncognito: $includeIncognito\n        minAmount: $minAmount\n        maxAmount: $maxAmount\n        searchTerm: $searchTerm\n        offset: $offset\n        limit: $limit\n        paymentMethod: $paymentMethod\n        includeHostedAccounts: $includeHostedAccounts\n        includeChildrenAccounts: $includeChildrenAccounts\n        expectedFundsFilter: $expectedFundsFilter\n        orderBy: $orderBy\n        chargedDateFrom: $chargedDateFrom\n        chargedDateTo: $chargedDateTo\n        tier: $tier\n      ) {\n        totalCount\n        nodes {\n          id\n          ...ManagedOrderFields\n        }\n      }\n    }\n  }\n  \n": types.DashboardRecurringContributionsDocument,
    "\n      mutation ContributionsExpireOrder($orderId: Int) {\n        processPendingOrder(order: { legacyId: $orderId }, action: MARK_AS_EXPIRED) {\n          id\n          status\n          permissions {\n            id\n            canMarkAsPaid\n            canMarkAsExpired\n          }\n          activities {\n            nodes {\n              id\n            }\n          }\n        }\n      }\n    ": types.ContributionsExpireOrderDocument,
    "\n  query CreatePendingContributionModal($slug: String!) {\n    host(slug: $slug) {\n      id\n      legacyId\n      type\n      isHost\n      name\n      slug\n      currency\n      settings\n      hostFeePercent\n      orderAccountingCategories: accountingCategories(kind: [CONTRIBUTION, ADDED_FUNDS]) {\n        nodes {\n          id\n          name\n          friendlyName\n          code\n          kind\n          appliesTo\n        }\n      }\n      plan {\n        id\n        hostFees\n      }\n      policies {\n        id\n        REQUIRE_2FA_FOR_ADMINS\n      }\n      isTrustedHost\n      vendors {\n        totalCount\n        nodes {\n          id\n          ...VendorFields\n        }\n      }\n    }\n  }\n\n  \n": types.CreatePendingContributionModalDocument,
    "\n  query CreatePendingContributionCollective($slug: String!) {\n    account(slug: $slug) {\n      id\n      type\n      currency\n      childrenAccounts {\n        nodes {\n          id\n          type\n          legacyId\n          isHost\n          name\n          slug\n          currency\n          settings\n          imageUrl\n          ... on AccountWithContributions {\n            tiers {\n              nodes {\n                id\n                slug\n                legacyId\n                name\n              }\n            }\n          }\n        }\n      }\n      ... on AccountWithHost {\n        bankTransfersHostFeePercent: hostFeePercent(paymentMethodType: MANUAL)\n        host {\n          id\n          legacyId\n          vendors(forAccount: { slug: $slug }, limit: 5) {\n            nodes {\n              id\n              slug\n              name\n              type\n              description\n              imageUrl(height: 64)\n            }\n          }\n        }\n      }\n      ... on AccountWithContributions {\n        tiers {\n          nodes {\n            id\n            slug\n            legacyId\n            name\n          }\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n        }\n      }\n    }\n  }\n": types.CreatePendingContributionCollectiveDocument,
    "\n  mutation CreatePendingContribution($order: PendingOrderCreateInput!) {\n    createPendingOrder(order: $order) {\n      legacyId\n      id\n      status\n    }\n  }\n": types.CreatePendingContributionDocument,
    "\n  mutation EditPendingContribution($order: PendingOrderEditInput!) {\n    editPendingOrder(order: $order) {\n      legacyId\n      id\n      status\n      ...ConfirmContributionFields\n    }\n  }\n  \n": types.EditPendingContributionDocument,
    "\n  mutation StartResumeContributionsProcess($account: AccountReferenceInput!, $message: String) {\n    startResumeOrdersProcess(account: $account, message: $message) {\n      id\n      ... on AccountWithContributions {\n        canStartResumeContributionsProcess\n        hasResumeContributionsProcessStarted\n      }\n    }\n  }\n": types.StartResumeContributionsProcessDocument,
    "\n  query ExpensePipelineOverview($hostSlug: String!, $currency: Currency!) {\n    wiseReadyToPay: expenses(\n      host: { slug: $hostSlug }\n      limit: 0\n      status: READY_TO_PAY\n      payoutMethodType: BANK_ACCOUNT\n    ) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n    wiseScheduledForPayment: expenses(\n      host: { slug: $hostSlug }\n      limit: 0\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: BANK_ACCOUNT\n    ) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n    paypalReadyToPay: expenses(host: { slug: $hostSlug }, limit: 0, status: READY_TO_PAY, payoutMethodType: PAYPAL) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n    paypalScheduledForPayment: expenses(\n      host: { slug: $hostSlug }\n      limit: 0\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: PAYPAL\n    ) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n  }\n": types.ExpensePipelineOverviewDocument,
    "\n  query HostCreateExpenseModalPayeeSelect($hostId: String!, $forAccount: AccountReferenceInput) {\n    host(id: $hostId) {\n      id\n      slug\n      name\n      type\n      description\n      isHost\n      imageUrl(height: 64)\n      vendors(forAccount: $forAccount) {\n        nodes {\n          id\n          slug\n          name\n          type\n          description\n          imageUrl(height: 64)\n        }\n      }\n    }\n  }\n": types.HostCreateExpenseModalPayeeSelectDocument,
    "\n  mutation HostCreateExpense(\n    $expense: ExpenseCreateInput!\n    $account: AccountReferenceInput!\n    $transactionsImportRow: TransactionsImportRowReferenceInput\n  ) {\n    createExpense(expense: $expense, account: $account, transactionsImportRow: $transactionsImportRow) {\n      id\n      legacyId\n      account {\n        id\n        slug\n        name\n        type\n        imageUrl(height: 48)\n      }\n    }\n  }\n": types.HostCreateExpenseDocument,
    "\n  query ExpensesScheduledForPayment($hostSlug: String!) {\n    expenses(host: { slug: $hostSlug }, status: SCHEDULED_FOR_PAYMENT, payoutMethodType: BANK_ACCOUNT) {\n      totalCount\n      nodes {\n        id\n      }\n    }\n  }\n": types.ExpensesScheduledForPaymentDocument,
    "\n  query ScheduledExpensesBanner($hostSlug: String!, $limit: Int!, $payoutMethodType: PayoutMethodType) {\n    host(slug: $hostSlug) {\n      id\n      currency\n      transferwise {\n        id\n        amountBatched {\n          valueInCents\n          currency\n        }\n      }\n    }\n    expenses(\n      host: { slug: $hostSlug }\n      status: SCHEDULED_FOR_PAYMENT\n      limit: $limit\n      payoutMethodType: $payoutMethodType\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n      }\n    }\n  }\n": types.ScheduledExpensesBannerDocument,
    "\n  query AccountExpenses(\n    $account: AccountReferenceInput\n    $fromAccount: AccountReferenceInput\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: [ExpenseStatusFilter]\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $sort: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n    $createdByAccount: AccountReferenceInput\n    $includeChildrenExpenses: Boolean\n    $fetchHostForExpenses: Boolean!\n    $hasAmountInCreatedByAccountCurrency: Boolean!\n    $accountingCategory: [String]\n  ) {\n    expenses(\n      account: $account\n      fromAccount: $fromAccount\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $sort\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n      createdByAccount: $createdByAccount\n      includeChildrenExpenses: $includeChildrenExpenses\n      accountingCategory: $accountingCategory\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        amountInCreatedByAccountCurrency: amountV2(currencySource: CREATED_BY_ACCOUNT)\n          @include(if: $hasAmountInCreatedByAccountCurrency) {\n          value\n          valueInCents\n          currency\n          exchangeRate {\n            date\n            value\n            source\n            isApproximate\n            fromCurrency\n            toCurrency\n          }\n        }\n        host @include(if: $fetchHostForExpenses) {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n  }\n\n  \n  \n": types.AccountExpensesDocument,
    "\n  query AccountExpensesMetadata($accountSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      slug\n      name\n      imageUrl\n      type\n      currency\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          name\n          slug\n          imageUrl\n          currency\n          type\n          isActive\n          isArchived\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n      ... on Organization {\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n    expenseTagStats(account: { slug: $accountSlug }) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n  \n": types.AccountExpensesMetadataDocument,
    "\n  query HostDashboardExpenses(\n    $hostSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: [ExpenseStatusFilter]\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $sort: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n    $account: AccountReferenceInput\n    $lastCommentBy: [LastCommentBy]\n    $accountingCategory: [String]\n  ) {\n    expenses(\n      host: { slug: $hostSlug }\n      account: $account\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $sort\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n      lastCommentBy: $lastCommentBy\n      accountingCategory: $accountingCategory\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        ...ExpensesListAdminFieldsFragment\n      }\n    }\n    host(slug: $hostSlug) {\n      id\n      ...ExpenseHostFields\n    }\n  }\n  \n  \n  \n": types.HostDashboardExpensesDocument,
    "\n  fragment HostInfoCardFields on Host {\n    id\n    legacyId\n    slug\n    currency\n    location {\n      id\n      address\n      country\n    }\n    paypalPreApproval {\n      id\n      name\n      expiryDate\n      createdAt\n      balance {\n        currency\n        valueInCents\n      }\n    }\n    transferwise {\n      id\n      balances {\n        valueInCents\n        currency\n      }\n    }\n    stripe {\n      issuingBalance {\n        valueInCents\n        currency\n      }\n    }\n    stats {\n      id\n      balance {\n        valueInCents\n      }\n    }\n  }\n": types.HostInfoCardFieldsFragmentDoc,
    "\n  query HostDashboardMetadata($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      ...HostInfoCardFields\n      transferwise {\n        id\n        availableCurrencies\n        amountBatched {\n          valueInCents\n          currency\n        }\n      }\n    }\n    unreplied: expenses(\n      host: { slug: $hostSlug }\n      status: [APPROVED, ERROR, INCOMPLETE, ON_HOLD]\n      lastCommentBy: [NON_HOST_ADMIN]\n    ) {\n      totalCount\n    }\n    ready_to_pay: expenses(host: { slug: $hostSlug }, status: [READY_TO_PAY]) {\n      totalCount\n    }\n    scheduled_for_payment: expenses(host: { slug: $hostSlug }, status: [SCHEDULED_FOR_PAYMENT]) {\n      totalCount\n    }\n    on_hold: expenses(host: { slug: $hostSlug }, status: [ON_HOLD]) {\n      totalCount\n    }\n    incomplete: expenses(host: { slug: $hostSlug }, status: [INCOMPLETE]) {\n      totalCount\n    }\n    error: expenses(host: { slug: $hostSlug }, status: [ERROR]) {\n      totalCount\n    }\n\n    hostedAccounts: accounts(host: { slug: $hostSlug }, orderBy: { field: ACTIVITY, direction: DESC }) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n\n    expenseTags: expenseTagStats(host: { slug: $hostSlug }) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n\n  \n  \n": types.HostDashboardMetadataDocument,
    "\n      query HostExpensesReportList($accountSlug: String!, $timeUnit: TimeUnit, $dateFrom: DateTime, $dateTo: DateTime) {\n        host(slug: $accountSlug) {\n          hostExpensesReport(timeUnit: $timeUnit, dateFrom: $dateFrom, dateTo: $dateTo) {\n            timeUnit\n            dateFrom\n            dateTo\n            nodes {\n              date\n              isHost\n              amount {\n                currency\n                valueInCents\n              }\n              count\n            }\n          }\n        }\n      }\n    ": types.HostExpensesReportListDocument,
    "\n      query HostExpensesReport($accountSlug: String!, $timeUnit: TimeUnit, $dateFrom: DateTime, $dateTo: DateTime) {\n        host(slug: $accountSlug) {\n          createdAt\n          currency\n          hostExpensesReport(timeUnit: $timeUnit, dateFrom: $dateFrom, dateTo: $dateTo) {\n            timeUnit\n            dateFrom\n            dateTo\n            nodes {\n              date\n              isHost\n              amount {\n                currency\n                valueInCents\n              }\n              count\n              accountingCategory {\n                id\n                code\n                name\n                friendlyName\n              }\n            }\n          }\n        }\n      }\n    ": types.HostExpensesReportDocument,
    "\n  query HostTaxForms(\n    $hostSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $account: [AccountReferenceInput]\n    $status: [LegalDocumentRequestStatus]\n    $orderBy: ChronologicalOrderInput\n    $searchTerm: String\n    $requestedAtFrom: DateTime\n    $requestedAtTo: DateTime\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      taxForms: hostedLegalDocuments(\n        limit: $limit\n        offset: $offset\n        account: $account\n        type: US_TAX_FORM\n        status: $status\n        orderBy: $orderBy\n        searchTerm: $searchTerm\n        requestedAtFrom: $requestedAtFrom\n        requestedAtTo: $requestedAtTo\n      ) {\n        totalCount\n        nodes {\n          id\n          year\n          type\n          status\n          service\n          requestedAt\n          updatedAt\n          documentLink\n          isExpired\n          account {\n            id\n            name\n            slug\n            type\n            imageUrl(height: 128)\n          }\n        }\n      }\n    }\n  }\n": types.HostTaxFormsDocument,
    "\n  mutation EditLegalDocumentStatus(\n    $id: String!\n    $host: AccountReferenceInput!\n    $status: LegalDocumentRequestStatus!\n    $message: String\n  ) {\n    editLegalDocumentStatus(id: $id, status: $status, message: $message, host: $host) {\n      id\n      status\n    }\n  }\n": types.EditLegalDocumentStatusDocument,
    "\n  query LegalDocumentDrawer($hostId: String!, $accountId: String!) {\n    expenses(\n      limit: 5\n      fromAccount: { id: $accountId }\n      host: { id: $hostId }\n      orderBy: { field: CREATED_AT, direction: DESC }\n      types: [INVOICE, GRANT, UNCLASSIFIED]\n    ) {\n      totalCount\n      nodes {\n        id\n        legacyId\n        type\n        description\n        createdAt\n        amountV2 {\n          valueInCents\n          currency\n        }\n        account {\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n": types.LegalDocumentDrawerDocument,
    "\n  mutation UploadTaxForm($id: String!, $host: AccountReferenceInput!, $file: Upload!) {\n    editLegalDocumentStatus(id: $id, status: RECEIVED, host: $host, file: $file) {\n      id\n      status\n      documentLink\n      year\n      isExpired\n    }\n  }\n": types.UploadTaxFormDocument,
    "\n  query Timeline($slug: String!, $limit: Int, $dateTo: DateTime, $classes: [ActivityClassType!]) {\n    account(slug: $slug) {\n      id\n      feed(limit: $limit, dateTo: $dateTo, classes: $classes) {\n        id\n        createdAt\n        type\n        data\n        isSystem\n        fromAccount {\n          id\n          name\n          slug\n          type\n          isIncognito\n          ...AccountHoverCardFields\n\n          imageUrl\n          ... on Individual {\n            isGuest\n          }\n        }\n        host {\n          id\n          name\n          slug\n          type\n        }\n        account {\n          id\n          name\n          slug\n          type\n          isIncognito\n          ...AccountHoverCardFields\n          imageUrl\n          ... on Individual {\n            isGuest\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n              slug\n              name\n              type\n            }\n          }\n        }\n        expense {\n          id\n          legacyId\n          description\n          amountV2 {\n            valueInCents\n            currency\n          }\n          payee {\n            id\n            name\n            slug\n            imageUrl\n            ...AccountHoverCardFields\n          }\n          account {\n            id\n            name\n            type\n            slug\n            ...AccountHoverCardFields\n            ... on AccountWithParent {\n              parent {\n                id\n                slug\n              }\n            }\n          }\n        }\n        order {\n          id\n          legacyId\n          description\n          toAccount {\n            id\n            name\n            slug\n            ... on AccountWithParent {\n              parent {\n                id\n                slug\n              }\n            }\n          }\n        }\n        update {\n          id\n          legacyId\n          title\n          summary\n          slug\n        }\n        conversation {\n          id\n          title\n          summary\n          slug\n        }\n        individual {\n          id\n          slug\n          name\n          type\n          imageUrl\n          isIncognito\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n": types.TimelineDocument,
    "\n  query CollectiveBalance($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      imageUrl\n      slug\n      ...AccountHoverCardFields\n      type\n\n      stats {\n        id\n        balance {\n          currency\n          valueInCents\n        }\n      }\n\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          name\n          slug\n          imageUrl\n          isArchived\n          ...AccountHoverCardFields\n          ... on Event {\n            startsAt\n            endsAt\n          }\n          stats {\n            id\n            balance {\n              currency\n              valueInCents\n            }\n          }\n        }\n      }\n    }\n  }\n  \n": types.CollectiveBalanceDocument,
    "\n  query MetricsPerAccount(\n    $slug: String!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $compareFrom: DateTime\n    $compareTo: DateTime\n    $includeComparison: Boolean!\n    $includeBalance: Boolean!\n    $includeSpent: Boolean!\n    $includeReceived: Boolean!\n    $includeContributionsCount: Boolean!\n  ) {\n    account(slug: $slug) {\n      id\n      ...AccountMetrics\n\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          ...AccountMetrics\n        }\n      }\n    }\n  }\n  fragment AccountMetrics on Account {\n    ...AccountHoverCardFields\n    balance: stats @include(if: $includeBalance) {\n      id\n      current: balance(dateTo: $dateTo) {\n        currency\n        valueInCents\n      }\n      comparison: balance(dateTo: $compareTo) @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n    }\n    spent: stats @include(if: $includeSpent) {\n      id\n      current: totalAmountSpent(dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n        currency\n        valueInCents\n      }\n      comparison: totalAmountSpent(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n        @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n    }\n    received: stats @include(if: $includeReceived) {\n      id\n      current: totalAmountReceived(dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n        currency\n        valueInCents\n      }\n      comparison: totalAmountReceived(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n        @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n    }\n\n    contributions: stats @include(if: $includeContributionsCount) {\n      id\n      current: contributionsCount(dateFrom: $dateFrom, dateTo: $dateTo)\n      comparison: contributionsCount(dateFrom: $compareFrom, dateTo: $compareTo) @include(if: $includeComparison)\n    }\n  }\n  \n": types.MetricsPerAccountDocument,
    "\n  query OverviewMetrics(\n    $slug: String!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $compareFrom: DateTime\n    $compareTo: DateTime\n    $includeComparison: Boolean!\n    $includeChildren: Boolean\n    $includeBalance: Boolean!\n    $includeBalanceTimeseries: Boolean!\n    $includeSpent: Boolean!\n    $includeReceived: Boolean!\n    $includeReceivedTimeseries: Boolean!\n    $includeContributionsCount: Boolean!\n    $timeUnit: TimeUnit\n  ) {\n    account(slug: $slug) {\n      id\n      isActive\n      ...AccountHoverCardFields\n      balance: stats @include(if: $includeBalance) {\n        id\n        current: balance(includeChildren: $includeChildren, dateTo: $dateTo) {\n          currency\n          valueInCents\n        }\n        comparison: balance(includeChildren: $includeChildren, dateTo: $compareTo) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      balanceTimeseries: stats @include(if: $includeBalanceTimeseries) {\n        id\n        current: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n      spent: stats @include(if: $includeSpent) {\n        id\n        current: totalAmountSpent(includeChildren: $includeChildren, dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountSpent(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      received: stats @include(if: $includeReceived) {\n        id\n        current: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          net: true\n        ) @include(if: $includeReceived) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      receivedTimeseries: stats @include(if: $includeReceivedTimeseries) {\n        id\n        current: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n          net: true\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n          net: true\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n\n      contributionsCount: stats @include(if: $includeContributionsCount) {\n        id\n        current: contributionsCount(includeChildren: $includeChildren, dateFrom: $dateFrom, dateTo: $dateTo)\n        comparison: contributionsCount(includeChildren: $includeChildren, dateFrom: $compareFrom, dateTo: $compareTo)\n          @include(if: $includeComparison)\n      }\n    }\n  }\n  \n": types.OverviewMetricsDocument,
    "\n  query HostReportsPage(\n    $hostSlug: String!\n    $account: [AccountReferenceInput!]\n    $dateFrom: DateTime\n    $dateTo: DateTime\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      isActive\n      type\n      createdAt\n      hostFeePercent\n      isTrustedHost\n      settings\n      stats {\n        id\n        balance(dateTo: $dateTo) {\n          valueInCents\n          currency\n        }\n      }\n      contributionStats(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        contributionsCount\n        oneTimeContributionsCount\n        recurringContributionsCount\n        dailyAverageIncomeAmount {\n          valueInCents\n        }\n      }\n      expenseStats(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        expensesCount\n        dailyAverageAmount {\n          valueInCents\n        }\n        invoicesCount\n        reimbursementsCount\n        grantsCount\n      }\n      hostMetrics(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        hostFees {\n          valueInCents\n          currency\n        }\n        hostFeeShare {\n          valueInCents\n          currency\n        }\n        platformTips {\n          valueInCents\n          currency\n        }\n        pendingPlatformTips {\n          valueInCents\n          currency\n        }\n        totalMoneyManaged {\n          valueInCents\n          currency\n        }\n      }\n      hostMetricsTimeSeries(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        timeUnit\n        totalReceived {\n          timeUnit\n          nodes {\n            date\n            kind\n            amount {\n              value\n            }\n          }\n        }\n        totalSpent {\n          timeUnit\n          nodes {\n            date\n            kind\n            amount {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n": types.HostReportsPageDocument,
    "\n  query HostReports(\n    $hostSlug: String!\n    $dateTo: DateTime\n    $dateFrom: DateTime\n    $timeUnit: TimeUnit\n    $includeGroups: Boolean!\n  ) {\n    host(slug: $hostSlug) {\n      id\n      currency\n      hostTransactionsReports(dateFrom: $dateFrom, dateTo: $dateTo, timeUnit: $timeUnit) {\n        timeUnit\n        nodes {\n          date\n          managedFunds {\n            startingBalance {\n              valueInCents\n              currency\n            }\n            endingBalance {\n              valueInCents\n              currency\n            }\n            totalChange {\n              valueInCents\n              currency\n            }\n            groups @include(if: $includeGroups) {\n              amount {\n                valueInCents\n                currency\n              }\n              netAmount {\n                valueInCents\n                currency\n              }\n              platformFee {\n                valueInCents\n                currency\n              }\n              paymentProcessorFee {\n                valueInCents\n                currency\n              }\n              hostFee {\n                valueInCents\n                currency\n              }\n              taxAmount {\n                valueInCents\n                currency\n              }\n              kind\n              isHost\n              type\n              expenseType\n              isRefund\n            }\n          }\n          operationalFunds {\n            startingBalance {\n              valueInCents\n              currency\n            }\n            endingBalance {\n              valueInCents\n              currency\n            }\n            totalChange {\n              valueInCents\n              currency\n            }\n            groups @include(if: $includeGroups) {\n              amount {\n                valueInCents\n                currency\n              }\n              netAmount {\n                valueInCents\n                currency\n              }\n              platformFee {\n                valueInCents\n                currency\n              }\n              paymentProcessorFee {\n                valueInCents\n                currency\n              }\n              hostFee {\n                valueInCents\n                currency\n              }\n              taxAmount {\n                valueInCents\n                currency\n              }\n              kind\n              isHost\n              type\n              expenseType\n              isRefund\n            }\n          }\n        }\n      }\n    }\n  }\n": types.HostReportsDocument,
    "\n  query AccountReports(\n    $accountSlug: String!\n    $dateTo: DateTime\n    $dateFrom: DateTime\n    $timeUnit: TimeUnit\n    $includeGroups: Boolean!\n  ) {\n    account(slug: $accountSlug) {\n      id\n      currency\n      transactionReports(dateFrom: $dateFrom, dateTo: $dateTo, timeUnit: $timeUnit) {\n        timeUnit\n        nodes {\n          date\n          startingBalance {\n            valueInCents\n            currency\n          }\n          endingBalance {\n            valueInCents\n            currency\n          }\n          totalChange {\n            valueInCents\n            currency\n          }\n          groups @include(if: $includeGroups) {\n            amount {\n              valueInCents\n              currency\n            }\n            netAmount {\n              valueInCents\n              currency\n            }\n            platformFee {\n              valueInCents\n              currency\n            }\n            paymentProcessorFee {\n              valueInCents\n              currency\n            }\n            hostFee {\n              valueInCents\n              currency\n            }\n            taxAmount {\n              valueInCents\n              currency\n            }\n            kind\n            isHost\n            type\n            expenseType\n            isRefund\n          }\n        }\n      }\n    }\n  }\n": types.AccountReportsDocument,
    "\n  mutation SubmitLegalDocument($account: AccountReferenceInput!, $type: LegalDocumentType!, $formData: JSON!) {\n    submitLegalDocument(account: $account, type: $type, formData: $formData) {\n      id\n      type\n      status\n      isExpired\n    }\n  }\n": types.SubmitLegalDocumentDocument,
    "\n  query AccountTaxInformation($id: String!) {\n    account(id: $id) {\n      id\n      slug\n      name\n      legalName\n      type\n      usTaxForms: legalDocuments(type: US_TAX_FORM) {\n        id\n        year\n        status\n        updatedAt\n        service\n        type\n        documentLink\n        isExpired\n      }\n      location {\n        address\n        country\n        structured\n      }\n    }\n  }\n": types.AccountTaxInformationDocument,
    "\n  query SuggestContributionMatch(\n    $hostId: String!\n    $searchTerm: String\n    $offset: Int\n    $limit: Int\n    $frequency: [ContributionFrequency]\n    $status: [OrderStatus!]\n    $onlySubscriptions: Boolean\n    $minAmount: Int\n    $maxAmount: Int\n    $paymentMethod: PaymentMethodReferenceInput\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $expectedDateFrom: DateTime\n    $expectedDateTo: DateTime\n    $expectedFundsFilter: ExpectedFundsFilter\n  ) {\n    account(id: $hostId) {\n      id\n      orders(\n        filter: INCOMING\n        includeIncognito: true\n        includeHostedAccounts: true\n        status: $status\n        frequency: $frequency\n        onlySubscriptions: $onlySubscriptions\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n        expectedDateFrom: $expectedDateFrom\n        expectedDateTo: $expectedDateTo\n        minAmount: $minAmount\n        maxAmount: $maxAmount\n        searchTerm: $searchTerm\n        offset: $offset\n        limit: $limit\n        paymentMethod: $paymentMethod\n        expectedFundsFilter: $expectedFundsFilter\n      ) {\n        totalCount\n        offset\n        limit\n        nodes {\n          id\n          legacyId\n          totalAmount {\n            value\n            valueInCents\n            currency\n          }\n          platformTipAmount {\n            value\n            valueInCents\n          }\n          pendingContributionData {\n            expectedAt\n            paymentMethod\n            ponumber\n            memo\n            fromAccountInfo {\n              name\n              email\n            }\n          }\n          status\n          description\n          createdAt\n          processedAt\n          tier {\n            id\n            name\n          }\n          paymentMethod {\n            id\n            service\n            type\n          }\n          fromAccount {\n            id\n            name\n            legalName\n            slug\n            isIncognito\n            type\n            ...AccountHoverCardFields\n            ... on Individual {\n              isGuest\n            }\n          }\n          toAccount {\n            id\n            slug\n            name\n            legalName\n            type\n            imageUrl\n            ...AccountHoverCardFields\n          }\n          ...ConfirmContributionFields\n        }\n      }\n    }\n  }\n  \n  \n": types.SuggestContributionMatchDocument,
    "\n  query SuggestExpenseMatch(\n    $hostId: String!\n    $searchTerm: String\n    $offset: Int\n    $limit: Int\n    $status: [ExpenseStatusFilter!]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $payoutMethodType: PayoutMethodType\n  ) {\n    expenses(\n      host: { id: $hostId }\n      status: $status\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      searchTerm: $searchTerm\n      offset: $offset\n      limit: $limit\n      payoutMethodType: $payoutMethodType\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        legacyId\n        amountV2 {\n          value\n          valueInCents\n          currency\n        }\n        status\n        description\n        createdAt\n        payoutMethod {\n          id\n          type\n        }\n        items {\n          id\n          description\n          amountV2 {\n            valueInCents\n            currency\n          }\n        }\n        payee {\n          id\n          name\n          slug\n          type\n          imageUrl\n          ...AccountHoverCardFields\n        }\n        account {\n          id\n          slug\n          name\n          type\n          imageUrl\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n": types.SuggestExpenseMatchDocument,
    "\n      query HostTransactionsImportsSources($accountSlug: String!) {\n        host(slug: $accountSlug) {\n          id\n          transactionsImportsSources\n        }\n      }\n    ": types.HostTransactionsImportsSourcesDocument,
    "\n      mutation CreateTransactionsImport(\n        $account: AccountReferenceInput!\n        $type: TransactionsImportType!\n        $source: NonEmptyString!\n        $name: NonEmptyString!\n      ) {\n        createTransactionsImport(account: $account, source: $source, name: $name, type: $type) {\n          id\n          account {\n            id\n            ... on Host {\n              id\n              transactionsImportsSources\n            }\n            ... on Organization {\n              host {\n                id\n                transactionsImportsSources\n              }\n            }\n          }\n          ...TransactionImportListFields\n        }\n      }\n      \n    ": types.CreateTransactionsImportDocument,
    "\n  mutation UploadTransactionsImport(\n    $importId: NonEmptyString!\n    $csvConfig: JSONObject\n    $data: [TransactionsImportRowCreateInput!]!\n    $file: Upload\n  ) {\n    importTransactions(id: $importId, csvConfig: $csvConfig, data: $data, file: $file) {\n      id\n      csvConfig\n      lastSyncAt\n      file {\n        id\n        url\n        name\n        type\n        size\n      }\n    }\n  }\n": types.UploadTransactionsImportDocument,
    "\n  mutation SyncPlaidAccount($connectedAccount: ConnectedAccountReferenceInput!) {\n    syncPlaidAccount(connectedAccount: $connectedAccount) {\n      id\n    }\n  }\n": types.SyncPlaidAccountDocument,
    "\n  fragment TransactionsImportHostFields on Host {\n    id\n    name\n    legalName\n    imageUrl\n    legacyId\n    slug\n    currency\n    type\n\n    accountingCategories {\n      totalCount\n      nodes {\n        id\n        ...AccountingCategoryFields\n      }\n    }\n  }\n  \n": types.TransactionsImportHostFieldsFragmentDoc,
    "\n  query TransactionsImport(\n    $importId: String!\n    $limit: Int = 50\n    $offset: Int = 0\n    $status: TransactionsImportRowStatus\n    $searchTerm: String\n  ) {\n    transactionsImport(id: $importId) {\n      id\n      source\n      name\n      lastSyncAt\n      isSyncing\n      lastSyncCursor\n      file {\n        id\n        url\n        name\n        type\n        size\n      }\n      stats {\n        ...TransactionsImportStats\n      }\n      type\n      csvConfig\n      createdAt\n      updatedAt\n      connectedAccount {\n        id\n      }\n      account {\n        id\n        legacyId\n        slug\n        currency\n        ... on AccountWithHost {\n          host {\n            ...TransactionsImportHostFields\n          }\n        }\n        ... on Organization {\n          host {\n            ...TransactionsImportHostFields\n          }\n        }\n      }\n      rows(limit: $limit, offset: $offset, status: $status, searchTerm: $searchTerm) {\n        totalCount\n        offset\n        limit\n        nodes {\n          ...TransactionsImportRowFields\n        }\n      }\n    }\n  }\n  \n  \n  \n": types.TransactionsImportDocument,
    "\n  query TransactionsImportLastSyncAt($importId: String!) {\n    transactionsImport(id: $importId) {\n      id\n      lastSyncAt\n      isSyncing\n      lastSyncCursor\n    }\n  }\n": types.TransactionsImportLastSyncAtDocument,
    "\n  mutation DeleteTransactionsImport($id: NonEmptyString!) {\n    deleteTransactionsImport(id: $id)\n  }\n": types.DeleteTransactionsImportDocument,
    "\n  mutation EditTransactionsImport($id: NonEmptyString!, $source: NonEmptyString, $name: NonEmptyString) {\n    editTransactionsImport(id: $id, source: $source, name: $name) {\n      id\n      source\n      name\n    }\n  }\n": types.EditTransactionsImportDocument,
    "\n  mutation DeleteConnectedAccount($connectedAccount: ConnectedAccountReferenceInput!) {\n    deleteConnectedAccount(connectedAccount: $connectedAccount) {\n      id\n    }\n  }\n": types.DeleteConnectedAccountDocument,
    "\n  fragment TransactionImportListFields on TransactionsImport {\n    id\n    source\n    name\n    type\n    createdAt\n    updatedAt\n    lastSyncAt\n    stats {\n      total\n      ignored\n      expenses\n      orders\n      processed\n    }\n    account {\n      ... on Host {\n        id\n        transactionsImportsSources\n      }\n    }\n  }\n": types.TransactionImportListFieldsFragmentDoc,
    "\n  fragment TransactionsImportRowFields on TransactionsImportRow {\n    id\n    sourceId\n    status\n    description\n    date\n    rawValue\n    note\n    amount {\n      valueInCents\n      currency\n    }\n    expense {\n      id\n      legacyId\n      account {\n        id\n        slug\n        name\n        type\n        imageUrl(height: 48)\n      }\n    }\n    order {\n      id\n      legacyId\n      toAccount {\n        id\n        slug\n        name\n        type\n        imageUrl(height: 48)\n      }\n    }\n  }\n": types.TransactionsImportRowFieldsFragmentDoc,
    "\n  fragment TransactionsImportStats on TransactionsImportStats {\n    total\n    ignored\n    onHold\n    expenses\n    orders\n    processed\n    pending\n  }\n": types.TransactionsImportStatsFragmentDoc,
    "\n  mutation UpdateTransactionsImportRow(\n    $importId: NonEmptyString!\n    $rows: [TransactionsImportRowUpdateInput!]\n    $action: TransactionsImportRowAction!\n  ) {\n    updateTransactionsImportRows(id: $importId, rows: $rows, action: $action) {\n      import {\n        id\n        stats {\n          ...TransactionsImportStats\n        }\n      }\n      rows {\n        id\n        ...TransactionsImportRowFields\n      }\n    }\n  }\n  \n  \n": types.UpdateTransactionsImportRowDocument,
    "\n  query HostTransactionImports($accountSlug: String!, $limit: Int, $offset: Int) {\n    host(slug: $accountSlug) {\n      id\n      transactionsImports(limit: $limit, offset: $offset) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          ...TransactionImportListFields\n        }\n      }\n    }\n  }\n  \n": types.HostTransactionImportsDocument,
    "\n  query AccountTransactionsMetaData($slug: String!) {\n    transactions(account: { slug: $slug }, limit: 0) {\n      paymentMethodTypes\n      kinds\n    }\n    account(slug: $slug) {\n      id\n      name\n      legacyId\n      slug\n      currency\n      settings\n    }\n  }\n": types.AccountTransactionsMetaDataDocument,
    "\n  query HostTransactionsMetaData($slug: String!) {\n    transactions(host: { slug: $slug }, limit: 0) {\n      paymentMethodTypes\n      kinds\n    }\n    host(slug: $slug) {\n      id\n      name\n      legacyId\n      slug\n      currency\n      settings\n      accountingCategories {\n        nodes {\n          id\n          code\n          name\n          kind\n          appliesTo\n        }\n      }\n    }\n  }\n": types.HostTransactionsMetaDataDocument,
    "\n  query TransactionDetails($transaction: TransactionReferenceInput!) {\n    transaction(transaction: $transaction) {\n      id\n      legacyId\n      group\n      amount {\n        valueInCents\n        currency\n      }\n      paymentProcessorFee(fetchPaymentProcessorFee: true) {\n        valueInCents\n        currency\n      }\n      hostFee {\n        valueInCents\n        currency\n      }\n      netAmount {\n        valueInCents\n        currency\n      }\n      taxAmount(fetchTax: true) {\n        valueInCents\n        currency\n      }\n      oppositeTransaction {\n        id\n        legacyId\n      }\n      paymentMethod {\n        id\n        type\n        service\n      }\n      type\n      kind\n      description\n      createdAt\n      clearedAt\n      isRefunded\n      isRefund\n      isInReview\n      isDisputed\n      isOrderRejected\n      merchantId\n      account {\n        id\n        name\n        slug\n        isIncognito\n        description\n        type\n        ... on AccountWithHost {\n          host {\n            id\n            name\n            slug\n          }\n          approvedAt\n        }\n        ... on AccountWithParent {\n          parent {\n            id\n            name\n            slug\n          }\n        }\n        ...AccountHoverCardFields\n      }\n      fromAccount {\n        id\n        ... on AccountWithParent {\n          parent {\n            id\n          }\n        }\n      }\n      toAccount {\n        id\n        ... on AccountWithHost {\n          host {\n            id\n          }\n        }\n      }\n      oppositeAccount {\n        id\n        name\n        slug\n        imageUrl\n        type\n        ...AccountHoverCardFields\n      }\n\n      permissions {\n        id\n        canRefund\n        canDownloadInvoice\n        canReject\n      }\n      order {\n        id\n        legacyId\n        status\n        description\n        processedAt\n        createdAt\n        amount {\n          valueInCents\n          currency\n        }\n        toAccount {\n          id\n          slug\n        }\n        fromAccount {\n          id\n          slug\n        }\n        accountingCategory {\n          id\n          code\n          name\n          friendlyName\n        }\n      }\n      expense {\n        id\n        status\n        tags\n        type\n        feesPayer\n        amount\n        currency\n        description\n        legacyId\n        # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n        comments(limit: 1) {\n          totalCount\n        }\n        payoutMethod {\n          id\n          type\n        }\n        account {\n          id\n          slug\n        }\n        createdByAccount {\n          id\n          slug\n        }\n        permissions {\n          id\n        }\n        createdAt\n        payee {\n          id\n          slug\n          imageUrl\n        }\n        accountingCategory {\n          id\n          code\n          name\n          friendlyName\n        }\n        host {\n          id\n          slug\n        }\n      }\n      refundTransaction {\n        id\n        group\n        createdAt\n      }\n    }\n  }\n  \n": types.TransactionDetailsDocument,
    "\n  mutation RejectTransaction($transaction: TransactionReferenceInput!, $message: String) {\n    rejectTransaction(transaction: $transaction, message: $message) {\n      id\n      order {\n        id\n        status\n        activities {\n          nodes {\n            id\n            type\n            createdAt\n          }\n        }\n        transactions {\n          id\n          createdAt\n        }\n      }\n    }\n  }\n": types.RejectTransactionDocument,
    "\n  mutation RefundTransaction($transaction: TransactionReferenceInput!, $ignoreBalanceCheck: Boolean) {\n    refundTransaction(transaction: $transaction, ignoreBalanceCheck: $ignoreBalanceCheck) {\n      id\n      order {\n        id\n        status\n        activities {\n          nodes {\n            id\n            type\n            createdAt\n          }\n        }\n        transactions {\n          id\n          createdAt\n        }\n      }\n      expense {\n        id\n        status\n      }\n    }\n  }\n": types.RefundTransactionDocument,
    "\n  fragment TransactionsTableQueryCollectionFragment on TransactionCollection {\n    totalCount\n    offset\n    limit\n    nodes {\n      id\n      legacyId\n      uuid\n      kind\n      amount {\n        currency\n        valueInCents\n      }\n      netAmount {\n        currency\n        valueInCents\n      }\n      group\n      type\n      description\n      createdAt\n      clearedAt\n      isRefunded\n      isRefund\n      isOrderRejected\n      isInReview\n      isDisputed\n      refundTransaction {\n        id\n        group\n      }\n      host {\n        id\n        slug\n        legacyId\n        type\n      }\n      account {\n        id\n        name\n        slug\n        isIncognito\n        imageUrl\n        type\n        ...AccountHoverCardFields\n      }\n      oppositeAccount {\n        id\n        name\n        slug\n        isIncognito\n        imageUrl\n        type\n        ...AccountHoverCardFields\n      }\n      toAccount {\n        id\n        slug\n      }\n      expense {\n        id\n        type\n      }\n      permissions {\n        id\n        canRefund\n        canDownloadInvoice\n        canReject\n      }\n    }\n  }\n  \n": types.TransactionsTableQueryCollectionFragmentFragmentDoc,
    "\n  query TransactionsTable(\n    $hostAccount: AccountReferenceInput\n    $account: [AccountReferenceInput!]\n    $excludeAccount: [AccountReferenceInput!]\n    $limit: Int!\n    $offset: Int!\n    $type: TransactionType\n    $paymentMethodType: [PaymentMethodType]\n    $paymentMethodService: [PaymentMethodService]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $clearedFrom: DateTime\n    $clearedTo: DateTime\n    $searchTerm: String\n    $kind: [TransactionKind]\n    $includeIncognitoTransactions: Boolean\n    $includeGiftCardTransactions: Boolean\n    $includeChildrenTransactions: Boolean\n    $virtualCard: [VirtualCardReferenceInput]\n    $sort: ChronologicalOrderInput\n    $group: [String]\n    $includeHost: Boolean\n    $expenseType: [ExpenseType]\n    $expense: ExpenseReferenceInput\n    $order: OrderReferenceInput\n    $isRefund: Boolean\n    $hasDebt: Boolean\n    $merchantId: [String]\n    $accountingCategory: [String]\n  ) {\n    transactions(\n      host: $hostAccount\n      account: $account\n      excludeAccount: $excludeAccount\n      limit: $limit\n      offset: $offset\n      type: $type\n      paymentMethodType: $paymentMethodType\n      paymentMethodService: $paymentMethodService\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      clearedFrom: $clearedFrom\n      clearedTo: $clearedTo\n      searchTerm: $searchTerm\n      kind: $kind\n      includeIncognitoTransactions: $includeIncognitoTransactions\n      includeGiftCardTransactions: $includeGiftCardTransactions\n      includeChildrenTransactions: $includeChildrenTransactions\n      includeDebts: true\n      virtualCard: $virtualCard\n      orderBy: $sort\n      group: $group\n      includeHost: $includeHost\n      expenseType: $expenseType\n      expense: $expense\n      order: $order\n      isRefund: $isRefund\n      hasDebt: $hasDebt\n      merchantId: $merchantId\n      accountingCategory: $accountingCategory\n    ) {\n      ...TransactionsTableQueryCollectionFragment\n    }\n  }\n  \n": types.TransactionsTableDocument,
    "\n  mutation DashboardDeleteUpdate($id: String!) {\n    deleteUpdate(id: $id) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n": types.DashboardDeleteUpdateDocument,
    "\n  mutation DashboardPublishUpdate($id: String!, $notificationAudience: UpdateAudience) {\n    publishUpdate(id: $id, notificationAudience: $notificationAudience) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n": types.DashboardPublishUpdateDocument,
    "\n  mutation DashboardUnpublishUpdate($id: String!) {\n    unpublishUpdate(id: $id) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n": types.DashboardUnpublishUpdateDocument,
    "\n  mutation DashboardCreateUpdate($update: UpdateCreateInput!) {\n    createUpdate(update: $update) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n": types.DashboardCreateUpdateDocument,
    "\n  mutation DashboardEditUpdate($update: UpdateUpdateInput!) {\n    editUpdate(update: $update) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n": types.DashboardEditUpdateDocument,
    "\n  query UpdateDashboardAudience($id: String!, $audience: UpdateAudience) {\n    update(id: $id) {\n      id\n      userCanPublishUpdate\n      publishedAt\n      isPrivate\n      makePublicOn\n      audienceStats(audience: $audience) {\n        id\n        total\n        hosted\n        individuals\n        organizations\n        collectives\n        coreContributors\n      }\n      account {\n        id\n        isHost\n      }\n    }\n  }\n": types.UpdateDashboardAudienceDocument,
    "\n  fragment UpdateFields on Update {\n    id\n    title\n    slug\n    isPrivate\n    isChangelog\n    createdAt\n    publishedAt\n    updatedAt\n    makePublicOn\n    notificationAudience\n    userCanSeeUpdate\n    summary\n    tags\n    fromAccount {\n      id\n      slug\n      name\n      imageUrl\n      type\n    }\n    account {\n      id\n      slug\n      name\n      imageUrl\n      type\n    }\n    reactions\n    userReactions\n  }\n": types.UpdateFieldsFragmentDoc,
    "\n  query UpdatesDashboard(\n    $slug: String\n    $limit: Int\n    $offset: Int\n    $isDraft: Boolean\n    $onlyPublishedUpdates: Boolean\n    $searchTerm: String\n  ) {\n    account(slug: $slug) {\n      id\n      updates(\n        limit: $limit\n        offset: $offset\n        isDraft: $isDraft\n        onlyPublishedUpdates: $onlyPublishedUpdates\n        searchTerm: $searchTerm\n      ) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          ...UpdateFields\n          comments(limit: 10) {\n            totalCount\n            nodes {\n              id\n              createdAt\n              fromAccount {\n                id\n                slug\n                name\n                imageUrl\n                type\n              }\n              reactions\n              userReactions\n              html\n            }\n          }\n        }\n      }\n    }\n  }\n  \n": types.UpdatesDashboardDocument,
    "\n  query UpdatesDashboardMetadata($slug: String) {\n    account(slug: $slug) {\n      id\n      PUBLISHED: updates(onlyPublishedUpdates: true) {\n        totalCount\n      }\n      DRAFTS: updates(isDraft: true) {\n        totalCount\n      }\n    }\n  }\n": types.UpdatesDashboardMetadataDocument,
    "\n  query UpdateView($id: String!, $commentOffset: Int) {\n    update(id: $id) {\n      id\n      html\n      ...UpdateFields\n      comments(limit: 20, offset: $commentOffset) {\n        totalCount\n        nodes {\n          id\n          createdAt\n          fromAccount {\n            id\n            slug\n            name\n            imageUrl\n            type\n          }\n          reactions\n          userReactions\n          html\n        }\n      }\n    }\n  }\n  \n": types.UpdateViewDocument,
    "\n  query AccountVirtualCards(\n    $slug: String\n    $limit: Int!\n    $offset: Int!\n    $status: [VirtualCardStatus]\n    $merchantAccount: AccountReferenceInput\n    $dateFrom: DateTime\n    $dateTo: DateTime\n  ) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      type\n      name\n      imageUrl\n      currency\n      ... on AccountWithHost {\n        isApproved\n        host {\n          legacyId\n          slug\n          id\n          type\n          name\n          imageUrl\n          settings\n          currency\n        }\n      }\n      virtualCards(\n        limit: $limit\n        offset: $offset\n        status: $status\n        merchantAccount: $merchantAccount\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n      ) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          name\n          last4\n          data\n          currency\n          provider\n          privateData\n          createdAt\n          spendingLimitAmount\n          spendingLimitInterval\n          spendingLimitRenewsOn\n          remainingLimit\n          account {\n            id\n            slug\n            name\n            imageUrl\n          }\n          assignee {\n            id\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n      virtualCardMerchants {\n        nodes {\n          id\n          type\n          slug\n          name\n          currency\n          location {\n            id\n            address\n            country\n          }\n          imageUrl(height: 64)\n        }\n      }\n    }\n  }\n": types.AccountVirtualCardsDocument,
    "\n  mutation EditVirtualCard(\n    $virtualCard: VirtualCardReferenceInput!\n    $name: String!\n    $limitAmount: AmountInput\n    $limitInterval: VirtualCardLimitInterval\n    $assignee: AccountReferenceInput!\n  ) {\n    editVirtualCard(\n      virtualCard: $virtualCard\n      name: $name\n      limitAmount: $limitAmount\n      limitInterval: $limitInterval\n      assignee: $assignee\n    ) {\n      id\n      name\n      spendingLimitAmount\n      spendingLimitInterval\n      assignee {\n        id\n        name\n        slug\n        imageUrl\n      }\n    }\n  }\n": types.EditVirtualCardDocument,
    "\n  mutation CreateVirtualCard(\n    $name: String!\n    $limitAmount: AmountInput!\n    $limitInterval: VirtualCardLimitInterval!\n    $account: AccountReferenceInput!\n    $assignee: AccountReferenceInput!\n    $virtualCardRequest: VirtualCardRequestReferenceInput\n  ) {\n    createVirtualCard(\n      name: $name\n      limitAmount: $limitAmount\n      limitInterval: $limitInterval\n      account: $account\n      assignee: $assignee\n      virtualCardRequest: $virtualCardRequest\n    ) {\n      id\n      name\n      last4\n      data\n      virtualCardRequest {\n        id\n        status\n      }\n    }\n  }\n": types.CreateVirtualCardDocument,
    "\n  query CollectiveMembers($slug: String!) {\n    account(slug: $slug) {\n      id\n      members(role: ADMIN) {\n        nodes {\n          id\n          account {\n            id\n            name\n            imageUrl\n            slug\n          }\n        }\n      }\n    }\n  }\n": types.CollectiveMembersDocument,
    "\n  query VirtualCardsAssignedToCollective($hostSlug: String!, $collectiveSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      allCards: hostedVirtualCards(collectiveAccountIds: [{ slug: $collectiveSlug }], status: [ACTIVE, INACTIVE]) {\n        totalCount\n      }\n      cardsMissingReceipts: hostedVirtualCards(\n        collectiveAccountIds: [{ slug: $collectiveSlug }]\n        status: [ACTIVE, INACTIVE]\n        hasMissingReceipts: true\n      ) {\n        totalCount\n      }\n    }\n  }\n": types.VirtualCardsAssignedToCollectiveDocument,
    "\n  query VirtualCardPolicies($slug: String) {\n    account(slug: $slug) {\n      id\n      policies {\n        id\n        MAXIMUM_VIRTUAL_CARD_LIMIT_AMOUNT_FOR_INTERVAL {\n          ALL_TIME {\n            valueInCents\n          }\n          DAILY {\n            valueInCents\n          }\n          MONTHLY {\n            valueInCents\n          }\n          PER_AUTHORIZATION {\n            valueInCents\n          }\n          WEEKLY {\n            valueInCents\n          }\n          YEARLY {\n            valueInCents\n          }\n        }\n      }\n    }\n  }\n": types.VirtualCardPoliciesDocument,
    "\n  mutation LeaveHost($account: AccountReferenceInput!, $pauseContributions: Boolean!, $messageForContributors: String) {\n    removeHost(\n      account: $account\n      pauseContributions: $pauseContributions\n      messageForContributors: $messageForContributors\n    ) {\n      id\n      ... on AccountWithHost {\n        host {\n          id\n        }\n      }\n    }\n  }\n": types.LeaveHostDocument,
    "\n  query AccountInfoForLeaveHost($slug: String) {\n    account(slug: $slug, throwIfMissing: true) {\n      id\n      type\n      currency\n      name\n      stats {\n        activeRecurringContributionsBreakdown {\n          label\n          count\n          amount {\n            valueInCents\n            currency\n          }\n        }\n      }\n    }\n  }\n": types.AccountInfoForLeaveHostDocument,
    "\n  query ManagePaymentMethods($accountSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      legacyId\n      type\n      slug\n      name\n      currency\n      isHost\n      settings\n      paymentMethods(type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID]) {\n        id\n        ...PaymentMethodFields\n      }\n    }\n  }\n\n  fragment PaymentMethodFields on PaymentMethod {\n    id\n    legacyId\n    name\n    data\n    service\n    type\n    balance {\n      valueInCents\n      currency\n    }\n    expiryDate\n    monthlyLimit {\n      valueInCents\n    }\n    account {\n      id\n      slug\n      name\n    }\n    recurringContributions: orders(\n      onlyActiveSubscriptions: true\n      status: [ACTIVE, ERROR, PENDING, REQUIRE_CLIENT_CONFIRMATION]\n    ) {\n      totalCount\n      nodes {\n        id\n        legacyId\n        needsConfirmation\n      }\n    }\n  }\n": types.ManagePaymentMethodsDocument,
    "\n      mutation ConfirmOrder($order: OrderReferenceInput!) {\n        confirmOrder(order: $order) {\n          order {\n            id\n            status\n            transactions {\n              id\n            }\n            fromAccount {\n              id\n              slug\n            }\n          }\n          stripeError {\n            message\n            account\n            response\n          }\n        }\n      }\n    ": types.ConfirmOrderDocument,
    "\n      query ActiveFiscalHost($collectiveSlug: String!) {\n        account(slug: $collectiveSlug) {\n          id\n          legacyId\n          type\n          slug\n          name\n          currency\n          members {\n            nodes {\n              role\n              createdAt\n            }\n          }\n          ... on AccountWithHost {\n            approvedAt\n            host {\n              id\n              legacyId\n              slug\n              name\n              currency\n            }\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n            }\n          }\n          events: childrenAccounts(accountType: EVENT) {\n            totalCount\n          }\n          projects: childrenAccounts(accountType: PROJECT) {\n            totalCount\n          }\n          stats {\n            consolidatedBalance: balance(includeChildren: true) {\n              valueInCents\n              currency\n            }\n          }\n        }\n      }\n    ": types.ActiveFiscalHostDocument,
    "\n      query AppliedToFiscalHost($collectiveSlug: String!) {\n        account(slug: $collectiveSlug) {\n          id\n          legacyId\n          slug\n          name\n          members {\n            nodes {\n              role\n              createdAt\n            }\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              slug\n              name\n            }\n          }\n        }\n      }\n    ": types.AppliedToFiscalHostDocument,
    "\n  query FiscalHostOCFTransition($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      features {\n        RECEIVE_FINANCIAL_CONTRIBUTIONS\n      }\n      newAccounts: duplicatedAccounts(limit: 1) {\n        totalCount\n        nodes {\n          id\n          name\n          slug\n          imageUrl\n          ... on AccountWithHost {\n            host {\n              id\n              legacyId\n            }\n          }\n        }\n      }\n      pausedContributions: orders(filter: INCOMING, status: PAUSED, includeIncognito: true) {\n        totalCount\n      }\n    }\n    hosts(limit: 200, offset: 0) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        createdAt\n        settings\n        type\n        name\n        slug\n        description\n        longDescription\n        currency\n        totalHostedAccounts\n        hostFeePercent\n        isTrustedHost\n        location {\n          id\n          country\n        }\n        tags\n      }\n    }\n  }\n": types.FiscalHostOcfTransitionDocument,
    "\n  mutation DuplicateAccount(\n    $account: AccountReferenceInput!\n    $include: DuplicateAccountDataTypeInput\n    $oldName: String\n  ) {\n    duplicateAccount(account: $account, include: $include, connect: true, oldName: $oldName) {\n      id\n      legacyId\n      slug\n      duplicatedFromAccount {\n        id\n        legacyId\n        slug\n        name\n      }\n      projects: childrenAccounts(accountType: PROJECT) {\n        totalCount\n      }\n      events: childrenAccounts(accountType: EVENT) {\n        totalCount\n      }\n    }\n  }\n": types.DuplicateAccountDocument,
    "\n  fragment ApplyToHostFields on Host {\n    id\n    legacyId\n    type\n    slug\n    name\n    createdAt\n    currency\n    isOpenToApplications\n    termsUrl\n    longDescription\n    hostFeePercent\n    settings\n    policies {\n      id\n      COLLECTIVE_MINIMUM_ADMINS {\n        numberOfAdmins\n      }\n    }\n  }\n": types.ApplyToHostFieldsFragmentDoc,
    "\n  fragment ApplyToHostAccountFields on Account {\n    id\n    slug\n    name\n    type\n    imageUrl\n    memberInvitations(role: [ADMIN]) {\n      id\n      role\n      memberAccount {\n        id\n        type\n        slug\n        name\n        imageUrl\n      }\n    }\n    admins: members(role: ADMIN) {\n      nodes {\n        id\n        role\n        account {\n          id\n          type\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n  }\n": types.ApplyToHostAccountFieldsFragmentDoc,
    "\n  query ApplyToHost($hostSlug: String!, $collectiveSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      ...ApplyToHostFields\n    }\n    account(slug: $collectiveSlug) {\n      id\n      ...ApplyToHostAccountFields\n    }\n  }\n  \n  \n": types.ApplyToHostDocument,
    "\n  query ApplyToHostWithAccounts($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      ...ApplyToHostFields\n    }\n    loggedInAccount {\n      id\n      memberOf(role: ADMIN, accountType: [COLLECTIVE, FUND], isApproved: false, isArchived: false) {\n        nodes {\n          id\n          account {\n            id\n            ...ApplyToHostAccountFields\n            ... on AccountWithHost {\n              host {\n                id\n                legacyId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  \n": types.ApplyToHostWithAccountsDocument,
    "\n  mutation ApplyToNewHost(\n    $collective: AccountReferenceInput!\n    $host: AccountReferenceInput!\n    $message: String\n    $inviteMembers: [InviteMemberInput]\n  ) {\n    applyToHost(collective: $collective, host: $host, message: $message, inviteMembers: $inviteMembers) {\n      id\n      slug\n      ... on AccountWithHost {\n        isActive\n        isApproved\n        host {\n          id\n          ...ApplyToHostFields\n        }\n      }\n    }\n  }\n  \n": types.ApplyToNewHostDocument,
    "\n  fragment MemberFields on Member {\n    id\n    role\n    since\n    createdAt\n    description\n    inherited\n    account {\n      id\n      name\n      slug\n      type\n      imageUrl(height: 64)\n      ... on Individual {\n        email\n      }\n    }\n  }\n": types.MemberFieldsFragmentDoc,
    "\n  query TeamSection($collectiveSlug: String!, $account: AccountReferenceInput!) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      isFrozen\n      type\n      imageUrl(height: 256)\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          type\n          name\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          features {\n            id\n            CONTACT_FORM\n          }\n          policies {\n            id\n            COLLECTIVE_MINIMUM_ADMINS {\n              numberOfAdmins\n              applies\n              freeze\n            }\n          }\n        }\n      }\n      members(role: [ADMIN, MEMBER, ACCOUNTANT], limit: 100) {\n        nodes {\n          id\n          ...MemberFields\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          slug\n          type\n          name\n          members(includeInherited: false, role: [ADMIN, MEMBER, ACCOUNTANT], limit: 100) {\n            nodes {\n              id\n              ...MemberFields\n            }\n          }\n        }\n      }\n    }\n    memberInvitations(account: $account) {\n      id\n      role\n      since\n      createdAt\n      description\n      account: memberAccount {\n        id\n        name\n        slug\n        type\n        imageUrl(height: 64)\n        ... on Individual {\n          email\n        }\n      }\n    }\n  }\n  \n": types.TeamSectionDocument,
    "\n  mutation ResendDraftExpenseInvite($expense: ExpenseReferenceInput!) {\n    resendDraftExpenseInvite(expense: $expense) {\n      id\n    }\n  }\n": types.ResendDraftExpenseInviteDocument,
    "\n  query QuoteExpense($id: String!) {\n    expense(expense: { id: $id }) {\n      id\n      currency\n      reference\n      amountInHostCurrency: amountV2(currencySource: HOST) {\n        exchangeRate {\n          value\n          fromCurrency\n          toCurrency\n        }\n      }\n      host {\n        id\n        transferwise {\n          id\n          amountBatched {\n            valueInCents\n            currency\n          }\n          balances {\n            valueInCents\n            currency\n          }\n        }\n      }\n      quote {\n        paymentProcessorFeeAmount {\n          valueInCents\n          currency\n        }\n        sourceAmount {\n          valueInCents\n          currency\n        }\n        estimatedDeliveryAt\n      }\n    }\n  }\n": types.QuoteExpenseDocument,
    "\n  query ValidateTransferRequirements($id: String!, $details: JSON) {\n    expense(expense: { id: $id }) {\n      id\n      validateTransferRequirements(details: $details) {\n        type\n        fields {\n          name\n          group {\n            key\n            name\n            type\n            required\n            example\n            minLength\n            maxLength\n            validationRegexp\n            refreshRequirementsOnChange\n            valuesAllowed {\n              key\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ValidateTransferRequirementsDocument,
    "\n  mutation RemovePayoutMethod($id: String!) {\n    removePayoutMethod(payoutMethodId: $id) {\n      id\n      isSaved\n    }\n  }\n": types.RemovePayoutMethodDocument,
    "\n  fragment LoggedInAccountExpensePayoutFields on Individual {\n    id\n    slug\n    imageUrl\n    type\n    name\n    legalName\n    hasTwoFactorAuth\n    location {\n      id\n      address\n      country\n      structured\n    }\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n    adminMemberships: memberOf(role: ADMIN, includeIncognito: false, accountType: [ORGANIZATION, COLLECTIVE, FUND]) {\n      nodes {\n        id\n        account {\n          id\n          legacyId\n          slug\n          imageUrl\n          type\n          name\n          legalName\n          isActive\n          isHost\n          policies {\n            id\n            REQUIRE_2FA_FOR_ADMINS\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n              legacyId\n              slug\n              policies {\n                id\n                REQUIRE_2FA_FOR_ADMINS\n              }\n            }\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              payoutMethods {\n                id\n                type\n                name\n                data\n                isSaved\n              }\n            }\n          }\n          ... on Organization {\n            host {\n              id\n              payoutMethods {\n                id\n                type\n                name\n                data\n                isSaved\n              }\n            }\n          }\n          location {\n            id\n            address\n            country\n            structured\n          }\n          payoutMethods {\n            id\n            type\n            name\n            data\n            isSaved\n          }\n          childrenAccounts {\n            nodes {\n              id\n              slug\n              imageUrl\n              type\n              name\n              isActive\n            }\n          }\n        }\n      }\n    }\n  }\n": types.LoggedInAccountExpensePayoutFieldsFragmentDoc,
    "\n  fragment AccountingCategoryFields on AccountingCategory {\n    id\n    name\n    kind\n    instructions\n    friendlyName\n    code\n    expensesTypes\n    appliesTo\n  }\n": types.AccountingCategoryFieldsFragmentDoc,
    "\n  fragment ExpenseHostFields on Host {\n    id\n    legacyId\n    name\n    legalName\n    slug\n    type\n    currency\n    isHost\n    expensePolicy\n    website\n    settings\n    features {\n      id\n      MULTI_CURRENCY_EXPENSES\n      PAYPAL_PAYOUTS\n    }\n    paypalPreApproval {\n      id\n      balance {\n        currency\n        valueInCents\n      }\n    }\n    location {\n      id\n      address\n      country\n    }\n    transferwise {\n      id\n      availableCurrencies\n    }\n    supportedPayoutMethods\n    isTrustedHost\n    plan {\n      id\n    }\n    expenseAccountingCategories: accountingCategories(kind: EXPENSE) {\n      nodes {\n        id\n        ...AccountingCategoryFields\n      }\n    }\n    policies {\n      id\n      EXPENSE_CATEGORIZATION {\n        requiredForExpenseSubmitters\n        requiredForCollectiveAdmins\n      }\n    }\n  }\n  \n": types.ExpenseHostFieldsFragmentDoc,
    "\n  fragment ExpenseValuesByRoleFragment on ExpenseValuesByRole {\n    id\n    submitter {\n      accountingCategory {\n        ...AccountingCategoryFields\n      }\n    }\n    accountAdmin {\n      accountingCategory {\n        ...AccountingCategoryFields\n      }\n    }\n    hostAdmin {\n      accountingCategory {\n        ...AccountingCategoryFields\n      }\n    }\n  }\n  \n": types.ExpenseValuesByRoleFragmentFragmentDoc,
    "\n  fragment ExpensePayeeFields on Account {\n    id\n    slug\n    name\n    legalName\n    imageUrl\n    type\n    isAdmin\n    isActive\n    description\n    ...AccountHoverCardFields\n    location {\n      id\n      address\n      country\n    }\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n\n    # For Collectives, Funds, Events and Projects\n    ... on AccountWithHost {\n      isApproved\n      host {\n        id\n        slug\n        # For Expenses across hosts\n        payoutMethods {\n          id\n          type\n          name\n          data\n          isSaved\n        }\n      }\n    }\n\n    # For Fiscal Hosts\n    ... on Organization {\n      host {\n        id\n        slug\n      }\n    }\n  }\n": types.ExpensePayeeFieldsFragmentDoc,
    "\n  fragment ExpensePageExpenseFields on Expense {\n    id\n    legacyId\n    description\n    longDescription\n    currency\n    type\n    status\n    onHold\n    privateMessage\n    reference\n    tags\n    amount\n    accountingCategory {\n      id\n      ...AccountingCategoryFields\n    }\n    valuesByRole {\n      id\n      ...ExpenseValuesByRoleFragment\n    }\n    amountInAccountCurrency: amountV2(currencySource: ACCOUNT) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    amountInHostCurrency: amountV2(currencySource: HOST) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    createdAt\n    invoiceInfo\n    merchantId\n    requiredLegalDocuments\n    receivedTaxForms: legalDocuments(type: US_TAX_FORM, status: RECEIVED) {\n      nodes {\n        id\n        type\n        documentLink\n        year\n      }\n    }\n    feesPayer\n    draft\n    items {\n      id\n      incurredAt\n      description\n      amount\n      amountV2 {\n        valueInCents\n        currency\n        exchangeRate {\n          date\n          value\n          source\n          fromCurrency\n          toCurrency\n        }\n      }\n      referenceExchangeRate {\n        value\n        fromCurrency\n        toCurrency\n      }\n      url\n      file {\n        id\n        type\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    taxes {\n      id\n      type\n      rate\n      idNumber\n    }\n    invoiceFile {\n      id\n      url\n      name\n      type\n      size\n      ... on ImageFileInfo {\n        width\n      }\n    }\n    attachedFiles {\n      id\n      url\n      name\n      info {\n        id\n        type\n        name\n        size\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    payee {\n      id\n      ...ExpensePayeeFields\n    }\n    payeeLocation {\n      id\n      address\n      country\n      structured\n    }\n    createdByAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      legacyId\n      ...AccountHoverCardFields\n    }\n    host {\n      id\n      ...ExpenseHostFields\n    }\n    requestedByAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      ...AccountHoverCardFields\n    }\n    approvedBy {\n      id\n      type\n      slug\n      name\n      imageUrl\n      ...AccountHoverCardFields\n    }\n    account {\n      id\n      legacyId\n      slug\n      name\n      type\n      imageUrl\n      backgroundImageUrl\n      isActive\n      description\n      settings\n      twitterHandle\n      currency\n      expensePolicy\n      supportedExpenseTypes\n      features {\n        id\n        ...NavbarFields\n        MULTI_CURRENCY_EXPENSES\n      }\n      location {\n        id\n        address\n        country\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        hostAgreements {\n          totalCount\n        }\n        host {\n          id\n          slug\n          legacyId\n          ...ExpenseHostFields\n          transferwise {\n            id\n            availableCurrencies\n          }\n        }\n      }\n\n      # For Hosts with Budget capabilities\n\n      ... on Organization {\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n          transferwise {\n            id\n            availableCurrencies\n          }\n        }\n      }\n\n      ... on Event {\n        parent {\n          id\n          slug\n          name\n          type\n          imageUrl\n        }\n      }\n      ... on Project {\n        parent {\n          id\n          slug\n          name\n          type\n          imageUrl\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    payoutMethod {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n    virtualCard {\n      id\n      name\n      last4\n    }\n    permissions {\n      id\n      canEdit\n      canEditTags\n      canEditAccountingCategory\n      canDelete\n      canSeeInvoiceInfo\n      canApprove\n      canUnapprove\n      canReject\n      canMarkAsSpam\n      canPay\n      canMarkAsUnpaid\n      canMarkAsIncomplete\n      canComment\n      canUnschedulePayment\n      canVerifyDraftExpense\n      canUsePrivateNote\n      canHold\n      canRelease\n      canDownloadTaxForm\n      canSeePayoutMethodPrivateDetails\n      approve {\n        allowed\n        reason\n        reasonDetails\n      }\n    }\n    lockedFields\n    activities {\n      id\n      type\n      createdAt\n      data\n      account {\n        id\n        slug\n        ... on AccountWithHost {\n          host {\n            id\n            slug\n          }\n        }\n      }\n      individual {\n        id\n        type\n        slug\n        name\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      transaction {\n        id\n        kind\n        type\n        amount {\n          valueInCents\n          currency\n        }\n        platformFee {\n          valueInCents\n          currency\n        }\n        hostFee {\n          valueInCents\n          currency\n        }\n        paymentProcessorFee {\n          valueInCents\n          currency\n        }\n        netAmount {\n          valueInCents\n          currency\n        }\n        taxAmount {\n          valueInCents\n          currency\n        }\n        taxInfo {\n          id\n          rate\n          type\n          percentage\n        }\n        fromAccount {\n          id\n          slug\n          name\n          ... on AccountWithHost {\n            hostFeePercent\n          }\n        }\n        toAccount {\n          id\n          slug\n          name\n          ... on AccountWithHost {\n            hostFeePercent\n          }\n        }\n        expense {\n          id\n          currency\n          amount\n          feesPayer\n        }\n        relatedTransactions(kind: PAYMENT_PROCESSOR_FEE) {\n          id\n          type\n          kind\n          amount {\n            valueInCents\n            currency\n          }\n        }\n      }\n    }\n    recurringExpense {\n      id\n      interval\n      endsAt\n    }\n    securityChecks {\n      level\n      message\n      scope\n      details\n    }\n  }\n\n  \n  \n  \n  \n  \n  \n": types.ExpensePageExpenseFieldsFragmentDoc,
    "\n  fragment ExpensesListFieldsFragment on Expense {\n    id\n    legacyId\n    description\n    reference\n    status\n    createdAt\n    tags\n    amount\n    comments {\n      totalCount\n    }\n    accountingCategory {\n      id\n      ...AccountingCategoryFields\n    }\n    valuesByRole {\n      id\n      ...ExpenseValuesByRoleFragment\n    }\n    amountInAccountCurrency: amountV2(currencySource: ACCOUNT) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    amountInHostCurrency: amountV2(currencySource: HOST) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    currency\n    type\n    requiredLegalDocuments\n    feesPayer\n    account {\n      id\n      name\n      slug\n      createdAt\n      currency\n      type\n      imageUrl\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    permissions {\n      id\n      canDelete\n      canApprove\n      canUnapprove\n      canReject\n      canMarkAsSpam\n      canPay\n      canMarkAsUnpaid\n      canMarkAsIncomplete\n      canSeeInvoiceInfo\n      canEditTags\n      canEditAccountingCategory\n      canUnschedulePayment\n      canHold\n      canRelease\n      approve {\n        allowed\n        reason\n        reasonDetails\n      }\n    }\n    payoutMethod {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n    payee {\n      id\n      type\n      slug\n      name\n      imageUrl\n      isAdmin\n      # For Collectives, Funds, Events and Projects\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n        }\n      }\n\n      # For Fiscal Hosts\n      ... on Organization {\n        host {\n          id\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    createdByAccount {\n      id\n      type\n      slug\n      name\n      legacyId\n      ...AccountHoverCardFields\n    }\n  }\n  \n  \n  \n": types.ExpensesListFieldsFragmentFragmentDoc,
    "\n  fragment ExpensesListAdminFieldsFragment on Expense {\n    id\n    onHold\n    account {\n      id\n    }\n    createdByAccount {\n      id\n      ... on Individual {\n        emails\n      }\n    }\n    approvedBy {\n      id\n      type\n      slug\n      name\n      imageUrl\n      ...AccountHoverCardFields\n    }\n    payee {\n      id\n      ... on Individual {\n        emails\n      }\n    }\n    payoutMethod {\n      id\n      type\n      name\n      data\n    }\n    items {\n      id\n      description\n      incurredAt\n      url\n      amount\n      file {\n        id\n        type\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    taxes {\n      id\n      type\n      rate\n    }\n    invoiceFile {\n      id\n      url\n      name\n      type\n      size\n      ... on ImageFileInfo {\n        width\n      }\n    }\n    attachedFiles {\n      id\n      url\n      name\n      info {\n        id\n        type\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    securityChecks {\n      level\n      message\n      scope\n      details\n    }\n    lastComment: comments(limit: 1, orderBy: { field: CREATED_AT, direction: DESC }) {\n      totalCount\n      nodes {\n        id\n        createdAt\n        fromAccount {\n          id\n          type\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n  }\n": types.ExpensesListAdminFieldsFragmentFragmentDoc,
    "\n  mutation EditExpense($expense: ExpenseUpdateInput!, $draftKey: String) {\n    editExpense(expense: $expense, draftKey: $draftKey) {\n      id\n      ...ExpensePageExpenseFields\n    }\n  }\n\n  \n": types.EditExpenseDocument,
    "\n  mutation EditExpenseCategory($expenseId: String!, $category: AccountingCategoryReferenceInput) {\n    editExpense(expense: { id: $expenseId, accountingCategory: $category }) {\n      id\n      valuesByRole {\n        id\n        ...ExpenseValuesByRoleFragment\n      }\n      accountingCategory {\n        id\n        ...AccountingCategoryFields\n      }\n    }\n  }\n  \n  \n": types.EditExpenseCategoryDocument,
    "\n  query ExpensePage($legacyExpenseId: Int!, $draftKey: String, $offset: Int, $totalPaidExpensesDateFrom: DateTime) {\n    expense(expense: { legacyId: $legacyExpenseId }, draftKey: $draftKey) {\n      id\n      ...ExpensePageExpenseFields\n      payee {\n        id\n        ...ExpensePayeeFields\n        stats {\n          id\n          totalPaidExpenses(dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidInvoices: totalPaidExpenses(expenseType: [INVOICE], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidReceipts: totalPaidExpenses(expenseType: [RECEIPT], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidGrants: totalPaidExpenses(expenseType: [GRANT], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n        }\n      }\n      permissions {\n        canDeclineExpenseInvite(draftKey: $draftKey)\n      }\n      comments(limit: 100, offset: $offset) {\n        totalCount\n        nodes {\n          id\n          ...CommentFields\n        }\n      }\n    }\n\n    loggedInAccount {\n      id\n      ...LoggedInAccountExpensePayoutFields\n    }\n  }\n\n  \n  \n  \n  \n": types.ExpensePageDocument,
    "\n  query MemberInvitationsCount($memberAccount: AccountReferenceInput!) {\n    memberInvitations(memberAccount: $memberAccount) {\n      id\n    }\n  }\n": types.MemberInvitationsCountDocument,
    "\n  mutation EditOrderAccountingCategory($order: OrderReferenceInput!, $category: AccountingCategoryReferenceInput) {\n    updateOrderAccountingCategory(order: $order, accountingCategory: $category) {\n      id\n      accountingCategory {\n        id\n        name\n        code\n        friendlyName\n      }\n    }\n  }\n": types.EditOrderAccountingCategoryDocument,
    "\n  query PaymentMethodPicker($accountSlug: String!, $hostSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      name\n      paymentMethods(type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID, COLLECTIVE]) {\n        id\n        name\n        data\n        service\n        type\n        account {\n          id\n          name\n          slug\n        }\n        balance {\n          value\n          valueInCents\n          currency\n        }\n        limitedToHosts {\n          id\n        }\n        sourcePaymentMethod {\n          id\n          limitedToHosts {\n            id\n          }\n        }\n      }\n    }\n    host(slug: $hostSlug) {\n      id\n      paypalClientId\n      supportedPaymentMethods\n    }\n  }\n": types.PaymentMethodPickerDocument,
    "\n  fragment UpdatePaymentMethodFragment on PaymentMethod {\n    id\n    name\n    data\n    service\n    type\n    expiryDate\n    account {\n      id\n    }\n    balance {\n      value\n      valueInCents\n      currency\n    }\n  }\n": types.UpdatePaymentMethodFragmentFragmentDoc,
    "\n  fragment ManagedOrderFields on Order {\n    id\n    legacyId\n    nextChargeDate\n    paymentMethod {\n      ...UpdatePaymentMethodFragment\n    }\n    amount {\n      value\n      valueInCents\n      currency\n    }\n    totalAmount {\n      value\n      valueInCents\n      currency\n    }\n    status\n    description\n    memo\n    createdAt\n    processedAt\n    lastChargedAt\n    hostFeePercent\n    frequency\n    tier {\n      id\n      name\n    }\n    tax {\n      id\n      type\n      rate\n      idNumber\n    }\n    permissions {\n      id\n      canResume\n      canMarkAsExpired\n      canMarkAsPaid\n      canEdit\n      canComment\n      canSeePrivateActivities\n      canSetTags\n      canUpdateAccountingCategory\n    }\n    fromAccount {\n      id\n      name\n      slug\n      isIncognito\n      type\n      ... on Individual {\n        isGuest\n      }\n      ...AccountHoverCardFields\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      description\n      tags\n      imageUrl\n      backgroundImageUrl(height: 256)\n      settings\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    platformTipAmount {\n      value\n      valueInCents\n    }\n    paymentProcessorFee {\n      valueInCents\n      currency\n    }\n    pendingContributionData {\n      expectedAt\n      paymentMethod\n      ponumber\n      memo\n      fromAccountInfo {\n        name\n        email\n      }\n    }\n    accountingCategory {\n      id\n      name\n      kind\n      code\n    }\n  }\n  \n  \n": types.ManagedOrderFieldsFragmentDoc,
    "\n  query RecurringContributions($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      features {\n        id\n        ...NavbarFields\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      orders(filter: OUTGOING, onlySubscriptions: true, includeIncognito: true) {\n        totalCount\n        nodes {\n          id\n          ...ManagedOrderFields\n          totalDonations {\n            value\n            valueInCents\n            currency\n          }\n        }\n      }\n    }\n  }\n  \n  \n": types.RecurringContributionsDocument,
    "\n  mutation AnonymizeAccount($account: AccountReferenceInput!) {\n    rootAnonymizeAccount(account: $account) {\n      id\n    }\n  }\n": types.AnonymizeAccountDocument,
    "\n  mutation ClearCache($account: AccountReferenceInput!, $cacheTypes: [AccountCacheType!]) {\n    clearCacheForAccount(account: $account, type: $cacheTypes) {\n      id\n      slug\n      name\n    }\n  }\n": types.ClearCacheDocument,
    "\n  fragment SearchAccountFields on Account {\n    id\n    name\n    slug\n    imageUrl(height: $imageHeight)\n    type\n  }\n": types.SearchAccountFieldsFragmentDoc,
    "\n  query SearchCommand(\n    $searchTerm: String!\n    $host: AccountReferenceInput\n    $account: AccountReferenceInput\n    $limit: Int!\n    $includeTransactions: Boolean!\n    $imageHeight: Int\n  ) {\n    search(searchTerm: $searchTerm, defaultLimit: $limit, host: $host, account: $account) {\n      results {\n        accounts {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              ...SearchAccountFields\n            }\n          }\n        }\n        comments {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              html\n              createdAt\n              fromAccount {\n                ...SearchAccountFields\n              }\n              expense {\n                id\n                legacyId\n                description\n                account {\n                  ...SearchAccountFields\n                }\n              }\n              update {\n                id\n                legacyId\n                title\n                account {\n                  ...SearchAccountFields\n                }\n              }\n              order {\n                id\n                legacyId\n                toAccount {\n                  ...SearchAccountFields\n                }\n              }\n              hostApplication {\n                id\n                account {\n                  ...SearchAccountFields\n                }\n                host {\n                  ...SearchAccountFields\n                }\n              }\n              conversation {\n                id\n                slug\n                account {\n                  ...SearchAccountFields\n                }\n              }\n            }\n          }\n        }\n        expenses {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              description\n              legacyId\n              type\n              status\n              amountV2 {\n                valueInCents\n                currency\n              }\n              payee {\n                ...SearchAccountFields\n              }\n              account {\n                ...SearchAccountFields\n              }\n            }\n          }\n        }\n        orders @include(if: $includeTransactions) {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              legacyId\n              description\n              status\n              amount {\n                valueInCents\n                currency\n              }\n              toAccount {\n                ...SearchAccountFields\n              }\n              fromAccount {\n                ...SearchAccountFields\n              }\n            }\n          }\n        }\n        transactions @include(if: $includeTransactions) {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              legacyId\n              description\n              type\n              kind\n              netAmount {\n                valueInCents\n                currency\n              }\n              account {\n                ...SearchAccountFields\n              }\n              oppositeAccount {\n                ...SearchAccountFields\n              }\n            }\n          }\n        }\n\n        updates {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              legacyId\n              title\n              account {\n                ...SearchAccountFields\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n": types.SearchCommandDocument,
    "\n  query SearchContext($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      slug\n      imageUrl\n      type\n    }\n  }\n": types.SearchContextDocument,
    "\n      mutation CreateExpenseFromDashboard(\n        $expenseCreateInput: ExpenseCreateInput!\n        $account: AccountReferenceInput!\n        $recurring: RecurringExpenseInput\n        $privateComment: String\n      ) {\n        expense: createExpense(\n          expense: $expenseCreateInput\n          account: $account\n          privateComment: $privateComment\n          recurring: $recurring\n        ) {\n          id\n          legacyId\n        }\n      }\n    ": types.CreateExpenseFromDashboardDocument,
    "\n      mutation InviteExpenseFromDashboard(\n        $expenseInviteInput: ExpenseInviteDraftInput!\n        $account: AccountReferenceInput!\n      ) {\n        expense: draftExpenseAndInviteUser(expense: $expenseInviteInput, account: $account) {\n          id\n          legacyId\n        }\n      }\n    ": types.InviteExpenseFromDashboardDocument,
    "\n      mutation EditExpenseFromDashboard($expenseEditInput: ExpenseUpdateInput!, $draftKey: String) {\n        expense: editExpense(expense: $expenseEditInput, draftKey: $draftKey) {\n          id\n          legacyId\n        }\n      }\n    ": types.EditExpenseFromDashboardDocument,
    "\n      query AccountItem($slug: String!, $showAdmins: Boolean!) {\n        account(slug: $slug) {\n          id\n          legacyId\n          slug\n          name\n          type\n          imageUrl\n\n          admins: members(role: ADMIN) @include(if: $showAdmins) {\n            totalCount\n            nodes {\n              id\n              account {\n                id\n                type\n                slug\n                name\n                imageUrl\n                ...AccountHoverCardFields\n                emails\n              }\n            }\n          }\n\n          ... on AccountWithParent {\n            parent {\n              id\n              legacyId\n              slug\n            }\n          }\n        }\n      }\n      \n    ": types.AccountItemDocument,
    "\n      mutation SavePayoutMethod($payoutMethod: PayoutMethodInput!, $payeeSlug: String!) {\n        createPayoutMethod(payoutMethod: $payoutMethod, account: { slug: $payeeSlug }) {\n          id\n        }\n      }\n    ": types.SavePayoutMethodDocument,
    "\n            fragment PayoutProfile on Account {\n              legalName\n            }\n          ": types.PayoutProfileFragmentDoc,
    "\n      mutation DeletePayoutMethod($payoutMethodId: String!) {\n        removePayoutMethod(payoutMethodId: $payoutMethodId) {\n          id\n        }\n      }\n    ": types.DeletePayoutMethodDocument,
    "\n  query ExpenseFormSchema(\n    $collectiveSlug: String\n    $hasCollectiveSlug: Boolean!\n    $payeeSlug: String\n    $hasPayeeSlug: Boolean!\n    $submitterSlug: String\n    $hasSubmitterSlug: Boolean!\n    $hasExpenseId: Boolean!\n    $expenseId: Int\n    $expenseKey: String\n  ) {\n    account(slug: $collectiveSlug) @include(if: $hasCollectiveSlug) {\n      ...ExpenseFormAccountFields\n\n      ... on AccountWithHost {\n        host {\n          vendors(forAccount: { slug: $collectiveSlug }, limit: 5) {\n            nodes {\n              ...ExpenseVendorFields\n            }\n          }\n        }\n      }\n\n      ... on Organization {\n        host {\n          vendors(forAccount: { slug: $collectiveSlug }, limit: 5) {\n            nodes {\n              ...ExpenseVendorFields\n            }\n          }\n        }\n      }\n    }\n\n    payee: account(slug: $payeeSlug) @include(if: $hasPayeeSlug) {\n      ...ExpenseFormPayeeFields\n    }\n\n    loggedInAccount {\n      id\n      legacyId\n      ...LoggedInAccountExpensePayoutFields\n    }\n\n    submitter: account(slug: $submitterSlug) @include(if: $hasSubmitterSlug) {\n      ...ExpenseFormSubmitterFields\n    }\n\n    recentlySubmittedExpenses: expenses(\n      createdByAccount: { slug: $submitterSlug }\n      limit: 10\n      types: [INVOICE, RECEIPT]\n      orderBy: { field: CREATED_AT, direction: DESC }\n    ) @include(if: $hasSubmitterSlug) {\n      nodes {\n        account {\n          ...ExpenseFormAccountFields\n        }\n        payee {\n          ...ExpenseFormAccountFields\n        }\n        payoutMethod {\n          id\n        }\n      }\n    }\n\n    expense(expense: { legacyId: $expenseId }, draftKey: $expenseKey) @include(if: $hasExpenseId) {\n      id\n      legacyId\n      description\n      createdAt\n      longDescription\n      amountV2 {\n        valueInCents\n        currency\n      }\n      taxes {\n        id\n        type\n        rate\n        idNumber\n      }\n      requiredLegalDocuments\n      accountingCategory {\n        id\n      }\n      currency\n      type\n      status\n      account {\n        ...ExpenseFormAccountFields\n      }\n      createdByAccount {\n        ...ExpenseFormAccountFields\n      }\n      payee {\n        ...ExpenseFormPayeeFields\n      }\n      payoutMethod {\n        id\n      }\n      attachedFiles {\n        id\n        url\n        info {\n          name\n          type\n          size\n        }\n      }\n      invoiceFile {\n        id\n        url\n        name\n        type\n        size\n        ... on ImageFileInfo {\n          width\n        }\n      }\n      items {\n        id\n        description\n        url\n        file {\n          name\n          type\n          size\n        }\n        amount: amountV2 {\n          currency\n          valueInCents\n          exchangeRate {\n            value\n            source\n            fromCurrency\n            toCurrency\n            date\n          }\n        }\n        createdAt\n        incurredAt\n      }\n      privateMessage\n      invoiceInfo\n      reference\n      tags\n      permissions {\n        id\n        canEdit\n        canEditAccountingCategory\n        canEditTags\n        canDeclineExpenseInvite(draftKey: $expenseKey)\n      }\n      draft\n      lockedFields\n      submitter: createdByAccount {\n        ...ExpenseFormSubmitterFields\n      }\n    }\n  }\n\n  \n\n  fragment ExpenseFormSchemaFeatureFields on Account {\n    features {\n      id\n      MULTI_CURRENCY_EXPENSES\n      PAYPAL_PAYOUTS\n    }\n  }\n\n  fragment ExpenseFormSchemaPolicyFields on Account {\n    policies {\n      EXPENSE_CATEGORIZATION {\n        requiredForExpenseSubmitters\n        requiredForCollectiveAdmins\n      }\n\n      EXPENSE_POLICIES {\n        invoicePolicy\n        receiptPolicy\n        titlePolicy\n      }\n    }\n  }\n\n  fragment ExpenseFormSchemaHostFields on Host {\n    id\n    legacyId\n    name\n    legalName\n    slug\n    type\n    currency\n    settings\n\n    location {\n      id\n      address\n      country\n    }\n    transferwise {\n      id\n      availableCurrencies\n    }\n\n    supportedPayoutMethods\n    isTrustedHost\n\n    expensesTags {\n      id\n      tag\n    }\n\n    ...ExpenseFormSchemaPolicyFields\n    ...ExpenseFormSchemaFeatureFields\n\n    accountingCategories(kind: EXPENSE) {\n      nodes {\n        id\n        name\n        kind\n        expensesTypes\n        friendlyName\n        code\n        instructions\n        appliesTo\n      }\n    }\n  }\n\n  fragment ExpenseVendorFields on Vendor {\n    id\n    slug\n    name\n    type\n    description\n    imageUrl(height: 64)\n    hasPayoutMethod\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n  }\n\n  fragment ExpenseFormAccountFields on Account {\n    id\n    legacyId\n    name\n    slug\n    type\n    currency\n    settings\n    supportedExpenseTypes\n\n    stats {\n      balance {\n        valueInCents\n        currency\n      }\n    }\n\n    ...AccountHoverCardFields\n    ...ExpenseFormSchemaFeatureFields\n    ...ExpenseFormSchemaPolicyFields\n\n    ... on AccountWithHost {\n      host {\n        ...ExpenseFormSchemaHostFields\n      }\n    }\n    ... on Organization {\n      host {\n        ...ExpenseFormSchemaHostFields\n      }\n    }\n\n    policies {\n      EXPENSE_POLICIES {\n        invoicePolicy\n        receiptPolicy\n        titlePolicy\n      }\n    }\n\n    ... on AccountWithParent {\n      parent {\n        id\n        legacyId\n        slug\n      }\n    }\n\n    admins: members(role: ADMIN) {\n      totalCount\n      nodes {\n        id\n        account {\n          id\n          type\n          slug\n          name\n          imageUrl\n          ...AccountHoverCardFields\n          emails\n        }\n      }\n    }\n  }\n\n  fragment ExpenseFormSubmitterFields on Account {\n    id\n    slug\n    name\n    imageUrl\n  }\n\n  fragment ExpenseFormPayeeFields on Account {\n    id\n    legacyId\n    slug\n    name\n    legalName\n    type\n    isAdmin\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n\n    location {\n      address\n      country\n    }\n\n    ... on AccountWithHost {\n      host {\n        ...ExpenseFormSchemaHostFields\n      }\n    }\n    ... on Organization {\n      host {\n        ...ExpenseFormSchemaHostFields\n      }\n    }\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n      }\n    }\n  }\n\n  \n": types.ExpenseFormSchemaDocument,
    "\n            query ExpenseFormExchangeRates($exchangeRateRequests: [CurrencyExchangeRateRequest!]!) {\n              currencyExchangeRate(requests: $exchangeRateRequests) {\n                value\n                source\n                fromCurrency\n                toCurrency\n                date\n                isApproximate\n              }\n            }\n          ": types.ExpenseFormExchangeRatesDocument,
    "\n  fragment TransactionsQueryCollectionFragment on TransactionCollection {\n    offset\n    limit\n    nodes {\n      id\n      uuid\n      kind\n      amount {\n        currency\n        valueInCents\n      }\n      netAmount {\n        currency\n        valueInCents\n      }\n      taxAmount {\n        valueInCents\n        currency\n      }\n      taxInfo {\n        id\n        rate\n        type\n      }\n      platformFee {\n        currency\n        valueInCents\n      }\n      paymentProcessorFee {\n        currency\n        valueInCents\n      }\n      hostFee {\n        currency\n        valueInCents\n      }\n      type\n      description\n      createdAt\n      isRefunded\n      isRefund\n      isOrderRejected\n      toAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n        isIncognito\n        ... on AccountWithParent {\n          parent {\n            id\n            slug\n          }\n        }\n        settings\n        ... on Individual {\n          isGuest\n        }\n        ... on Collective {\n          host {\n            id\n            name\n            slug\n            type\n          }\n        }\n        ... on AccountWithHost {\n          hostFeePercent\n          platformFeePercent\n        }\n        ...AccountHoverCardFields\n      }\n      fromAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n        isIncognito\n        ... on Event {\n          parent {\n            id\n          }\n        }\n        ... on Project {\n          parent {\n            id\n          }\n        }\n        ... on Individual {\n          isGuest\n        }\n        ... on AccountWithHost {\n          hostFeePercent\n          platformFeePercent\n        }\n        ...AccountHoverCardFields\n      }\n      host {\n        id\n        name\n        slug\n        type\n        imageUrl\n      }\n      account {\n        id\n        isIncognito\n      }\n      giftCardEmitterAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n      }\n      permissions {\n        id\n        canRefund\n        canDownloadInvoice\n        canReject\n      }\n      paymentMethod {\n        id\n        type\n      }\n      payoutMethod {\n        id\n        type\n      }\n      order {\n        id\n        legacyId\n        status\n        memo\n        processedAt\n        toAccount {\n          id\n          slug\n        }\n      }\n      expense {\n        id\n        status\n        tags\n        type\n        feesPayer\n        amount\n        currency\n        legacyId\n        # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n        comments(limit: 1) {\n          totalCount\n        }\n        payoutMethod {\n          id\n          type\n        }\n        account {\n          id\n          slug\n        }\n        createdByAccount {\n          id\n          slug\n        }\n      }\n      relatedTransactions(kind: [HOST_FEE, PAYMENT_PROCESSOR_FEE, PAYMENT_PROCESSOR_COVER, TAX]) {\n        id\n        type\n        kind\n        netAmount {\n          currency\n          valueInCents\n        }\n      }\n    }\n  }\n  \n": types.TransactionsQueryCollectionFragmentFragmentDoc,
    "\n  mutation AddAuthenticatorAppToIndividual($account: AccountReferenceInput!, $token: String!) {\n    addTwoFactorAuthTokenToIndividual(account: $account, token: $token, type: TOTP) {\n      account {\n        id\n        hasTwoFactorAuth\n        twoFactorMethods {\n          id\n          method\n          createdAt\n          description\n          icon\n        }\n      }\n      recoveryCodes\n    }\n  }\n": types.AddAuthenticatorAppToIndividualDocument,
    "\n  mutation CreateWebAuthnRegistrationOptions($account: AccountReferenceInput!) {\n    createWebAuthnRegistrationOptions(account: $account)\n  }\n": types.CreateWebAuthnRegistrationOptionsDocument,
    "\n  mutation AddTwoFactorAuthToIndividual($account: AccountReferenceInput!, $token: String!) {\n    addTwoFactorAuthTokenToIndividual(account: $account, token: $token, type: WEBAUTHN) {\n      account {\n        id\n        hasTwoFactorAuth\n        twoFactorMethods {\n          id\n          method\n          name\n          createdAt\n          description\n          icon\n        }\n      }\n      recoveryCodes\n    }\n  }\n": types.AddTwoFactorAuthToIndividualDocument,
    "\n  mutation RegenerateRecoveryCodes {\n    regenerateRecoveryCodes\n  }\n": types.RegenerateRecoveryCodesDocument,
    "\n  mutation RemoveTwoFactorAuthentication($account: AccountReferenceInput!) {\n    removeTwoFactorAuthTokenFromIndividual(account: $account) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n": types.RemoveTwoFactorAuthenticationDocument,
    "\n  mutation RemoveTwoFactorAuthFromIndividual(\n    $account: AccountReferenceInput!\n    $userTwoFactorMethod: UserTwoFactorMethodReferenceInput!\n  ) {\n    removeTwoFactorAuthTokenFromIndividual(account: $account, userTwoFactorMethod: $userTwoFactorMethod) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n": types.RemoveTwoFactorAuthFromIndividualDocument,
    "\n  mutation EditTwoFactorAuthenticationMethod($userTwoFactorMethod: UserTwoFactorMethodReferenceInput!, $name: String!) {\n    editTwoFactorAuthenticationMethod(userTwoFactorMethod: $userTwoFactorMethod, name: $name) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n": types.EditTwoFactorAuthenticationMethodDocument,
    "\n  query OrganizationDetails($organizationSlug: String!) {\n    account(slug: $organizationSlug) {\n      id\n      type\n      name\n      slug\n      createdAt\n      orders {\n        totalCount\n      }\n      expenses(status: PAID, direction: SUBMITTED) {\n        totalCount\n      }\n      members(role: ADMIN, includeInherited: true) {\n        nodes {\n          id\n          role\n          account {\n            id\n            name\n            slug\n            type\n            imageUrl(height: 64)\n          }\n        }\n      }\n    }\n  }\n": types.OrganizationDetailsDocument,
    "\n  mutation ConvertOrganizationToVendor($organization: AccountReferenceInput!, $host: AccountReferenceInput!) {\n    convertOrganizationToVendor(organization: $organization, host: $host) {\n      id\n      ...VendorFields\n    }\n  }\n  \n": types.ConvertOrganizationToVendorDocument,
    "\n  mutation CreateVendor($vendor: VendorCreateInput!, $host: AccountReferenceInput!) {\n    createVendor(host: $host, vendor: $vendor) {\n      id\n      ...VendorFields\n    }\n  }\n  \n": types.CreateVendorDocument,
    "\n  mutation EditVendor($vendor: VendorEditInput!) {\n    editVendor(vendor: $vendor) {\n      id\n      ...VendorFields\n    }\n  }\n  \n": types.EditVendorDocument,
    "\n  fragment VendorFields on Vendor {\n    id\n    slug\n    name\n    legalName\n    type\n    description\n    tags\n    imageUrl(height: 96)\n    isArchived\n    createdAt\n\n    location {\n      id\n      address\n      country\n      name\n      structured\n    }\n\n    createdByAccount {\n      id\n      slug\n      name\n      imageUrl\n      ...AccountHoverCardFields\n    }\n\n    vendorInfo {\n      contact {\n        name\n        email\n      }\n      taxFormUrl\n      taxFormRequired\n      taxType\n      taxId\n      notes\n    }\n\n    payoutMethods {\n      id\n      type\n      name\n      data\n    }\n\n    orders(filter: OUTGOING, limit: 1) {\n      totalCount\n    }\n\n    expenses(status: PAID, direction: SUBMITTED, limit: 1) {\n      totalCount\n    }\n  }\n  \n": types.VendorFieldsFragmentDoc,
    "\n  mutation SetVendorArchive($vendor: VendorEditInput!, $archive: Boolean!) {\n    editVendor(archive: $archive, vendor: $vendor) {\n      id\n      ...VendorFields\n    }\n  }\n  \n": types.SetVendorArchiveDocument,
    "\n  query VirtualCardRequest($virtualCardRequest: VirtualCardRequestReferenceInput!) {\n    virtualCardRequest(virtualCardRequest: $virtualCardRequest) {\n      id\n      purpose\n      notes\n      status\n      currency\n      spendingLimitAmount {\n        valueInCents\n        currency\n      }\n      spendingLimitInterval\n      createdAt\n      account {\n        id\n        name\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      assignee {\n        id\n        name\n        email\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      host {\n        id\n        name\n        slug\n        imageUrl\n      }\n    }\n  }\n  \n": types.VirtualCardRequestDocument,
    "\n  mutation RejectVirtualCardRequest($virtualCardRequest: VirtualCardRequestReferenceInput!) {\n    rejectVirtualCardRequest(virtualCardRequest: $virtualCardRequest) {\n      id\n      status\n    }\n  }\n": types.RejectVirtualCardRequestDocument,
    "\n  query VirtualCardDrawer($virtualCard: VirtualCardReferenceInput!) {\n    virtualCard(virtualCard: $virtualCard) {\n      id\n      name\n      last4\n      data\n      privateData\n      provider\n      spendingLimitAmount\n      spendingLimitInterval\n      spendingLimitRenewsOn\n      remainingLimit\n      currency\n      createdAt\n      status\n      account {\n        id\n        name\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      assignee {\n        id\n        name\n        email\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      host {\n        id\n        slug\n        stripe {\n          username\n        }\n      }\n    }\n  }\n  \n": types.VirtualCardDrawerDocument,
    "\n  mutation UploadFile($files: [UploadFileInput!]!) {\n    uploadFile(files: $files) {\n      file {\n        id\n        url\n        name\n        type\n        size\n      }\n      parsingResult {\n        success\n        message\n        expense {\n          confidence\n          description\n          date\n          amount {\n            valueInCents\n            currency\n            exchangeRate {\n              value\n              fromCurrency\n              toCurrency\n              date\n              source\n              isApproximate\n            }\n          }\n          items {\n            description\n            incurredAt\n            url\n            amount {\n              valueInCents\n              currency\n            }\n          }\n        }\n      }\n    }\n  }\n": types.UploadFileDocument,
    "\n  mutation GeneratePlaidLinkToken(\n    $host: AccountReferenceInput!\n    $transactionImport: TransactionsImportReferenceInput\n    $locale: Locale\n    $accountSelectionEnabled: Boolean\n  ) {\n    generatePlaidLinkToken(\n      host: $host\n      transactionImport: $transactionImport\n      locale: $locale\n      accountSelectionEnabled: $accountSelectionEnabled\n    ) {\n      linkToken\n      expiration\n      requestId\n      hostedLinkUrl\n    }\n  }\n": types.GeneratePlaidLinkTokenDocument,
    "\n  mutation ConnectPlaidAccount(\n    $publicToken: String!\n    $host: AccountReferenceInput!\n    $sourceName: String\n    $name: String\n  ) {\n    connectPlaidAccount(publicToken: $publicToken, host: $host, sourceName: $sourceName, name: $name) {\n      connectedAccount {\n        id\n      }\n      transactionsImport {\n        id\n      }\n    }\n  }\n": types.ConnectPlaidAccountDocument,
    "\n  query CollectiveContactPage($collectiveSlug: String!) {\n    account(slug: $collectiveSlug, throwIfMissing: false) {\n      id\n      slug\n      name\n      type\n      permissions {\n        id\n        contact {\n          allowed\n        }\n      }\n      description\n      settings\n      imageUrl\n      twitterHandle\n      features {\n        id\n        ...NavbarFields\n      }\n    }\n  }\n  \n": types.CollectiveContactPageDocument,
    "\n  mutation ConfirmEmail($token: NonEmptyString!) {\n    confirmEmail(token: $token) {\n      sessionToken\n      individual {\n        id\n        email\n      }\n    }\n  }\n": types.ConfirmEmailDocument,
    "\n  query ExpensesPage(\n    $collectiveSlug: String!\n    $account: AccountReferenceInput\n    $fromAccount: AccountReferenceInput\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: [ExpenseStatusFilter]\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n    $createdByAccount: AccountReferenceInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      type\n      imageUrl\n      backgroundImageUrl\n      twitterHandle\n      name\n      currency\n      isArchived\n      isActive\n      settings\n      createdAt\n      supportedExpenseTypes\n      expensesTags {\n        id\n        tag\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n\n      ... on Organization {\n        # We add that for hasFeature\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n\n      ... on Event {\n        parent {\n          id\n          name\n          slug\n          type\n        }\n      }\n\n      ... on Project {\n        parent {\n          id\n          name\n          slug\n          type\n        }\n      }\n    }\n    expenses(\n      account: $account\n      fromAccount: $fromAccount\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n      createdByAccount: $createdByAccount\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n      }\n    }\n    # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n    # TODO: We don't need to try and fetch this field on non-host accounts (should use a ... on Host)\n    scheduledExpenses: expenses(\n      host: { slug: $collectiveSlug }\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: BANK_ACCOUNT\n      limit: 1\n    ) {\n      totalCount\n    }\n  }\n\n  \n  \n  \n": types.ExpensesPageDocument,
    "\n  query OrderPage($legacyId: Int!, $collectiveSlug: String!) {\n    order(order: { legacyId: $legacyId }) {\n      id\n      legacyId\n      status\n      description\n      tags\n      ...ConfirmContributionFields\n      paymentMethod {\n        id\n        type\n      }\n      createdAt\n      processedAt\n      permissions {\n        id\n        canMarkAsExpired\n        canMarkAsPaid\n        canSetTags\n        canEdit\n      }\n      transactions {\n        id\n        legacyId\n        group\n        description\n        type\n        kind\n        createdAt\n        order {\n          id\n        }\n        amount {\n          valueInCents\n          currency\n        }\n        netAmount {\n          valueInCents\n          currency\n        }\n        taxAmount {\n          valueInCents\n          currency\n        }\n        taxInfo {\n          id\n          type\n          rate\n        }\n        paymentProcessorFee {\n          valueInCents\n          currency\n        }\n        fromAccount {\n          id\n          slug\n          type\n          name\n          imageUrl\n          isIncognito\n          ... on Individual {\n            isGuest\n          }\n        }\n        account {\n          id\n          slug\n          type\n          name\n          imageUrl\n        }\n      }\n    }\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      isHost\n      imageUrl\n      backgroundImageUrl\n      isActive\n      description\n      settings\n      twitterHandle\n      currency\n      expensePolicy\n      supportedExpenseTypes\n      features {\n        id\n        ...NavbarFields\n        MULTI_CURRENCY_EXPENSES\n      }\n      location {\n        id\n        address\n        country\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          name\n          slug\n          imageUrl\n          backgroundImageUrl\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          name\n          slug\n          imageUrl\n          backgroundImageUrl\n        }\n      }\n    }\n  }\n\n  \n  \n": types.OrderPageDocument,
    "\n  mutation ResetPassword($password: String!) {\n    setPassword(password: $password) {\n      individual {\n        id\n      }\n      token\n    }\n  }\n": types.ResetPasswordDocument,
    "\n  query ResetPasswordAccount {\n    loggedInAccount {\n      id\n      type\n      slug\n      name\n      email\n      imageUrl\n    }\n  }\n": types.ResetPasswordAccountDocument,
    "\n  query SubmittedExpensesPage(\n    $collectiveSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: [ExpenseStatusFilter]\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      type\n      imageUrl\n      backgroundImageUrl\n      twitterHandle\n      name\n      currency\n      isArchived\n      isActive\n      settings\n      createdAt\n      supportedExpenseTypes\n      isHost\n      features {\n        id\n        ...NavbarFields\n      }\n    }\n    expenses(\n      createdByAccount: { slug: $collectiveSlug }\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        amountInCreatedByAccountCurrency: amountV2(currencySource: CREATED_BY_ACCOUNT) {\n          value\n          valueInCents\n          currency\n          exchangeRate {\n            date\n            value\n            source\n            isApproximate\n          }\n        }\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n  }\n\n  \n  \n  \n": types.SubmittedExpensesPageDocument,
    "\n  query HostTerms($hostCollectiveSlug: String!) {\n    host(slug: $hostCollectiveSlug) {\n      id\n      termsUrl\n      isTrustedHost\n    }\n  }\n": types.HostTermsDocument,
    "\n  fragment ProcessingOrderFields on Order {\n    id\n    legacyId\n    nextChargeDate\n    paymentMethod {\n      id\n      service\n      name\n      type\n      expiryDate\n      data\n      balance {\n        value\n        valueInCents\n        currency\n      }\n    }\n    amount {\n      value\n      valueInCents\n      currency\n    }\n    totalAmount {\n      value\n      valueInCents\n      currency\n    }\n    status\n    description\n    createdAt\n    frequency\n    tier {\n      id\n      name\n    }\n    totalDonations {\n      value\n      valueInCents\n      currency\n    }\n    fromAccount {\n      id\n      name\n      slug\n      isIncognito\n      type\n      ... on Individual {\n        isGuest\n      }\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      description\n      tags\n      imageUrl\n      settings\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n    }\n    platformTipAmount {\n      value\n      valueInCents\n    }\n  }\n": types.ProcessingOrderFieldsFragmentDoc,
    "\n  query TransactionsPage(\n    $slug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: TransactionType\n    $paymentMethodType: [PaymentMethodType]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $kind: [TransactionKind]\n    $includeIncognitoTransactions: Boolean\n    $includeGiftCardTransactions: Boolean\n    $includeChildrenTransactions: Boolean\n    $virtualCard: [VirtualCardReferenceInput]\n    $orderBy: ChronologicalOrderInput\n  ) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      createdAt\n      imageUrl(height: 256)\n      currency\n      settings\n      features {\n        id\n        ...NavbarFields\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n      processingOrders: orders(filter: OUTGOING, includeIncognito: true, status: [PENDING, PROCESSING]) {\n        totalCount\n        nodes {\n          id\n          ...ProcessingOrderFields\n        }\n      }\n    }\n    transactions(\n      account: { slug: $slug }\n      limit: $limit\n      offset: $offset\n      type: $type\n      paymentMethodType: $paymentMethodType\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      kind: $kind\n      includeIncognitoTransactions: $includeIncognitoTransactions\n      includeGiftCardTransactions: $includeGiftCardTransactions\n      includeChildrenTransactions: $includeChildrenTransactions\n      includeDebts: true\n      virtualCard: $virtualCard\n      orderBy: $orderBy\n    ) {\n      ...TransactionsQueryCollectionFragment\n      kinds\n      paymentMethodTypes\n      totalCount\n    }\n  }\n  \n  \n  \n": types.TransactionsPageDocument,
    "\n  query UpdatePage($collectiveSlug: String, $updateSlug: String!, $offset: Int) {\n    account(slug: $collectiveSlug, throwIfMissing: false) {\n      id\n      legacyId\n      slug\n      name\n      type\n      description\n      settings\n      imageUrl\n      isFrozen\n      twitterHandle\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          features {\n            id\n            CONTACT_FORM\n          }\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n      conversationsTags {\n        id\n        tag\n      }\n      ... on Collective {\n        isApproved\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n    update(slug: $updateSlug, account: { slug: $collectiveSlug }) {\n      id\n      slug\n      title\n      createdAt\n      publishedAt\n      html\n      summary\n      isPrivate\n      isChangelog\n      makePublicOn\n      userCanSeeUpdate\n      userCanPublishUpdate\n      reactions\n      userReactions\n      notificationAudience\n      account {\n        id\n        slug\n        type\n        name\n        isHost\n      }\n      fromAccount {\n        id\n        slug\n        type\n        name\n      }\n      comments(limit: 100, offset: $offset) {\n        totalCount\n        nodes {\n          id\n          ...CommentFields\n        }\n      }\n    }\n  }\n  \n  \n": types.UpdatePageDocument,
    "\n  query UpdatesPage(\n    $collectiveSlug: String!\n    $limit: Int\n    $offset: Int\n    $searchTerm: String\n    $orderBy: UpdateChronologicalOrderInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      name\n      slug\n      type\n      ... on Event {\n        parent {\n          id\n          name\n          slug\n          imageUrl\n        }\n      }\n      ... on Project {\n        parent {\n          id\n          name\n          slug\n          imageUrl\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n      updates(limit: $limit, offset: $offset, searchTerm: $searchTerm, orderBy: $orderBy) {\n        totalCount\n        offset\n        limit\n        nodes {\n          id\n          slug\n          title\n          summary\n          createdAt\n          publishedAt\n          updatedAt\n          userCanSeeUpdate\n          notificationAudience\n          tags\n          isPrivate\n          isChangelog\n          makePublicOn\n          fromAccount {\n            id\n            type\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n    }\n  }\n  \n": types.UpdatesPageDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AccountHoverCardFields on Account {\n    id\n    name\n    slug\n    type\n    description\n    imageUrl\n    isHost\n    isArchived\n    ... on Individual {\n      isGuest\n    }\n    ... on AccountWithHost {\n      host {\n        id\n        slug\n      }\n      approvedAt\n    }\n\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AccountHoverCardFields on Account {\n    id\n    name\n    slug\n    type\n    description\n    imageUrl\n    isHost\n    isArchived\n    ... on Individual {\n      isGuest\n    }\n    ... on AccountWithHost {\n      host {\n        id\n        slug\n      }\n      approvedAt\n    }\n\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserContextualMemberships(\n    $userSlug: String!\n    $accountSlug: String\n    $hostSlug: String\n    $getHostAdmin: Boolean!\n    $getAccountAdmin: Boolean!\n  ) {\n    account(slug: $userSlug) {\n      id\n      accountAdminMemberships: memberOf(role: [ADMIN], account: { slug: $accountSlug }, isApproved: true)\n        @include(if: $getAccountAdmin) {\n        nodes {\n          id\n          role\n          since\n          account {\n            id\n            slug\n          }\n        }\n      }\n      hostAdminMemberships: memberOf(role: [ADMIN], account: { slug: $hostSlug }, isApproved: true)\n        @include(if: $getHostAdmin) {\n        nodes {\n          id\n          role\n          since\n          account {\n            id\n            slug\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserContextualMemberships(\n    $userSlug: String!\n    $accountSlug: String\n    $hostSlug: String\n    $getHostAdmin: Boolean!\n    $getAccountAdmin: Boolean!\n  ) {\n    account(slug: $userSlug) {\n      id\n      accountAdminMemberships: memberOf(role: [ADMIN], account: { slug: $accountSlug }, isApproved: true)\n        @include(if: $getAccountAdmin) {\n        nodes {\n          id\n          role\n          since\n          account {\n            id\n            slug\n          }\n        }\n      }\n      hostAdminMemberships: memberOf(role: [ADMIN], account: { slug: $hostSlug }, isApproved: true)\n        @include(if: $getHostAdmin) {\n        nodes {\n          id\n          role\n          since\n          account {\n            id\n            slug\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchTags($term: String) {\n    tagStats(tagSearchTerm: $term) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchTags($term: String) {\n    tagStats(tagSearchTerm: $term) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CancelRecurringContribution($order: OrderReferenceInput!, $reason: String!, $reasonCode: String!) {\n    cancelOrder(order: $order, reason: $reason, reasonCode: $reasonCode) {\n      id\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation CancelRecurringContribution($order: OrderReferenceInput!, $reason: String!, $reasonCode: String!) {\n    cancelOrder(order: $order, reason: $reason, reasonCode: $reasonCode) {\n      id\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query EditPaymentMethodModal($order: OrderReferenceInput!) {\n        order(order: $order) {\n          id\n          totalAmount {\n            currency\n            valueInCents\n          }\n          fromAccount {\n            id\n            slug\n          }\n          toAccount {\n            id\n            slug\n            ... on AccountWithHost {\n              host {\n                id\n                slug\n                paypalClientId\n                supportedPaymentMethods\n              }\n            }\n            ... on Organization {\n              host {\n                id\n                slug\n                paypalClientId\n                supportedPaymentMethods\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query EditPaymentMethodModal($order: OrderReferenceInput!) {\n        order(order: $order) {\n          id\n          totalAmount {\n            currency\n            valueInCents\n          }\n          fromAccount {\n            id\n            slug\n          }\n          toAccount {\n            id\n            slug\n            ... on AccountWithHost {\n              host {\n                id\n                slug\n                paypalClientId\n                supportedPaymentMethods\n              }\n            }\n            ... on Organization {\n              host {\n                id\n                slug\n                paypalClientId\n                supportedPaymentMethods\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation AddStripePaymentMethodFromSetupIntent(\n        $setupIntent: SetupIntentInput!\n        $account: AccountReferenceInput!\n      ) {\n        addStripePaymentMethodFromSetupIntent(setupIntent: $setupIntent, account: $account) {\n          id\n          type\n          name\n        }\n      }\n    "): (typeof documents)["\n      mutation AddStripePaymentMethodFromSetupIntent(\n        $setupIntent: SetupIntentInput!\n        $account: AccountReferenceInput!\n      ) {\n        addStripePaymentMethodFromSetupIntent(setupIntent: $setupIntent, account: $account) {\n          id\n          type\n          name\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TagStats($host: AccountReferenceInput) {\n    tagStats(host: $host, limit: 5) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n"): (typeof documents)["\n  query TagStats($host: AccountReferenceInput) {\n    tagStats(host: $host, limit: 5) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation FollowAccount($accountSlug: String!) {\n        followAccount(account: { slug: $accountSlug }) {\n          member {\n            id\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation FollowAccount($accountSlug: String!) {\n        followAccount(account: { slug: $accountSlug }) {\n          member {\n            id\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation UnfollowAccount($accountSlug: String!) {\n        unfollowAccount(account: { slug: $accountSlug }) {\n          member {\n            id\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation UnfollowAccount($accountSlug: String!) {\n        unfollowAccount(account: { slug: $accountSlug }) {\n          member {\n            id\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query OCFTransitionBanner($slug: String!) {\n        account(slug: $slug) {\n          id\n          name\n          slug\n          type\n          ... on AccountWithHost {\n            host {\n              id\n              legacyId\n            }\n          }\n          duplicatedFromAccount {\n            id\n            name\n            slug\n            imageUrl\n            ... on AccountWithHost {\n              host {\n                id\n                legacyId\n              }\n            }\n          }\n          newAccounts: duplicatedAccounts(limit: 1) {\n            totalCount\n            nodes {\n              id\n              name\n              slug\n              imageUrl\n              ... on AccountWithHost {\n                host {\n                  id\n                  legacyId\n                }\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query OCFTransitionBanner($slug: String!) {\n        account(slug: $slug) {\n          id\n          name\n          slug\n          type\n          ... on AccountWithHost {\n            host {\n              id\n              legacyId\n            }\n          }\n          duplicatedFromAccount {\n            id\n            name\n            slug\n            imageUrl\n            ... on AccountWithHost {\n              host {\n                id\n                legacyId\n              }\n            }\n          }\n          newAccounts: duplicatedAccounts(limit: 1) {\n            totalCount\n            nodes {\n              id\n              name\n              slug\n              imageUrl\n              ... on AccountWithHost {\n                host {\n                  id\n                  legacyId\n                }\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PaypalPlan(\n    $account: AccountReferenceInput!\n    $tier: TierReferenceInput\n    $amount: AmountInput!\n    $frequency: ContributionFrequency!\n    $order: OrderReferenceInput\n  ) {\n    paypalPlan(account: $account, tier: $tier, amount: $amount, frequency: $frequency, order: $order) {\n      id\n    }\n  }\n"): (typeof documents)["\n  query PaypalPlan(\n    $account: AccountReferenceInput!\n    $tier: TierReferenceInput\n    $amount: AmountInput!\n    $frequency: ContributionFrequency!\n    $order: OrderReferenceInput\n  ) {\n    paypalPlan(account: $account, tier: $tier, amount: $amount, frequency: $frequency, order: $order) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditAccountSettings($account: AccountReferenceInput!, $key: AccountSettingsKey!, $value: JSON!) {\n    editAccountSetting(account: $account, key: $key, value: $value) {\n      id\n      settings\n    }\n  }\n"): (typeof documents)["\n  mutation EditAccountSettings($account: AccountReferenceInput!, $key: AccountSettingsKey!, $value: JSON!) {\n    editAccountSetting(account: $account, key: $key, value: $value) {\n      id\n      settings\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostExpenseModalCurrencyExchangeRate($requests: [CurrencyExchangeRateRequest!]!) {\n    currencyExchangeRate(requests: $requests) {\n      value\n      source\n      fromCurrency\n      toCurrency\n      date\n      isApproximate\n    }\n  }\n"): (typeof documents)["\n  query HostExpenseModalCurrencyExchangeRate($requests: [CurrencyExchangeRateRequest!]!) {\n    currencyExchangeRate(requests: $requests) {\n      value\n      source\n      fromCurrency\n      toCurrency\n      date\n      isApproximate\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteUpdate($id: String!) {\n    deleteUpdate(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteUpdate($id: String!) {\n    deleteUpdate(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SendSurveyResponse(\n    $surveyKey: String!\n    $responseId: String!\n    $score: Int!\n    $text: String\n    $okToContact: Boolean\n  ) {\n    sendSurveyResponse(\n      surveyKey: $surveyKey\n      responseId: $responseId\n      score: $score\n      text: $text\n      okToContact: $okToContact\n    )\n  }\n"): (typeof documents)["\n  mutation SendSurveyResponse(\n    $surveyKey: String!\n    $responseId: String!\n    $score: Int!\n    $text: String\n    $okToContact: Boolean\n  ) {\n    sendSurveyResponse(\n      surveyKey: $surveyKey\n      responseId: $responseId\n      score: $score\n      text: $text\n      okToContact: $okToContact\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FindAFiscalHost(\n    $tags: [String]\n    $limit: Int\n    $offset: Int\n    $country: [CountryISO]\n    $currency: String\n    $searchTerm: String\n  ) {\n    hosts(\n      tag: $tags\n      limit: $limit\n      offset: $offset\n      tagSearchOperator: OR\n      country: $country\n      currency: $currency\n      searchTerm: $searchTerm\n    ) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        createdAt\n        settings\n        type\n        name\n        slug\n        description\n        longDescription\n        currency\n        totalHostedCollectives\n        hostFeePercent\n        isTrustedHost\n        location {\n          id\n          country\n        }\n        tags\n      }\n    }\n  }\n"): (typeof documents)["\n  query FindAFiscalHost(\n    $tags: [String]\n    $limit: Int\n    $offset: Int\n    $country: [CountryISO]\n    $currency: String\n    $searchTerm: String\n  ) {\n    hosts(\n      tag: $tags\n      limit: $limit\n      offset: $offset\n      tagSearchOperator: OR\n      country: $country\n      currency: $currency\n      searchTerm: $searchTerm\n    ) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        createdAt\n        settings\n        type\n        name\n        slug\n        description\n        longDescription\n        currency\n        totalHostedCollectives\n        hostFeePercent\n        isTrustedHost\n        location {\n          id\n          country\n        }\n        tags\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AgreementMutationFields on Agreement {\n    id\n    ...AgreementViewFields\n    account {\n      id\n      ... on AccountWithHost {\n        # Refetch account agreements count to update the cache\n        hostAgreements {\n          totalCount\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment AgreementMutationFields on Agreement {\n    id\n    ...AgreementViewFields\n    account {\n      id\n      ... on AccountWithHost {\n        # Refetch account agreements count to update the cache\n        hostAgreements {\n          totalCount\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddAgreement(\n    $host: AccountReferenceInput!\n    $account: AccountReferenceInput!\n    $attachment: Upload\n    $title: NonEmptyString!\n    $notes: String\n    $expiresAt: DateTime\n  ) {\n    addAgreement(\n      host: $host\n      title: $title\n      account: $account\n      attachment: $attachment\n      expiresAt: $expiresAt\n      notes: $notes\n    ) {\n      id\n      ...AgreementMutationFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation AddAgreement(\n    $host: AccountReferenceInput!\n    $account: AccountReferenceInput!\n    $attachment: Upload\n    $title: NonEmptyString!\n    $notes: String\n    $expiresAt: DateTime\n  ) {\n    addAgreement(\n      host: $host\n      title: $title\n      account: $account\n      attachment: $attachment\n      expiresAt: $expiresAt\n      notes: $notes\n    ) {\n      id\n      ...AgreementMutationFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditAgreement(\n    $agreement: AgreementReferenceInput!\n    $title: NonEmptyString!\n    $expiresAt: DateTime\n    $notes: String\n    $attachment: Upload\n  ) {\n    editAgreement(agreement: $agreement, title: $title, expiresAt: $expiresAt, notes: $notes, attachment: $attachment) {\n      id\n      ...AgreementMutationFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation EditAgreement(\n    $agreement: AgreementReferenceInput!\n    $title: NonEmptyString!\n    $expiresAt: DateTime\n    $notes: String\n    $attachment: Upload\n  ) {\n    editAgreement(agreement: $agreement, title: $title, expiresAt: $expiresAt, notes: $notes, attachment: $attachment) {\n      id\n      ...AgreementMutationFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteAgreement($id: String!) {\n    deleteAgreement(agreement: { id: $id }) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteAgreement($id: String!) {\n    deleteAgreement(agreement: { id: $id }) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AgreementViewFields on Agreement {\n    id\n    title\n    createdAt\n    expiresAt\n    notes\n    account {\n      id\n      type\n      legacyId\n      slug\n      imageUrl\n      name\n      ...AccountHoverCardFields\n    }\n    createdBy {\n      id\n      type\n      legacyId\n      slug\n      imageUrl\n      name\n      ...AccountHoverCardFields\n    }\n    attachment {\n      id\n      url\n      name\n      size\n      type\n    }\n  }\n  \n"): (typeof documents)["\n  fragment AgreementViewFields on Agreement {\n    id\n    title\n    createdAt\n    expiresAt\n    notes\n    account {\n      id\n      type\n      legacyId\n      slug\n      imageUrl\n      name\n      ...AccountHoverCardFields\n    }\n    createdBy {\n      id\n      type\n      legacyId\n      slug\n      imageUrl\n      name\n      ...AccountHoverCardFields\n    }\n    attachment {\n      id\n      url\n      name\n      size\n      type\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment NavbarFields on CollectiveFeatures {\n    id\n    ABOUT\n    CONNECTED_ACCOUNTS\n    RECEIVE_FINANCIAL_CONTRIBUTIONS\n    RECURRING_CONTRIBUTIONS\n    EVENTS\n    PROJECTS\n    USE_EXPENSES\n    RECEIVE_EXPENSES\n    COLLECTIVE_GOALS\n    TOP_FINANCIAL_CONTRIBUTORS\n    CONVERSATIONS\n    UPDATES\n    TEAM\n    CONTACT_FORM\n    RECEIVE_HOST_APPLICATIONS\n    HOST_DASHBOARD\n    TRANSACTIONS\n    REQUEST_VIRTUAL_CARDS\n  }\n"): (typeof documents)["\n  fragment NavbarFields on CollectiveFeatures {\n    id\n    ABOUT\n    CONNECTED_ACCOUNTS\n    RECEIVE_FINANCIAL_CONTRIBUTIONS\n    RECURRING_CONTRIBUTIONS\n    EVENTS\n    PROJECTS\n    USE_EXPENSES\n    RECEIVE_EXPENSES\n    COLLECTIVE_GOALS\n    TOP_FINANCIAL_CONTRIBUTORS\n    CONVERSATIONS\n    UPDATES\n    TEAM\n    CONTACT_FORM\n    RECEIVE_HOST_APPLICATIONS\n    HOST_DASHBOARD\n    TRANSACTIONS\n    REQUEST_VIRTUAL_CARDS\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProjectSectionCardFields on Account {\n    id\n    legacyId\n    slug\n    name\n    description\n    imageUrl\n    isActive\n    isArchived\n    backgroundImageUrl(height: 208)\n  }\n"): (typeof documents)["\n  fragment ProjectSectionCardFields on Account {\n    id\n    legacyId\n    slug\n    name\n    description\n    imageUrl\n    isActive\n    isArchived\n    backgroundImageUrl(height: 208)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query ProjectsSectionSearch($slug: String, $searchTerm: String) {\n        account(slug: $slug) {\n          projects: childrenAccounts(accountType: [PROJECT], searchTerm: $searchTerm) {\n            totalCount\n            nodes {\n              ...ProjectSectionCardFields\n            }\n          }\n        }\n      }\n\n      \n    "): (typeof documents)["\n      query ProjectsSectionSearch($slug: String, $searchTerm: String) {\n        account(slug: $slug) {\n          projects: childrenAccounts(accountType: [PROJECT], searchTerm: $searchTerm) {\n            totalCount\n            nodes {\n              ...ProjectSectionCardFields\n            }\n          }\n        }\n      }\n\n      \n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpdatesSection($slug: String!, $onlyPublishedUpdates: Boolean) {\n    account(slug: $slug) {\n      id\n      updates(limit: 3, onlyPublishedUpdates: $onlyPublishedUpdates) {\n        nodes {\n          id\n          slug\n          title\n          summary\n          createdAt\n          publishedAt\n          isPrivate\n          userCanSeeUpdate\n          fromAccount {\n            id\n            type\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UpdatesSection($slug: String!, $onlyPublishedUpdates: Boolean) {\n    account(slug: $slug) {\n      id\n      updates(limit: 3, onlyPublishedUpdates: $onlyPublishedUpdates) {\n        nodes {\n          id\n          slug\n          title\n          summary\n          createdAt\n          publishedAt\n          isPrivate\n          userCanSeeUpdate\n          fromAccount {\n            id\n            type\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ContributionFlowPaymentMethods($slug: String) {\n    account(slug: $slug) {\n      id\n      paymentMethods(\n        type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID, COLLECTIVE]\n        includeExpired: true\n      ) {\n        id\n        name\n        data\n        service\n        type\n        expiryDate\n        providerType\n        sourcePaymentMethod {\n          id\n          name\n          data\n          service\n          type\n          expiryDate\n          providerType\n          balance {\n            currency\n          }\n          limitedToHosts {\n            id\n            legacyId\n            slug\n          }\n        }\n        balance {\n          valueInCents\n          currency\n        }\n        account {\n          id\n          slug\n          type\n          name\n          imageUrl\n        }\n        limitedToHosts {\n          id\n          legacyId\n          slug\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ContributionFlowPaymentMethods($slug: String) {\n    account(slug: $slug) {\n      id\n      paymentMethods(\n        type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID, COLLECTIVE]\n        includeExpired: true\n      ) {\n        id\n        name\n        data\n        service\n        type\n        expiryDate\n        providerType\n        sourcePaymentMethod {\n          id\n          name\n          data\n          service\n          type\n          expiryDate\n          providerType\n          balance {\n            currency\n          }\n          limitedToHosts {\n            id\n            legacyId\n            slug\n          }\n        }\n        balance {\n          valueInCents\n          currency\n        }\n        account {\n          id\n          slug\n          type\n          name\n          imageUrl\n        }\n        limitedToHosts {\n          id\n          legacyId\n          slug\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ConfirmContributionFields on Order {\n    id\n    hostFeePercent\n    pendingContributionData {\n      expectedAt\n      paymentMethod\n      ponumber\n      memo\n      fromAccountInfo {\n        name\n        email\n      }\n    }\n    memo\n    fromAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      isIncognito\n      ... on Individual {\n        isGuest\n      }\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      ... on AccountWithHost {\n        bankTransfersHostFeePercent: hostFeePercent(paymentMethodType: MANUAL)\n        host {\n          id\n          settings\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          settings\n        }\n      }\n    }\n    createdByAccount {\n      id\n      slug\n      name\n      imageUrl\n    }\n    totalAmount {\n      valueInCents\n      currency\n    }\n    amount {\n      currency\n      valueInCents\n    }\n    taxAmount {\n      currency\n      valueInCents\n    }\n    tax {\n      id\n      type\n      rate\n    }\n    platformTipAmount {\n      currency\n      valueInCents\n    }\n    platformTipEligible\n  }\n"): (typeof documents)["\n  fragment ConfirmContributionFields on Order {\n    id\n    hostFeePercent\n    pendingContributionData {\n      expectedAt\n      paymentMethod\n      ponumber\n      memo\n      fromAccountInfo {\n        name\n        email\n      }\n    }\n    memo\n    fromAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      isIncognito\n      ... on Individual {\n        isGuest\n      }\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      ... on AccountWithHost {\n        bankTransfersHostFeePercent: hostFeePercent(paymentMethodType: MANUAL)\n        host {\n          id\n          settings\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          settings\n        }\n      }\n    }\n    createdByAccount {\n      id\n      slug\n      name\n      imageUrl\n    }\n    totalAmount {\n      valueInCents\n      currency\n    }\n    amount {\n      currency\n      valueInCents\n    }\n    taxAmount {\n      currency\n      valueInCents\n    }\n    tax {\n      id\n      type\n      rate\n    }\n    platformTipAmount {\n      currency\n      valueInCents\n    }\n    platformTipEligible\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConfirmContribution($order: OrderUpdateInput!, $action: ProcessOrderAction!) {\n    processPendingOrder(order: $order, action: $action) {\n      id\n      legacyId\n      status\n      permissions {\n        id\n        canMarkAsPaid\n        canMarkAsExpired\n      }\n      ...ConfirmContributionFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation ConfirmContribution($order: OrderUpdateInput!, $action: ProcessOrderAction!) {\n    processPendingOrder(order: $order, action: $action) {\n      id\n      legacyId\n      status\n      permissions {\n        id\n        canMarkAsPaid\n        canMarkAsExpired\n      }\n      ...ConfirmContributionFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ContributionDrawer($orderId: Int!) {\n    order(order: { legacyId: $orderId }) {\n      id\n      legacyId\n      nextChargeDate\n      lastChargedAt\n      amount {\n        value\n        valueInCents\n        currency\n      }\n      totalAmount {\n        value\n        valueInCents\n        currency\n      }\n      paymentMethod {\n        id\n        type\n      }\n      status\n      description\n      createdAt\n      processedAt\n      frequency\n      tier {\n        id\n        name\n        description\n      }\n      createdByAccount {\n        ...ContributionDrawerAccountFields\n      }\n      individual: createdByAccount {\n        ...ContributionDrawerAccountFields\n      }\n      fromAccount {\n        ...ContributionDrawerAccountFields\n        ... on AccountWithHost {\n          host {\n            id\n            slug\n          }\n        }\n      }\n      toAccount {\n        ...ContributionDrawerAccountFields\n      }\n      platformTipEligible\n      platformTipAmount {\n        value\n        valueInCents\n        currency\n      }\n      hostFeePercent\n      tags\n      tax {\n        type\n        idNumber\n        rate\n      }\n      accountingCategory {\n        id\n        name\n        friendlyName\n        code\n      }\n      activities {\n        nodes {\n          id\n          type\n          createdAt\n          fromAccount {\n            ...ContributionDrawerAccountFields\n          }\n          account {\n            ...ContributionDrawerAccountFields\n          }\n          host {\n            ...ContributionDrawerAccountFields\n          }\n          individual {\n            ...ContributionDrawerAccountFields\n          }\n          data\n          transaction {\n            ...ContributionDrawerTransactionFields\n          }\n        }\n      }\n      customData\n      memo\n      needsConfirmation\n      pendingContributionData {\n        expectedAt\n        paymentMethod\n        ponumber\n        memo\n        fromAccountInfo {\n          name\n          email\n        }\n      }\n      transactions {\n        ...ContributionDrawerTransactionFields\n      }\n      permissions {\n        id\n        canResume\n        canMarkAsExpired\n        canMarkAsPaid\n        canEdit\n        canComment\n        canSeePrivateActivities\n        canSetTags\n        canUpdateAccountingCategory\n      }\n    }\n  }\n\n  fragment ContributionDrawerAccountFields on Account {\n    id\n    name\n    slug\n    isIncognito\n    type\n    imageUrl\n    isHost\n    isArchived\n    ... on Individual {\n      isGuest\n    }\n    ... on AccountWithHost {\n      host {\n        id\n        slug\n        type\n        accountingCategories {\n          nodes {\n            id\n            code\n            name\n            friendlyName\n            kind\n            appliesTo\n          }\n        }\n      }\n      approvedAt\n    }\n\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n      }\n    }\n  }\n\n  fragment ContributionDrawerTransactionFields on Transaction {\n    id\n    legacyId\n    uuid\n    kind\n    amount {\n      currency\n      valueInCents\n    }\n    netAmount {\n      currency\n      valueInCents\n    }\n    group\n    type\n    description\n    createdAt\n    isRefunded\n    isRefund\n    isOrderRejected\n    account {\n      ...ContributionDrawerAccountFields\n    }\n    oppositeAccount {\n      ...ContributionDrawerAccountFields\n    }\n    expense {\n      id\n      type\n    }\n    permissions {\n      id\n      canRefund\n      canDownloadInvoice\n      canReject\n    }\n    paymentProcessorUrl\n  }\n"): (typeof documents)["\n  query ContributionDrawer($orderId: Int!) {\n    order(order: { legacyId: $orderId }) {\n      id\n      legacyId\n      nextChargeDate\n      lastChargedAt\n      amount {\n        value\n        valueInCents\n        currency\n      }\n      totalAmount {\n        value\n        valueInCents\n        currency\n      }\n      paymentMethod {\n        id\n        type\n      }\n      status\n      description\n      createdAt\n      processedAt\n      frequency\n      tier {\n        id\n        name\n        description\n      }\n      createdByAccount {\n        ...ContributionDrawerAccountFields\n      }\n      individual: createdByAccount {\n        ...ContributionDrawerAccountFields\n      }\n      fromAccount {\n        ...ContributionDrawerAccountFields\n        ... on AccountWithHost {\n          host {\n            id\n            slug\n          }\n        }\n      }\n      toAccount {\n        ...ContributionDrawerAccountFields\n      }\n      platformTipEligible\n      platformTipAmount {\n        value\n        valueInCents\n        currency\n      }\n      hostFeePercent\n      tags\n      tax {\n        type\n        idNumber\n        rate\n      }\n      accountingCategory {\n        id\n        name\n        friendlyName\n        code\n      }\n      activities {\n        nodes {\n          id\n          type\n          createdAt\n          fromAccount {\n            ...ContributionDrawerAccountFields\n          }\n          account {\n            ...ContributionDrawerAccountFields\n          }\n          host {\n            ...ContributionDrawerAccountFields\n          }\n          individual {\n            ...ContributionDrawerAccountFields\n          }\n          data\n          transaction {\n            ...ContributionDrawerTransactionFields\n          }\n        }\n      }\n      customData\n      memo\n      needsConfirmation\n      pendingContributionData {\n        expectedAt\n        paymentMethod\n        ponumber\n        memo\n        fromAccountInfo {\n          name\n          email\n        }\n      }\n      transactions {\n        ...ContributionDrawerTransactionFields\n      }\n      permissions {\n        id\n        canResume\n        canMarkAsExpired\n        canMarkAsPaid\n        canEdit\n        canComment\n        canSeePrivateActivities\n        canSetTags\n        canUpdateAccountingCategory\n      }\n    }\n  }\n\n  fragment ContributionDrawerAccountFields on Account {\n    id\n    name\n    slug\n    isIncognito\n    type\n    imageUrl\n    isHost\n    isArchived\n    ... on Individual {\n      isGuest\n    }\n    ... on AccountWithHost {\n      host {\n        id\n        slug\n        type\n        accountingCategories {\n          nodes {\n            id\n            code\n            name\n            friendlyName\n            kind\n            appliesTo\n          }\n        }\n      }\n      approvedAt\n    }\n\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n      }\n    }\n  }\n\n  fragment ContributionDrawerTransactionFields on Transaction {\n    id\n    legacyId\n    uuid\n    kind\n    amount {\n      currency\n      valueInCents\n    }\n    netAmount {\n      currency\n      valueInCents\n    }\n    group\n    type\n    description\n    createdAt\n    isRefunded\n    isRefund\n    isOrderRejected\n    account {\n      ...ContributionDrawerAccountFields\n    }\n    oppositeAccount {\n      ...ContributionDrawerAccountFields\n    }\n    expense {\n      id\n      type\n    }\n    permissions {\n      id\n      canRefund\n      canDownloadInvoice\n      canReject\n    }\n    paymentProcessorUrl\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CommentFields on Comment {\n    id\n    createdAt\n    html\n    reactions\n    userReactions\n    type\n    account {\n      id\n      slug\n      type\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n    }\n    fromAccount {\n      id\n      type\n      name\n      slug\n      imageUrl\n      ...AccountHoverCardFields\n    }\n  }\n  \n"): (typeof documents)["\n  fragment CommentFields on Comment {\n    id\n    createdAt\n    html\n    reactions\n    userReactions\n    type\n    account {\n      id\n      slug\n      type\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n    }\n    fromAccount {\n      id\n      type\n      name\n      slug\n      imageUrl\n      ...AccountHoverCardFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ConversationListFragment on ConversationCollection {\n    totalCount\n    offset\n    limit\n    nodes {\n      id\n      title\n      summary\n      slug\n      createdAt\n      tags\n      fromAccount {\n        id\n        name\n        type\n        slug\n        imageUrl\n      }\n      followers(limit: 5) {\n        totalCount\n        nodes {\n          id\n          slug\n          type\n          name\n          imageUrl(height: 64)\n        }\n      }\n      stats {\n        id\n        commentsCount\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ConversationListFragment on ConversationCollection {\n    totalCount\n    offset\n    limit\n    nodes {\n      id\n      title\n      summary\n      slug\n      createdAt\n      tags\n      fromAccount {\n        id\n        name\n        type\n        slug\n        imageUrl\n      }\n      followers(limit: 5) {\n        totalCount\n        nodes {\n          id\n          slug\n          type\n          name\n          imageUrl(height: 64)\n        }\n      }\n      stats {\n        id\n        commentsCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query IsUserFollowingConversation($id: String!) {\n    loggedInAccount {\n      id\n      slug\n      imageUrl\n      type\n      name\n      ... on Individual {\n        isFollowingConversation(id: $id)\n      }\n    }\n  }\n"): (typeof documents)["\n  query IsUserFollowingConversation($id: String!) {\n    loggedInAccount {\n      id\n      slug\n      imageUrl\n      type\n      name\n      ... on Individual {\n        isFollowingConversation(id: $id)\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditComment($comment: CommentUpdateInput!) {\n    editComment(comment: $comment) {\n      id\n      ...CommentFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation EditComment($comment: CommentUpdateInput!) {\n    editComment(comment: $comment) {\n      id\n      ...CommentFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditCrowdfundingRedesignSettings($account: AccountReferenceInput!, $value: JSON!) {\n    editAccountSetting(account: $account, key: \"crowdfundingRedesign\", value: $value) {\n      id\n      settings\n    }\n  }\n"): (typeof documents)["\n  mutation EditCrowdfundingRedesignSettings($account: AccountReferenceInput!, $value: JSON!) {\n    editAccountSetting(account: $account, key: \"crowdfundingRedesign\", value: $value) {\n      id\n      settings\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TransactionGroupDetails($slug: String, $groupId: String!) {\n    transactionGroup(account: { slug: $slug }, groupId: $groupId) {\n      id\n      totalAmount {\n        valueInCents\n        currency\n      }\n      account {\n        id\n        name\n        slug\n        imageUrl\n      }\n      createdAt\n      primaryTransaction {\n        kind\n        type\n        oppositeAccount {\n          id\n          name\n          slug\n          imageUrl\n          type\n        }\n      }\n      transactions {\n        id\n        kind\n        type\n        account {\n          id\n          name\n          slug\n          imageUrl\n          type\n        }\n        oppositeAccount {\n          id\n          name\n          slug\n          imageUrl\n          type\n        }\n        expense {\n          id\n          status\n          amountV2 {\n            valueInCents\n            currency\n          }\n        }\n        order {\n          id\n        }\n        amount {\n          valueInCents\n          currency\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TransactionGroupDetails($slug: String, $groupId: String!) {\n    transactionGroup(account: { slug: $slug }, groupId: $groupId) {\n      id\n      totalAmount {\n        valueInCents\n        currency\n      }\n      account {\n        id\n        name\n        slug\n        imageUrl\n      }\n      createdAt\n      primaryTransaction {\n        kind\n        type\n        oppositeAccount {\n          id\n          name\n          slug\n          imageUrl\n          type\n        }\n      }\n      transactions {\n        id\n        kind\n        type\n        account {\n          id\n          name\n          slug\n          imageUrl\n          type\n        }\n        oppositeAccount {\n          id\n          name\n          slug\n          imageUrl\n          type\n        }\n        expense {\n          id\n          status\n          amountV2 {\n            valueInCents\n            currency\n          }\n        }\n        order {\n          id\n        }\n        amount {\n          valueInCents\n          currency\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TransactionGroups($slug: String!, $limit: Int, $type: TransactionType) {\n    transactionGroups(account: { slug: $slug }, limit: $limit, type: $type) {\n      totalCount\n      nodes {\n        id\n        totalAmount {\n          valueInCents\n          currency\n        }\n        createdAt\n        primaryTransaction {\n          id\n          kind\n          type\n          oppositeAccount {\n            id\n            name\n            slug\n            imageUrl\n            type\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TransactionGroups($slug: String!, $limit: Int, $type: TransactionType) {\n    transactionGroups(account: { slug: $slug }, limit: $limit, type: $type) {\n      totalCount\n      nodes {\n        id\n        totalAmount {\n          valueInCents\n          currency\n        }\n        createdAt\n        primaryTransaction {\n          id\n          kind\n          type\n          oppositeAccount {\n            id\n            name\n            slug\n            imageUrl\n            type\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Finances(\n    $slug: String!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $compareFrom: DateTime\n    $compareTo: DateTime\n    $includeComparison: Boolean!\n    $includeBalance: Boolean!\n    $includeSpent: Boolean!\n    $includeReceived: Boolean!\n    $includeBalanceTimeseries: Boolean!\n    $includeReceivedTimeseries: Boolean!\n    $timeUnit: TimeUnit\n    $includeChildren: Boolean!\n  ) {\n    account(slug: $slug) {\n      id\n      name\n      type\n\n      totalBalance: stats {\n        id\n        current: balance(includeChildren: $includeChildren, dateTo: $dateTo) {\n          currency\n          valueInCents\n        }\n        comparison: balance(includeChildren: $includeChildren, dateTo: $compareTo) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n\n      balanceTimeseries: stats @include(if: $includeBalanceTimeseries) {\n        id\n        current: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n\n      totalSpent: stats {\n        id\n        current: totalAmountSpent(includeChildren: $includeChildren, dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountSpent(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      totalReceived: stats {\n        id\n        current: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          net: true\n        ) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n\n      receivedTimeseries: stats @include(if: $includeReceivedTimeseries) {\n        id\n        current: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n          net: true\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n          net: true\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n\n      ...ProfileMetrics\n\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          ...ProfileMetrics\n        }\n      }\n    }\n  }\n\n  fragment ProfileMetrics on Account {\n    ...AccountHoverCardFields\n    balance: stats @include(if: $includeBalance) {\n      id\n      current: balance(dateTo: $dateTo) {\n        currency\n        valueInCents\n      }\n      # comparison: balance(dateTo: $compareTo) @include(if: $includeComparison) {\n      #   currency\n      #   valueInCents\n      # }\n    }\n    spent: stats @include(if: $includeSpent) {\n      id\n      current: totalAmountSpent(dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n        currency\n        valueInCents\n      }\n      # comparison: totalAmountSpent(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n      #   @include(if: $includeComparison) {\n      #   currency\n      #   valueInCents\n      # }\n    }\n    received: stats @include(if: $includeReceived) {\n      id\n      current: totalAmountReceived(dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n        currency\n        valueInCents\n      }\n      # comparison: totalAmountReceived(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n      #   @include(if: $includeComparison) {\n      #   currency\n      #   valueInCents\n      # }\n    }\n  }\n  \n"): (typeof documents)["\n  query Finances(\n    $slug: String!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $compareFrom: DateTime\n    $compareTo: DateTime\n    $includeComparison: Boolean!\n    $includeBalance: Boolean!\n    $includeSpent: Boolean!\n    $includeReceived: Boolean!\n    $includeBalanceTimeseries: Boolean!\n    $includeReceivedTimeseries: Boolean!\n    $timeUnit: TimeUnit\n    $includeChildren: Boolean!\n  ) {\n    account(slug: $slug) {\n      id\n      name\n      type\n\n      totalBalance: stats {\n        id\n        current: balance(includeChildren: $includeChildren, dateTo: $dateTo) {\n          currency\n          valueInCents\n        }\n        comparison: balance(includeChildren: $includeChildren, dateTo: $compareTo) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n\n      balanceTimeseries: stats @include(if: $includeBalanceTimeseries) {\n        id\n        current: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n\n      totalSpent: stats {\n        id\n        current: totalAmountSpent(includeChildren: $includeChildren, dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountSpent(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      totalReceived: stats {\n        id\n        current: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          net: true\n        ) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n\n      receivedTimeseries: stats @include(if: $includeReceivedTimeseries) {\n        id\n        current: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n          net: true\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n          net: true\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n\n      ...ProfileMetrics\n\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          ...ProfileMetrics\n        }\n      }\n    }\n  }\n\n  fragment ProfileMetrics on Account {\n    ...AccountHoverCardFields\n    balance: stats @include(if: $includeBalance) {\n      id\n      current: balance(dateTo: $dateTo) {\n        currency\n        valueInCents\n      }\n      # comparison: balance(dateTo: $compareTo) @include(if: $includeComparison) {\n      #   currency\n      #   valueInCents\n      # }\n    }\n    spent: stats @include(if: $includeSpent) {\n      id\n      current: totalAmountSpent(dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n        currency\n        valueInCents\n      }\n      # comparison: totalAmountSpent(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n      #   @include(if: $includeComparison) {\n      #   currency\n      #   valueInCents\n      # }\n    }\n    received: stats @include(if: $includeReceived) {\n      id\n      current: totalAmountReceived(dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n        currency\n        valueInCents\n      }\n      # comparison: totalAmountReceived(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n      #   @include(if: $includeComparison) {\n      #   currency\n      #   valueInCents\n      # }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Updates($slug: String!) {\n    account(slug: $slug) {\n      updates(onlyPublishedUpdates: true) {\n        totalCount\n        nodes {\n          id\n          title\n          html\n          slug\n          summary\n          reactions\n          userReactions\n          userCanSeeUpdate\n          publishedAt\n          fromAccount {\n            id\n            name\n            slug\n            imageUrl\n            type\n          }\n          comments {\n            totalCount\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Updates($slug: String!) {\n    account(slug: $slug) {\n      updates(onlyPublishedUpdates: true) {\n        totalCount\n        nodes {\n          id\n          title\n          html\n          slug\n          summary\n          reactions\n          userReactions\n          userCanSeeUpdate\n          publishedAt\n          fromAccount {\n            id\n            name\n            slug\n            imageUrl\n            type\n          }\n          comments {\n            totalCount\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProfilePage($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      slug\n      imageUrl\n      description\n      longDescription\n      backgroundImageUrl\n      settings\n      type\n      currency\n      isActive\n      socialLinks {\n        type\n        url\n      }\n\n      updates(onlyPublishedUpdates: true) {\n        totalCount\n        nodes {\n          id\n          title\n          html\n          slug\n          summary\n          reactions\n          userReactions\n          userCanSeeUpdate\n          publishedAt\n          fromAccount {\n            id\n            name\n            slug\n            imageUrl\n            type\n          }\n          comments {\n            totalCount\n          }\n        }\n      }\n      expenses(limit: 20, direction: RECEIVED, status: PAID) {\n        totalCount\n        nodes {\n          id\n          description\n          type\n          status\n          createdAt\n          payee {\n            id\n            name\n            type\n            imageUrl\n            slug\n          }\n          account {\n            id\n            name\n            type\n            imageUrl\n            slug\n          }\n          amountV2 {\n            valueInCents\n            currency\n          }\n        }\n      }\n\n      contributionTransactions: transactions(\n        limit: 20\n        kind: [CONTRIBUTION, ADDED_FUNDS]\n        isRefund: false\n        type: CREDIT\n      ) {\n        totalCount\n        nodes {\n          id\n          description\n          createdAt\n          type\n          kind\n          fromAccount {\n            id\n            name\n            type\n            slug\n            imageUrl\n          }\n          toAccount {\n            id\n            name\n            type\n            slug\n            imageUrl\n          }\n          amount {\n            valueInCents\n            currency\n          }\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          settings\n          imageUrl\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n\n      ... on AccountWithContributions {\n        tiers {\n          totalCount\n          nodes {\n            id\n            name\n            slug\n            type\n            description\n            button\n            amount {\n              valueInCents\n              currency\n            }\n            currency\n            minimumAmount {\n              valueInCents\n              currency\n            }\n            endsAt\n            amountType\n            frequency\n            availableQuantity\n          }\n        }\n\n        financialContributors: contributors(roles: [BACKER], limit: 150) {\n          totalCount\n          nodes {\n            id\n            name\n            roles\n            isAdmin\n            isCore\n            isBacker\n            since\n            image\n            description\n            collectiveSlug\n            totalAmountDonated\n            type\n            publicMessage\n            isIncognito\n          }\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          name\n          description\n          type\n          slug\n          settings\n          currency\n          stats {\n            totalAmountReceived {\n              valueInCents\n              currency\n            }\n            yearlyBudget {\n              valueInCents\n              currency\n            }\n            contributorsCount\n          }\n        }\n      }\n\n      stats {\n        totalAmountReceived {\n          valueInCents\n          currency\n        }\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        contributorsCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProfilePage($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      slug\n      imageUrl\n      description\n      longDescription\n      backgroundImageUrl\n      settings\n      type\n      currency\n      isActive\n      socialLinks {\n        type\n        url\n      }\n\n      updates(onlyPublishedUpdates: true) {\n        totalCount\n        nodes {\n          id\n          title\n          html\n          slug\n          summary\n          reactions\n          userReactions\n          userCanSeeUpdate\n          publishedAt\n          fromAccount {\n            id\n            name\n            slug\n            imageUrl\n            type\n          }\n          comments {\n            totalCount\n          }\n        }\n      }\n      expenses(limit: 20, direction: RECEIVED, status: PAID) {\n        totalCount\n        nodes {\n          id\n          description\n          type\n          status\n          createdAt\n          payee {\n            id\n            name\n            type\n            imageUrl\n            slug\n          }\n          account {\n            id\n            name\n            type\n            imageUrl\n            slug\n          }\n          amountV2 {\n            valueInCents\n            currency\n          }\n        }\n      }\n\n      contributionTransactions: transactions(\n        limit: 20\n        kind: [CONTRIBUTION, ADDED_FUNDS]\n        isRefund: false\n        type: CREDIT\n      ) {\n        totalCount\n        nodes {\n          id\n          description\n          createdAt\n          type\n          kind\n          fromAccount {\n            id\n            name\n            type\n            slug\n            imageUrl\n          }\n          toAccount {\n            id\n            name\n            type\n            slug\n            imageUrl\n          }\n          amount {\n            valueInCents\n            currency\n          }\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          settings\n          imageUrl\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n\n      ... on AccountWithContributions {\n        tiers {\n          totalCount\n          nodes {\n            id\n            name\n            slug\n            type\n            description\n            button\n            amount {\n              valueInCents\n              currency\n            }\n            currency\n            minimumAmount {\n              valueInCents\n              currency\n            }\n            endsAt\n            amountType\n            frequency\n            availableQuantity\n          }\n        }\n\n        financialContributors: contributors(roles: [BACKER], limit: 150) {\n          totalCount\n          nodes {\n            id\n            name\n            roles\n            isAdmin\n            isCore\n            isBacker\n            since\n            image\n            description\n            collectiveSlug\n            totalAmountDonated\n            type\n            publicMessage\n            isIncognito\n          }\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          name\n          description\n          type\n          slug\n          settings\n          currency\n          stats {\n            totalAmountReceived {\n              valueInCents\n              currency\n            }\n            yearlyBudget {\n              valueInCents\n              currency\n            }\n            contributorsCount\n          }\n        }\n      }\n\n      stats {\n        totalAmountReceived {\n          valueInCents\n          currency\n        }\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        contributorsCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProfileLayout($collectiveSlug: String!, $accountSlug: String, $includeAccount: Boolean!) {\n    account: account(slug: $accountSlug) @include(if: $includeAccount) {\n      id\n      name\n      slug\n      settings\n      type\n      description\n      longDescription\n      backgroundImageUrl\n      currency\n      stats {\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        totalAmountReceived(net: true) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisMonth: totalAmountReceived(\n          net: true\n          dateFrom: \"2024-02-01T00:00:00.000Z\"\n          dateTo: \"2024-03-01T00:00:00.000Z\"\n        ) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisYear: totalAmountReceived(\n          net: true\n          dateFrom: \"2024-01-01T00:00:00.000Z\"\n          dateTo: \"2025-01-01T00:00:00.000Z\"\n        ) {\n          valueInCents\n          currency\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      # TODO: mutualize the account stuff as a fragment\n      ... on AccountWithContributions {\n        financialContributors: contributors(roles: [BACKER], limit: 5) {\n          totalCount\n          nodes {\n            id\n            name\n            roles\n            isAdmin\n            isCore\n            isBacker\n            since\n            image\n            description\n            collectiveSlug\n            totalAmountDonated\n            type\n            publicMessage\n            isIncognito\n          }\n        }\n      }\n    }\n    collective: account(slug: $collectiveSlug) {\n      id\n      name\n      slug\n      imageUrl\n      description\n      longDescription\n      backgroundImageUrl\n      settings\n      type\n      currency\n      isActive\n      socialLinks {\n        type\n        url\n      }\n      stats {\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        totalAmountReceived(net: true) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisMonth: totalAmountReceived(\n          net: true\n          dateFrom: \"2024-02-01T00:00:00.000Z\"\n          dateTo: \"2024-03-01T00:00:00.000Z\"\n        ) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisYear: totalAmountReceived(\n          net: true\n          dateFrom: \"2024-01-01T00:00:00.000Z\"\n          dateTo: \"2025-01-01T00:00:00.000Z\"\n        ) {\n          valueInCents\n          currency\n        }\n      }\n      ... on AccountWithContributions {\n        tiers {\n          totalCount\n          nodes {\n            id\n            name\n            slug\n            type\n            description\n            button\n            amount {\n              valueInCents\n              currency\n            }\n            currency\n            minimumAmount {\n              valueInCents\n              currency\n            }\n            endsAt\n            amountType\n            frequency\n            availableQuantity\n          }\n        }\n        financialContributors: contributors(roles: [BACKER], limit: 5) {\n          totalCount\n          nodes {\n            id\n            name\n            roles\n            isAdmin\n            isCore\n            isBacker\n            since\n            image\n            description\n            collectiveSlug\n            totalAmountDonated\n            type\n            publicMessage\n            isIncognito\n          }\n        }\n      }\n\n      updates(onlyPublishedUpdates: true) {\n        totalCount\n      }\n      expenses(limit: 0, direction: RECEIVED, status: PAID, includeChildrenExpenses: true) {\n        totalCount\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          settings\n          imageUrl\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          name\n          description\n          type\n          slug\n          settings\n          currency\n          stats {\n            totalAmountReceived {\n              valueInCents\n              currency\n            }\n            yearlyBudget {\n              valueInCents\n              currency\n            }\n            contributorsCount\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProfileLayout($collectiveSlug: String!, $accountSlug: String, $includeAccount: Boolean!) {\n    account: account(slug: $accountSlug) @include(if: $includeAccount) {\n      id\n      name\n      slug\n      settings\n      type\n      description\n      longDescription\n      backgroundImageUrl\n      currency\n      stats {\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        totalAmountReceived(net: true) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisMonth: totalAmountReceived(\n          net: true\n          dateFrom: \"2024-02-01T00:00:00.000Z\"\n          dateTo: \"2024-03-01T00:00:00.000Z\"\n        ) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisYear: totalAmountReceived(\n          net: true\n          dateFrom: \"2024-01-01T00:00:00.000Z\"\n          dateTo: \"2025-01-01T00:00:00.000Z\"\n        ) {\n          valueInCents\n          currency\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      # TODO: mutualize the account stuff as a fragment\n      ... on AccountWithContributions {\n        financialContributors: contributors(roles: [BACKER], limit: 5) {\n          totalCount\n          nodes {\n            id\n            name\n            roles\n            isAdmin\n            isCore\n            isBacker\n            since\n            image\n            description\n            collectiveSlug\n            totalAmountDonated\n            type\n            publicMessage\n            isIncognito\n          }\n        }\n      }\n    }\n    collective: account(slug: $collectiveSlug) {\n      id\n      name\n      slug\n      imageUrl\n      description\n      longDescription\n      backgroundImageUrl\n      settings\n      type\n      currency\n      isActive\n      socialLinks {\n        type\n        url\n      }\n      stats {\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        totalAmountReceived(net: true) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisMonth: totalAmountReceived(\n          net: true\n          dateFrom: \"2024-02-01T00:00:00.000Z\"\n          dateTo: \"2024-03-01T00:00:00.000Z\"\n        ) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisYear: totalAmountReceived(\n          net: true\n          dateFrom: \"2024-01-01T00:00:00.000Z\"\n          dateTo: \"2025-01-01T00:00:00.000Z\"\n        ) {\n          valueInCents\n          currency\n        }\n      }\n      ... on AccountWithContributions {\n        tiers {\n          totalCount\n          nodes {\n            id\n            name\n            slug\n            type\n            description\n            button\n            amount {\n              valueInCents\n              currency\n            }\n            currency\n            minimumAmount {\n              valueInCents\n              currency\n            }\n            endsAt\n            amountType\n            frequency\n            availableQuantity\n          }\n        }\n        financialContributors: contributors(roles: [BACKER], limit: 5) {\n          totalCount\n          nodes {\n            id\n            name\n            roles\n            isAdmin\n            isCore\n            isBacker\n            since\n            image\n            description\n            collectiveSlug\n            totalAmountDonated\n            type\n            publicMessage\n            isIncognito\n          }\n        }\n      }\n\n      updates(onlyPublishedUpdates: true) {\n        totalCount\n      }\n      expenses(limit: 0, direction: RECEIVED, status: PAID, includeChildrenExpenses: true) {\n        totalCount\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          settings\n          imageUrl\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          name\n          description\n          type\n          slug\n          settings\n          currency\n          stats {\n            totalAmountReceived {\n              valueInCents\n              currency\n            }\n            yearlyBudget {\n              valueInCents\n              currency\n            }\n            contributorsCount\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ContributePage($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      slug\n      imageUrl\n      longDescription\n      backgroundImageUrl\n      settings\n      type\n      currency\n      isActive\n\n      stats {\n        totalAmountReceived {\n          valueInCents\n          currency\n        }\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        contributorsCount\n      }\n      ... on AccountWithContributions {\n        tiers {\n          totalCount\n          nodes {\n            id\n            name\n            slug\n            type\n            description\n            button\n            amount {\n              valueInCents\n              currency\n            }\n            currency\n            minimumAmount {\n              valueInCents\n              currency\n            }\n            endsAt\n            amountType\n            frequency\n            availableQuantity\n          }\n        }\n\n        financialContributors: contributors(roles: [BACKER], limit: 5) {\n          totalCount\n          nodes {\n            id\n            name\n            roles\n            isAdmin\n            isCore\n            isBacker\n            since\n            image\n            description\n            collectiveSlug\n            totalAmountDonated\n            type\n            publicMessage\n            isIncognito\n          }\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          settings\n          imageUrl\n        }\n      }\n    }\n    projects: accounts(\n      parent: { slug: $slug }\n      type: [PROJECT]\n      isActive: true\n      orderBy: { field: BALANCE, direction: DESC }\n    ) {\n      totalCount\n      nodes {\n        id\n        name\n        description\n        type\n        slug\n        settings\n        currency\n        stats {\n          totalAmountReceived {\n            valueInCents\n            currency\n          }\n          yearlyBudget {\n            valueInCents\n            currency\n          }\n          contributorsCount\n        }\n      }\n    }\n    events: accounts(\n      parent: { slug: $slug }\n      type: [EVENT]\n      isActive: true\n      orderBy: { field: BALANCE, direction: DESC }\n    ) {\n      totalCount\n      nodes {\n        id\n        name\n        description\n        type\n        slug\n        settings\n        currency\n        stats {\n          totalAmountReceived {\n            valueInCents\n            currency\n          }\n          yearlyBudget {\n            valueInCents\n            currency\n          }\n          contributorsCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ContributePage($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      slug\n      imageUrl\n      longDescription\n      backgroundImageUrl\n      settings\n      type\n      currency\n      isActive\n\n      stats {\n        totalAmountReceived {\n          valueInCents\n          currency\n        }\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        contributorsCount\n      }\n      ... on AccountWithContributions {\n        tiers {\n          totalCount\n          nodes {\n            id\n            name\n            slug\n            type\n            description\n            button\n            amount {\n              valueInCents\n              currency\n            }\n            currency\n            minimumAmount {\n              valueInCents\n              currency\n            }\n            endsAt\n            amountType\n            frequency\n            availableQuantity\n          }\n        }\n\n        financialContributors: contributors(roles: [BACKER], limit: 5) {\n          totalCount\n          nodes {\n            id\n            name\n            roles\n            isAdmin\n            isCore\n            isBacker\n            since\n            image\n            description\n            collectiveSlug\n            totalAmountDonated\n            type\n            publicMessage\n            isIncognito\n          }\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          settings\n          imageUrl\n        }\n      }\n    }\n    projects: accounts(\n      parent: { slug: $slug }\n      type: [PROJECT]\n      isActive: true\n      orderBy: { field: BALANCE, direction: DESC }\n    ) {\n      totalCount\n      nodes {\n        id\n        name\n        description\n        type\n        slug\n        settings\n        currency\n        stats {\n          totalAmountReceived {\n            valueInCents\n            currency\n          }\n          yearlyBudget {\n            valueInCents\n            currency\n          }\n          contributorsCount\n        }\n      }\n    }\n    events: accounts(\n      parent: { slug: $slug }\n      type: [EVENT]\n      isActive: true\n      orderBy: { field: BALANCE, direction: DESC }\n    ) {\n      totalCount\n      nodes {\n        id\n        name\n        description\n        type\n        slug\n        settings\n        currency\n        stats {\n          totalAmountReceived {\n            valueInCents\n            currency\n          }\n          yearlyBudget {\n            valueInCents\n            currency\n          }\n          contributorsCount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GoalProgress($slug: String!, $oneYearAgo: DateTime, $thisMonthStart: DateTime, $thisYearStart: DateTime) {\n    account(slug: $slug) {\n      id\n      slug\n      type\n      currency\n      ... on AccountWithContributions {\n        activeContributors(limit: 5) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n        activeContributorsForBudgetGoal: activeContributors(\n          includeActiveRecurringContributions: true\n          dateFrom: $oneYearAgo\n          limit: 5\n        ) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n        activeContributorsForYearlyBudget: activeContributors(\n          includeActiveRecurringContributions: true\n          dateFrom: $oneYearAgo\n          limit: 5\n        ) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n        activeContributorsForCalendarYear: activeContributors(dateFrom: $thisYearStart, limit: 5) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n        activeContributorsForCalendarMonth: activeContributors(dateFrom: $thisMonthStart, limit: 5) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n      }\n\n      stats {\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        totalAmountReceived(net: true) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisMonth: totalAmountReceived(net: true, dateFrom: $thisMonthStart) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisYear: totalAmountReceived(net: true, dateFrom: $thisYearStart) {\n          valueInCents\n          currency\n        }\n      }\n      members(role: [BACKER], limit: 5) {\n        totalCount\n        limit\n        nodes {\n          id\n          account {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GoalProgress($slug: String!, $oneYearAgo: DateTime, $thisMonthStart: DateTime, $thisYearStart: DateTime) {\n    account(slug: $slug) {\n      id\n      slug\n      type\n      currency\n      ... on AccountWithContributions {\n        activeContributors(limit: 5) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n        activeContributorsForBudgetGoal: activeContributors(\n          includeActiveRecurringContributions: true\n          dateFrom: $oneYearAgo\n          limit: 5\n        ) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n        activeContributorsForYearlyBudget: activeContributors(\n          includeActiveRecurringContributions: true\n          dateFrom: $oneYearAgo\n          limit: 5\n        ) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n        activeContributorsForCalendarYear: activeContributors(dateFrom: $thisYearStart, limit: 5) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n        activeContributorsForCalendarMonth: activeContributors(dateFrom: $thisMonthStart, limit: 5) {\n          totalCount\n          limit\n          nodes {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n      }\n\n      stats {\n        yearlyBudget {\n          valueInCents\n          currency\n        }\n        totalAmountReceived(net: true) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisMonth: totalAmountReceived(net: true, dateFrom: $thisMonthStart) {\n          valueInCents\n          currency\n        }\n        totalAmountReceivedThisYear: totalAmountReceived(net: true, dateFrom: $thisYearStart) {\n          valueInCents\n          currency\n        }\n      }\n      members(role: [BACKER], limit: 5) {\n        totalCount\n        limit\n        nodes {\n          id\n          account {\n            id\n            name\n            slug\n            type\n            imageUrl\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Account($slug: String!) {\n    account(slug: $slug) {\n      id\n      ...AccountHoverCardFields\n    }\n  }\n  \n"): (typeof documents)["\n  query Account($slug: String!) {\n    account(slug: $slug) {\n      id\n      ...AccountHoverCardFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccountFilterSearch($searchTerm: String) {\n    accounts(searchTerm: $searchTerm) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query AccountFilterSearch($searchTerm: String) {\n    accounts(searchTerm: $searchTerm) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccountingCategories($hostSlug: String) {\n    host(slug: $hostSlug) {\n      id\n      accountingCategories {\n        nodes {\n          id\n          code\n          name\n          kind\n          appliesTo\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AccountingCategories($hostSlug: String) {\n    host(slug: $hostSlug) {\n      id\n      accountingCategories {\n        nodes {\n          id\n          code\n          name\n          kind\n          appliesTo\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ExpenseTags($searchTerm: String, $host: AccountReferenceInput, $account: AccountReferenceInput) {\n    tagStats: expenseTagStats(tagSearchTerm: $searchTerm, host: $host, account: $account) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n"): (typeof documents)["\n  query ExpenseTags($searchTerm: String, $host: AccountReferenceInput, $account: AccountReferenceInput) {\n    tagStats: expenseTagStats(tagSearchTerm: $searchTerm, host: $host, account: $account) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostedAccountFilterSearch($searchTerm: String, $hostSlug: String, $orderBy: OrderByInput) {\n    accounts(searchTerm: $searchTerm, host: { slug: $hostSlug }, orderBy: $orderBy) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query HostedAccountFilterSearch($searchTerm: String, $hostSlug: String, $orderBy: OrderByInput) {\n    accounts(searchTerm: $searchTerm, host: { slug: $hostSlug }, orderBy: $orderBy) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostsFilterSearch($searchTerm: String, $orderBy: OrderByInput) {\n    accounts(searchTerm: $searchTerm, isHost: true, orderBy: $orderBy) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query HostsFilterSearch($searchTerm: String, $orderBy: OrderByInput) {\n    accounts(searchTerm: $searchTerm, isHost: true, orderBy: $orderBy) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query VirtualCardFilter($id: String!) {\n    virtualCard(virtualCard: { id: $id }) {\n      id\n      name\n      last4\n    }\n  }\n"): (typeof documents)["\n  query VirtualCardFilter($id: String!) {\n    virtualCard(virtualCard: { id: $id }) {\n      id\n      name\n      last4\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Dashboard($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      createdAt\n      slug\n      name\n      isHost\n      type\n      settings\n      isArchived\n      isActive\n      isIncognito\n      imageUrl(height: 256)\n      canHaveChangelogUpdates\n      connectedAccounts {\n        id\n        service\n      }\n      duplicatedAccounts {\n        totalCount\n      }\n      pendingExpenses: expenses(status: PENDING, direction: RECEIVED, includeChildrenExpenses: true, limit: 0) {\n        totalCount\n      }\n      pausedIncomingContributions: orders(filter: INCOMING, status: PAUSED, includeIncognito: true) {\n        totalCount\n      }\n      pausedOutgoingContributions: orders(filter: OUTGOING, status: PAUSED, includeIncognito: true) {\n        totalCount\n      }\n      ... on AccountWithContributions {\n        canStartResumeContributionsProcess\n        hasResumeContributionsProcessStarted\n      }\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          slug\n          name\n          type\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n        VIRTUAL_CARDS\n        USE_PAYMENT_METHODS\n        EMIT_GIFT_CARDS\n      }\n      policies {\n        id\n        REQUIRE_2FA_FOR_ADMINS\n      }\n      ... on Organization {\n        host {\n          id\n          requiredLegalDocuments\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          policies {\n            id\n            REQUIRE_2FA_FOR_ADMINS\n          }\n        }\n      }\n      ... on AccountWithHost {\n        hostFeePercent\n        isApproved\n        host {\n          id\n          requiredLegalDocuments\n          legacyId\n          slug\n          name\n          settings\n          policies {\n            id\n            EXPENSE_AUTHOR_CANNOT_APPROVE {\n              enabled\n              amountInCents\n              appliesToHostedCollectives\n              appliesToSingleAdminCollectives\n            }\n            COLLECTIVE_MINIMUM_ADMINS {\n              numberOfAdmins\n              applies\n              freeze\n            }\n          }\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query Dashboard($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      createdAt\n      slug\n      name\n      isHost\n      type\n      settings\n      isArchived\n      isActive\n      isIncognito\n      imageUrl(height: 256)\n      canHaveChangelogUpdates\n      connectedAccounts {\n        id\n        service\n      }\n      duplicatedAccounts {\n        totalCount\n      }\n      pendingExpenses: expenses(status: PENDING, direction: RECEIVED, includeChildrenExpenses: true, limit: 0) {\n        totalCount\n      }\n      pausedIncomingContributions: orders(filter: INCOMING, status: PAUSED, includeIncognito: true) {\n        totalCount\n      }\n      pausedOutgoingContributions: orders(filter: OUTGOING, status: PAUSED, includeIncognito: true) {\n        totalCount\n      }\n      ... on AccountWithContributions {\n        canStartResumeContributionsProcess\n        hasResumeContributionsProcessStarted\n      }\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          slug\n          name\n          type\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n        VIRTUAL_CARDS\n        USE_PAYMENT_METHODS\n        EMIT_GIFT_CARDS\n      }\n      policies {\n        id\n        REQUIRE_2FA_FOR_ADMINS\n      }\n      ... on Organization {\n        host {\n          id\n          requiredLegalDocuments\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          policies {\n            id\n            REQUIRE_2FA_FOR_ADMINS\n          }\n        }\n      }\n      ... on AccountWithHost {\n        hostFeePercent\n        isApproved\n        host {\n          id\n          requiredLegalDocuments\n          legacyId\n          slug\n          name\n          settings\n          policies {\n            id\n            EXPENSE_AUTHOR_CANNOT_APPROVE {\n              enabled\n              amountInCents\n              appliesToHostedCollectives\n              appliesToSingleAdminCollectives\n            }\n            COLLECTIVE_MINIMUM_ADMINS {\n              numberOfAdmins\n              applies\n              freeze\n            }\n          }\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DashboardContributorsMetadata($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      currency\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      ALL: members(role: [BACKER, FOLLOWER]) {\n        totalCount\n      }\n      FOLLOWERS: members(role: [FOLLOWER]) {\n        totalCount\n      }\n      BACKERS: members(role: [BACKER]) {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query DashboardContributorsMetadata($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      currency\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      ALL: members(role: [BACKER, FOLLOWER]) {\n        totalCount\n      }\n      FOLLOWERS: members(role: [FOLLOWER]) {\n        totalCount\n      }\n      BACKERS: members(role: [BACKER]) {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DashboardContributors(\n    $slug: String!\n    $offset: Int\n    $limit: Int\n    $role: [MemberRole!]\n    $orderBy: ChronologicalOrderInput\n    $email: EmailAddress\n  ) {\n    account(slug: $slug) {\n      id\n      members(role: $role, offset: $offset, limit: $limit, orderBy: $orderBy, email: $email) {\n        totalCount\n        nodes {\n          id\n          role\n          tier {\n            id\n            name\n          }\n          account {\n            id\n            slug\n            name\n          }\n          totalDonations {\n            currency\n            valueInCents\n          }\n          publicMessage\n          description\n          since\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query DashboardContributors(\n    $slug: String!\n    $offset: Int\n    $limit: Int\n    $role: [MemberRole!]\n    $orderBy: ChronologicalOrderInput\n    $email: EmailAddress\n  ) {\n    account(slug: $slug) {\n      id\n      members(role: $role, offset: $offset, limit: $limit, orderBy: $orderBy, email: $email) {\n        totalCount\n        nodes {\n          id\n          role\n          tier {\n            id\n            name\n          }\n          account {\n            id\n            slug\n            name\n          }\n          totalDonations {\n            currency\n            valueInCents\n          }\n          publicMessage\n          description\n          since\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostAgreements($hostSlug: String!, $limit: Int!, $offset: Int!, $account: [AccountReferenceInput]) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      hostedAccountAgreements(limit: $limit, offset: $offset, accounts: $account) {\n        totalCount\n        nodes {\n          id\n          ...AgreementViewFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query HostAgreements($hostSlug: String!, $limit: Int!, $offset: Int!, $account: [AccountReferenceInput]) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      hostedAccountAgreements(limit: $limit, offset: $offset, accounts: $account) {\n        totalCount\n        nodes {\n          id\n          ...AgreementViewFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostVirtualCardRequestsMetaData($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n    }\n    pending: virtualCardRequests(host: { slug: $hostSlug }, status: [PENDING], limit: 0, offset: 0) {\n      totalCount\n    }\n    approved: virtualCardRequests(host: { slug: $hostSlug }, status: [APPROVED], limit: 0, offset: 0) {\n      totalCount\n    }\n    rejected: virtualCardRequests(host: { slug: $hostSlug }, status: [REJECTED], limit: 0, offset: 0) {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query HostVirtualCardRequestsMetaData($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n    }\n    pending: virtualCardRequests(host: { slug: $hostSlug }, status: [PENDING], limit: 0, offset: 0) {\n      totalCount\n    }\n    approved: virtualCardRequests(host: { slug: $hostSlug }, status: [APPROVED], limit: 0, offset: 0) {\n      totalCount\n    }\n    rejected: virtualCardRequests(host: { slug: $hostSlug }, status: [REJECTED], limit: 0, offset: 0) {\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostVirtualCardRequests(\n    $hostSlug: String!\n    $account: [AccountReferenceInput]\n    $status: [VirtualCardRequestStatus]\n    $limit: Int!\n    $offset: Int!\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n    }\n    virtualCardRequests(\n      host: { slug: $hostSlug }\n      collective: $account\n      status: $status\n      limit: $limit\n      offset: $offset\n    ) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        purpose\n        notes\n        status\n        currency\n        spendingLimitAmount {\n          valueInCents\n          currency\n        }\n        spendingLimitInterval\n        createdAt\n        account {\n          id\n          name\n          slug\n          imageUrl\n          ...AccountHoverCardFields\n        }\n        host {\n          id\n          name\n          slug\n          imageUrl\n        }\n        assignee {\n          id\n          name\n          email\n          slug\n          imageUrl\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query HostVirtualCardRequests(\n    $hostSlug: String!\n    $account: [AccountReferenceInput]\n    $status: [VirtualCardRequestStatus]\n    $limit: Int!\n    $offset: Int!\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n    }\n    virtualCardRequests(\n      host: { slug: $hostSlug }\n      collective: $account\n      status: $status\n      limit: $limit\n      offset: $offset\n    ) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        purpose\n        notes\n        status\n        currency\n        spendingLimitAmount {\n          valueInCents\n          currency\n        }\n        spendingLimitInterval\n        createdAt\n        account {\n          id\n          name\n          slug\n          imageUrl\n          ...AccountHoverCardFields\n        }\n        host {\n          id\n          name\n          slug\n          imageUrl\n        }\n        assignee {\n          id\n          name\n          email\n          slug\n          imageUrl\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostedVirtualCardAccounts($slug: String) {\n    host(slug: $slug) {\n      id\n      hostedVirtualCardCollectives(limit: 500) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query HostedVirtualCardAccounts($slug: String) {\n    host(slug: $slug) {\n      id\n      hostedVirtualCardCollectives(limit: 500) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostedVirtualCardsMetaData($slug: String) {\n    host(slug: $slug) {\n      id\n      slug\n      currency\n      active: hostedVirtualCards(status: [ACTIVE], limit: 0) {\n        totalCount\n      }\n      inactive: hostedVirtualCards(status: [INACTIVE], limit: 0) {\n        totalCount\n      }\n      canceled: hostedVirtualCards(status: [CANCELED], limit: 0) {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query HostedVirtualCardsMetaData($slug: String) {\n    host(slug: $slug) {\n      id\n      slug\n      currency\n      active: hostedVirtualCards(status: [ACTIVE], limit: 0) {\n        totalCount\n      }\n      inactive: hostedVirtualCards(status: [INACTIVE], limit: 0) {\n        totalCount\n      }\n      canceled: hostedVirtualCards(status: [CANCELED], limit: 0) {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostedVirtualCards(\n    $slug: String\n    $limit: Int!\n    $offset: Int!\n    $account: [AccountReferenceInput]\n    $status: [VirtualCardStatus]\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $amountFrom: AmountInput\n    $amountTo: AmountInput\n    $hasMissingReceipts: Boolean\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n  ) {\n    host(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      imageUrl\n      currency\n      settings\n      stripe {\n        username\n      }\n      hostedVirtualCards(\n        limit: $limit\n        offset: $offset\n        collectiveAccountIds: $account\n        status: $status\n        withExpensesDateFrom: $dateFrom\n        withExpensesDateTo: $dateTo\n        spentAmountFrom: $amountFrom\n        spentAmountTo: $amountTo\n        hasMissingReceipts: $hasMissingReceipts\n        searchTerm: $searchTerm\n        orderBy: $orderBy\n      ) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          name\n          last4\n          data\n          status\n          privateData\n          provider\n          spendingLimitAmount\n          spendingLimitInterval\n          spendingLimitRenewsOn\n          remainingLimit\n          currency\n          createdAt\n          account {\n            id\n            name\n            slug\n            imageUrl\n            ...AccountHoverCardFields\n          }\n          assignee {\n            id\n            name\n            email\n            slug\n            imageUrl\n            ...AccountHoverCardFields\n          }\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query HostedVirtualCards(\n    $slug: String\n    $limit: Int!\n    $offset: Int!\n    $account: [AccountReferenceInput]\n    $status: [VirtualCardStatus]\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $amountFrom: AmountInput\n    $amountTo: AmountInput\n    $hasMissingReceipts: Boolean\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n  ) {\n    host(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      imageUrl\n      currency\n      settings\n      stripe {\n        username\n      }\n      hostedVirtualCards(\n        limit: $limit\n        offset: $offset\n        collectiveAccountIds: $account\n        status: $status\n        withExpensesDateFrom: $dateFrom\n        withExpensesDateTo: $dateTo\n        spentAmountFrom: $amountFrom\n        spentAmountTo: $amountTo\n        hasMissingReceipts: $hasMissingReceipts\n        searchTerm: $searchTerm\n        orderBy: $orderBy\n      ) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          name\n          last4\n          data\n          status\n          privateData\n          provider\n          spendingLimitAmount\n          spendingLimitInterval\n          spendingLimitRenewsOn\n          remainingLimit\n          currency\n          createdAt\n          account {\n            id\n            name\n            slug\n            imageUrl\n            ...AccountHoverCardFields\n          }\n          assignee {\n            id\n            name\n            email\n            slug\n            imageUrl\n            ...AccountHoverCardFields\n          }\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment HostFields on Host {\n    id\n    name\n    legalName\n    slug\n    type\n    expensePolicy\n    settings\n    currency\n    requiredLegalDocuments\n    features {\n      id\n      MULTI_CURRENCY_EXPENSES\n    }\n    location {\n      id\n      address\n      country\n    }\n    transferwise {\n      id\n      availableCurrencies\n    }\n    supportedPayoutMethods\n    isTrustedHost\n    vendors(searchTerm: $searchTerm, isArchived: $isArchived, limit: $limit, offset: $offset)\n      @skip(if: $includePotentialVendors) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...VendorFields\n      }\n    }\n    potentialVendors @include(if: $includePotentialVendors) {\n      nodes {\n        id\n        slug\n        name\n        type\n        description\n        tags\n        imageUrl(height: 96)\n        isArchived\n        createdAt\n      }\n    }\n  }\n\n  query DashboardVendors(\n    $slug: String!\n    $searchTerm: String\n    $isArchived: Boolean\n    $includePotentialVendors: Boolean!\n    $limit: Int\n    $offset: Int\n  ) {\n    account(slug: $slug) {\n      id\n      ... on AccountWithHost {\n        host {\n          id\n          ...HostFields\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          ...HostFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment HostFields on Host {\n    id\n    name\n    legalName\n    slug\n    type\n    expensePolicy\n    settings\n    currency\n    requiredLegalDocuments\n    features {\n      id\n      MULTI_CURRENCY_EXPENSES\n    }\n    location {\n      id\n      address\n      country\n    }\n    transferwise {\n      id\n      availableCurrencies\n    }\n    supportedPayoutMethods\n    isTrustedHost\n    vendors(searchTerm: $searchTerm, isArchived: $isArchived, limit: $limit, offset: $offset)\n      @skip(if: $includePotentialVendors) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...VendorFields\n      }\n    }\n    potentialVendors @include(if: $includePotentialVendors) {\n      nodes {\n        id\n        slug\n        name\n        type\n        description\n        tags\n        imageUrl(height: 96)\n        isArchived\n        createdAt\n      }\n    }\n  }\n\n  query DashboardVendors(\n    $slug: String!\n    $searchTerm: String\n    $isArchived: Boolean\n    $includePotentialVendors: Boolean!\n    $limit: Int\n    $offset: Int\n  ) {\n    account(slug: $slug) {\n      id\n      ... on AccountWithHost {\n        host {\n          id\n          ...HostFields\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          ...HostFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query AccountingCategoryTable($hostSlug: String!) {\n        host(slug: $hostSlug) {\n          id\n          type\n        }\n      }\n    "): (typeof documents)["\n      query AccountingCategoryTable($hostSlug: String!) {\n        host(slug: $hostSlug) {\n          id\n          type\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AdminAccountingCategories($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      type\n      slug\n      accountingCategories {\n        totalCount\n        nodes {\n          id\n          kind\n          code\n          hostOnly\n          instructions\n          name\n          friendlyName\n          expensesTypes\n          createdAt\n          appliesTo\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AdminAccountingCategories($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      type\n      slug\n      accountingCategories {\n        totalCount\n        nodes {\n          id\n          kind\n          code\n          hostOnly\n          instructions\n          name\n          friendlyName\n          expensesTypes\n          createdAt\n          appliesTo\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditAccountingCategories($hostSlug: String!, $categories: [AccountingCategoryInput!]!) {\n    editAccountingCategories(account: { slug: $hostSlug }, categories: $categories) {\n      id\n      ... on Organization {\n        host {\n          id\n          slug\n          accountingCategories {\n            totalCount\n            nodes {\n              id\n              kind\n              code\n              name\n              hostOnly\n              instructions\n              friendlyName\n              expensesTypes\n              createdAt\n              appliesTo\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation EditAccountingCategories($hostSlug: String!, $categories: [AccountingCategoryInput!]!) {\n    editAccountingCategories(account: { slug: $hostSlug }, categories: $categories) {\n      id\n      ... on Organization {\n        host {\n          id\n          slug\n          accountingCategories {\n            totalCount\n            nodes {\n              id\n              kind\n              code\n              name\n              hostOnly\n              instructions\n              friendlyName\n              expensesTypes\n              createdAt\n              appliesTo\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation InternalTransfer($order: OrderCreateInput!) {\n    createOrder(order: $order) {\n      order {\n        id\n        fromAccount {\n          id\n          stats {\n            id\n            balance {\n              valueInCents\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation InternalTransfer($order: OrderCreateInput!) {\n    createOrder(order: $order) {\n      order {\n        id\n        fromAccount {\n          id\n          stats {\n            id\n            balance {\n              valueInCents\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DashboardAccountsQueryFields on Account {\n    id\n    legacyId\n    name\n    slug\n    type\n    currency\n    imageUrl(height: 96)\n    isFrozen\n    isActive\n    isHost\n    tags\n    settings\n    createdAt\n    stats {\n      id\n      balance {\n        valueInCents\n        currency\n      }\n      totalAmountSpent {\n        valueInCents\n        currency\n      }\n      totalAmountReceived {\n        valueInCents\n        currency\n      }\n    }\n    paymentMethods(service: OPENCOLLECTIVE, type: COLLECTIVE) {\n      id\n      service\n      name\n    }\n  }\n"): (typeof documents)["\n  fragment DashboardAccountsQueryFields on Account {\n    id\n    legacyId\n    name\n    slug\n    type\n    currency\n    imageUrl(height: 96)\n    isFrozen\n    isActive\n    isHost\n    tags\n    settings\n    createdAt\n    stats {\n      id\n      balance {\n        valueInCents\n        currency\n      }\n      totalAmountSpent {\n        valueInCents\n        currency\n      }\n      totalAmountReceived {\n        valueInCents\n        currency\n      }\n    }\n    paymentMethods(service: OPENCOLLECTIVE, type: COLLECTIVE) {\n      id\n      service\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccountsDashboardMetadata($accountSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      isActive\n      isArchived\n      all: childrenAccounts(limit: 1) {\n        totalCount\n      }\n      active: childrenAccounts(limit: 1, isActive: true) {\n        totalCount\n      }\n      archived: childrenAccounts(limit: 1, isActive: false) {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query AccountsDashboardMetadata($accountSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      isActive\n      isArchived\n      all: childrenAccounts(limit: 1) {\n        totalCount\n      }\n      active: childrenAccounts(limit: 1, isActive: true) {\n        totalCount\n      }\n      archived: childrenAccounts(limit: 1, isActive: false) {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccountsDashboard($accountSlug: String!, $limit: Int!, $offset: Int!, $isActive: Boolean) {\n    account(slug: $accountSlug) {\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      type\n      settings\n      ...DashboardAccountsQueryFields\n      stats {\n        id\n        consolidatedBalance {\n          valueInCents\n          currency\n        }\n      }\n      childrenAccounts(limit: $limit, offset: $offset, isActive: $isActive) {\n        totalCount\n        nodes {\n          id\n          ...DashboardAccountsQueryFields\n        }\n      }\n    }\n  }\n\n  \n"): (typeof documents)["\n  query AccountsDashboard($accountSlug: String!, $limit: Int!, $offset: Int!, $isActive: Boolean) {\n    account(slug: $accountSlug) {\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      type\n      settings\n      ...DashboardAccountsQueryFields\n      stats {\n        id\n        consolidatedBalance {\n          valueInCents\n          currency\n        }\n      }\n      childrenAccounts(limit: $limit, offset: $offset, isActive: $isActive) {\n        totalCount\n        nodes {\n          id\n          ...DashboardAccountsQueryFields\n        }\n      }\n    }\n  }\n\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostedAccountDetail($id: String!) {\n    account(id: $id) {\n      ...DashboardAccountsQueryFields\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      type\n      settings\n      ... on AccountWithParent {\n        parent {\n          id\n        }\n      }\n      stats {\n        id\n        consolidatedBalance {\n          valueInCents\n          currency\n        }\n      }\n      members(role: [ADMIN]) {\n        nodes {\n          id\n          account {\n            id\n            ...AccountHoverCardFields\n            emails\n          }\n        }\n      }\n      transactions(limit: 10, offset: 0, kind: [ADDED_FUNDS, CONTRIBUTION, EXPENSE]) {\n        nodes {\n          id\n          clearedAt\n          createdAt\n          type\n          kind\n          description\n          isRefund\n          isRefunded\n          isInReview\n          isDisputed\n          isOrderRejected\n          amount {\n            valueInCents\n            currency\n          }\n          netAmount {\n            valueInCents\n            currency\n          }\n          oppositeAccount {\n            id\n            slug\n            name\n            imageUrl\n          }\n        }\n      }\n    }\n    activities(account: { id: $id }, limit: 5, offset: 0, type: [COLLECTIVE]) {\n      nodes {\n        id\n        type\n        createdAt\n        data\n        isSystem\n        account {\n          id\n          slug\n          name\n          imageUrl\n        }\n        fromAccount {\n          id\n          slug\n          name\n          imageUrl\n        }\n        individual {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n  }\n\n  \n  \n"): (typeof documents)["\n  query HostedAccountDetail($id: String!) {\n    account(id: $id) {\n      ...DashboardAccountsQueryFields\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      type\n      settings\n      ... on AccountWithParent {\n        parent {\n          id\n        }\n      }\n      stats {\n        id\n        consolidatedBalance {\n          valueInCents\n          currency\n        }\n      }\n      members(role: [ADMIN]) {\n        nodes {\n          id\n          account {\n            id\n            ...AccountHoverCardFields\n            emails\n          }\n        }\n      }\n      transactions(limit: 10, offset: 0, kind: [ADDED_FUNDS, CONTRIBUTION, EXPENSE]) {\n        nodes {\n          id\n          clearedAt\n          createdAt\n          type\n          kind\n          description\n          isRefund\n          isRefunded\n          isInReview\n          isDisputed\n          isOrderRejected\n          amount {\n            valueInCents\n            currency\n          }\n          netAmount {\n            valueInCents\n            currency\n          }\n          oppositeAccount {\n            id\n            slug\n            name\n            imageUrl\n          }\n        }\n      }\n    }\n    activities(account: { id: $id }, limit: 5, offset: 0, type: [COLLECTIVE]) {\n      nodes {\n        id\n        type\n        createdAt\n        data\n        isSystem\n        account {\n          id\n          slug\n          name\n          imageUrl\n        }\n        fromAccount {\n          id\n          slug\n          name\n          imageUrl\n        }\n        individual {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n  }\n\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AddFundsOrderFields on Order {\n    id\n    description\n    memo\n    processedAt\n    hostFeePercent\n    totalAmount {\n      valueInCents\n    }\n    paymentProcessorFee {\n      valueInCents\n    }\n    taxAmount {\n      valueInCents\n    }\n    transactions {\n      id\n      type\n      kind\n      amount {\n        valueInCents\n      }\n    }\n    fromAccount {\n      id\n      slug\n      name\n    }\n    toAccount {\n      id\n      slug\n      name\n      stats {\n        id\n        balance {\n          valueInCents\n        }\n      }\n    }\n    accountingCategory {\n      id\n      code\n      name\n      kind\n    }\n    tier {\n      id\n      legacyId\n      slug\n      name\n    }\n  }\n"): (typeof documents)["\n  fragment AddFundsOrderFields on Order {\n    id\n    description\n    memo\n    processedAt\n    hostFeePercent\n    totalAmount {\n      valueInCents\n    }\n    paymentProcessorFee {\n      valueInCents\n    }\n    taxAmount {\n      valueInCents\n    }\n    transactions {\n      id\n      type\n      kind\n      amount {\n        valueInCents\n      }\n    }\n    fromAccount {\n      id\n      slug\n      name\n    }\n    toAccount {\n      id\n      slug\n      name\n      stats {\n        id\n        balance {\n          valueInCents\n        }\n      }\n    }\n    accountingCategory {\n      id\n      code\n      name\n      kind\n    }\n    tier {\n      id\n      legacyId\n      slug\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddFunds(\n    $fromAccount: AccountReferenceInput!\n    $account: AccountReferenceInput!\n    $tier: TierReferenceInput\n    $amount: AmountInput!\n    $paymentProcessorFee: AmountInput\n    $description: String!\n    $memo: String\n    $processedAt: DateTime\n    $hostFeePercent: Float!\n    $invoiceTemplate: String\n    $tax: TaxInput\n    $accountingCategory: AccountingCategoryReferenceInput\n    $transactionsImportRow: TransactionsImportRowReferenceInput\n  ) {\n    addFunds(\n      account: $account\n      fromAccount: $fromAccount\n      amount: $amount\n      paymentProcessorFee: $paymentProcessorFee\n      description: $description\n      memo: $memo\n      processedAt: $processedAt\n      hostFeePercent: $hostFeePercent\n      tier: $tier\n      invoiceTemplate: $invoiceTemplate\n      tax: $tax\n      accountingCategory: $accountingCategory\n      transactionsImportRow: $transactionsImportRow\n    ) {\n      id\n      ...AddFundsOrderFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation AddFunds(\n    $fromAccount: AccountReferenceInput!\n    $account: AccountReferenceInput!\n    $tier: TierReferenceInput\n    $amount: AmountInput!\n    $paymentProcessorFee: AmountInput\n    $description: String!\n    $memo: String\n    $processedAt: DateTime\n    $hostFeePercent: Float!\n    $invoiceTemplate: String\n    $tax: TaxInput\n    $accountingCategory: AccountingCategoryReferenceInput\n    $transactionsImportRow: TransactionsImportRowReferenceInput\n  ) {\n    addFunds(\n      account: $account\n      fromAccount: $fromAccount\n      amount: $amount\n      paymentProcessorFee: $paymentProcessorFee\n      description: $description\n      memo: $memo\n      processedAt: $processedAt\n      hostFeePercent: $hostFeePercent\n      tier: $tier\n      invoiceTemplate: $invoiceTemplate\n      tax: $tax\n      accountingCategory: $accountingCategory\n      transactionsImportRow: $transactionsImportRow\n    ) {\n      id\n      ...AddFundsOrderFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditAddedFunds(\n    $order: OrderReferenceInput!\n    $fromAccount: AccountReferenceInput!\n    $account: AccountReferenceInput!\n    $tier: TierReferenceInput\n    $amount: AmountInput!\n    $paymentProcessorFee: AmountInput\n    $description: String!\n    $memo: String\n    $processedAt: DateTime\n    $hostFeePercent: Float!\n    $invoiceTemplate: String\n    $tax: TaxInput\n    $accountingCategory: AccountingCategoryReferenceInput\n  ) {\n    editAddedFunds(\n      order: $order\n      account: $account\n      fromAccount: $fromAccount\n      amount: $amount\n      paymentProcessorFee: $paymentProcessorFee\n      description: $description\n      memo: $memo\n      processedAt: $processedAt\n      hostFeePercent: $hostFeePercent\n      tier: $tier\n      invoiceTemplate: $invoiceTemplate\n      tax: $tax\n      accountingCategory: $accountingCategory\n    ) {\n      id\n      ...AddFundsOrderFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation EditAddedFunds(\n    $order: OrderReferenceInput!\n    $fromAccount: AccountReferenceInput!\n    $account: AccountReferenceInput!\n    $tier: TierReferenceInput\n    $amount: AmountInput!\n    $paymentProcessorFee: AmountInput\n    $description: String!\n    $memo: String\n    $processedAt: DateTime\n    $hostFeePercent: Float!\n    $invoiceTemplate: String\n    $tax: TaxInput\n    $accountingCategory: AccountingCategoryReferenceInput\n  ) {\n    editAddedFunds(\n      order: $order\n      account: $account\n      fromAccount: $fromAccount\n      amount: $amount\n      paymentProcessorFee: $paymentProcessorFee\n      description: $description\n      memo: $memo\n      processedAt: $processedAt\n      hostFeePercent: $hostFeePercent\n      tier: $tier\n      invoiceTemplate: $invoiceTemplate\n      tax: $tax\n      accountingCategory: $accountingCategory\n    ) {\n      id\n      ...AddFundsOrderFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AddFundsTierFields on Tier {\n    id\n    slug\n    legacyId\n    name\n  }\n"): (typeof documents)["\n  fragment AddFundsTierFields on Tier {\n    id\n    slug\n    legacyId\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AddFundsAccountQueryHostFields on Host {\n    id\n    type\n    legacyId\n    slug\n    name\n    settings\n    plan {\n      id\n      hostFees\n    }\n    policies {\n      id\n      REQUIRE_2FA_FOR_ADMINS\n    }\n    isTrustedHost\n    vendors(forAccount: { slug: $slug }) {\n      nodes {\n        id\n        slug\n        name\n        type\n        description\n        imageUrl(height: 64)\n      }\n    }\n    orderAccountingCategories: accountingCategories(kind: [CONTRIBUTION, ADDED_FUNDS]) {\n      nodes {\n        id\n        code\n        name\n        kind\n        appliesTo\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AddFundsAccountQueryHostFields on Host {\n    id\n    type\n    legacyId\n    slug\n    name\n    settings\n    plan {\n      id\n      hostFees\n    }\n    policies {\n      id\n      REQUIRE_2FA_FOR_ADMINS\n    }\n    isTrustedHost\n    vendors(forAccount: { slug: $slug }) {\n      nodes {\n        id\n        slug\n        name\n        type\n        description\n        imageUrl(height: 64)\n      }\n    }\n    orderAccountingCategories: accountingCategories(kind: [CONTRIBUTION, ADDED_FUNDS]) {\n      nodes {\n        id\n        code\n        name\n        kind\n        appliesTo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AddFundsAccount($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      type\n      isHost\n      name\n      slug\n      currency\n      settings\n      ... on Organization {\n        tiers {\n          nodes {\n            id\n            ...AddFundsTierFields\n          }\n        }\n        host {\n          ...AddFundsAccountQueryHostFields\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          imageUrl\n          type\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          slug\n          name\n          imageUrl\n          type\n        }\n      }\n      ... on Host {\n        ...AddFundsAccountQueryHostFields\n      }\n      ... on AccountWithHost {\n        addedFundsHostFeePercent: hostFeePercent(paymentMethodType: HOST)\n        host {\n          ...AddFundsAccountQueryHostFields\n        }\n      }\n      ... on AccountWithContributions {\n        tiers {\n          nodes {\n            id\n            ...AddFundsTierFields\n          }\n        }\n      }\n    }\n  }\n  \n  \n"): (typeof documents)["\n  query AddFundsAccount($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      type\n      isHost\n      name\n      slug\n      currency\n      settings\n      ... on Organization {\n        tiers {\n          nodes {\n            id\n            ...AddFundsTierFields\n          }\n        }\n        host {\n          ...AddFundsAccountQueryHostFields\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          imageUrl\n          type\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          slug\n          name\n          imageUrl\n          type\n        }\n      }\n      ... on Host {\n        ...AddFundsAccountQueryHostFields\n      }\n      ... on AccountWithHost {\n        addedFundsHostFeePercent: hostFeePercent(paymentMethodType: HOST)\n        host {\n          ...AddFundsAccountQueryHostFields\n        }\n      }\n      ... on AccountWithContributions {\n        tiers {\n          nodes {\n            id\n            ...AddFundsTierFields\n          }\n        }\n      }\n    }\n  }\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditAccountFee($account: AccountReferenceInput!, $hostFeePercent: Float!, $isCustomFee: Boolean!) {\n    editAccountFeeStructure(account: $account, hostFeePercent: $hostFeePercent, isCustomFee: $isCustomFee) {\n      id\n      ... on AccountWithHost {\n        hostFeesStructure\n        hostFeePercent\n      }\n      childrenAccounts {\n        nodes {\n          id\n          ... on AccountWithHost {\n            hostFeesStructure\n            hostFeePercent\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation EditAccountFee($account: AccountReferenceInput!, $hostFeePercent: Float!, $isCustomFee: Boolean!) {\n    editAccountFeeStructure(account: $account, hostFeePercent: $hostFeePercent, isCustomFee: $isCustomFee) {\n      id\n      ... on AccountWithHost {\n        hostFeesStructure\n        hostFeePercent\n      }\n      childrenAccounts {\n        nodes {\n          id\n          ... on AccountWithHost {\n            hostFeesStructure\n            hostFeePercent\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation UpdateCollectiveAdminsCanSeePayoutMethodPolicy($account: AccountReferenceInput!, $value: Boolean!) {\n        setPolicies(account: $account, policies: { COLLECTIVE_ADMINS_CAN_SEE_PAYOUT_METHODS: $value }) {\n          id\n          policies {\n            id\n            COLLECTIVE_ADMINS_CAN_SEE_PAYOUT_METHODS\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation UpdateCollectiveAdminsCanSeePayoutMethodPolicy($account: AccountReferenceInput!, $value: Boolean!) {\n        setPolicies(account: $account, policies: { COLLECTIVE_ADMINS_CAN_SEE_PAYOUT_METHODS: $value }) {\n          id\n          policies {\n            id\n            COLLECTIVE_ADMINS_CAN_SEE_PAYOUT_METHODS\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DisputedContributionsWarning($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      slug\n      hasDisputedOrders\n      hasInReviewOrders\n    }\n  }\n"): (typeof documents)["\n  query DisputedContributionsWarning($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      slug\n      hasDisputedOrders\n      hasInReviewOrders\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditAccountFreezeStatus(\n    $account: AccountReferenceInput!\n    $action: AccountFreezeAction!\n    $pauseExistingRecurringContributions: Boolean!\n    $messageForAccountAdmins: String\n    $messageForContributors: String\n  ) {\n    editAccountFreezeStatus(\n      account: $account\n      action: $action\n      messageForAccountAdmins: $messageForAccountAdmins\n      messageForContributors: $messageForContributors\n      pauseExistingRecurringContributions: $pauseExistingRecurringContributions\n    ) {\n      id\n      isFrozen\n      childrenAccounts {\n        nodes {\n          id\n          isFrozen\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation EditAccountFreezeStatus(\n    $account: AccountReferenceInput!\n    $action: AccountFreezeAction!\n    $pauseExistingRecurringContributions: Boolean!\n    $messageForAccountAdmins: String\n    $messageForContributors: String\n  ) {\n    editAccountFreezeStatus(\n      account: $account\n      action: $action\n      messageForAccountAdmins: $messageForAccountAdmins\n      messageForContributors: $messageForContributors\n      pauseExistingRecurringContributions: $pauseExistingRecurringContributions\n    ) {\n      id\n      isFrozen\n      childrenAccounts {\n        nodes {\n          id\n          isFrozen\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FreezeAccountModal($accountId: String!) {\n    account(id: $accountId) {\n      id\n      name\n      slug\n      isFrozen\n      imageUrl(height: 64)\n      ...AccountSubscriptionsInfo\n      childrenAccounts {\n        nodes {\n          ...AccountSubscriptionsInfo\n        }\n      }\n    }\n  }\n  fragment AccountSubscriptionsInfo on Account {\n    stats {\n      activeRecurringContributionsBreakdown {\n        count\n      }\n    }\n    activePayPalSubscriptionOrders: orders(\n      filter: INCOMING\n      onlyActiveSubscriptions: true\n      paymentMethodService: PAYPAL\n      paymentMethodType: SUBSCRIPTION\n    ) {\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query FreezeAccountModal($accountId: String!) {\n    account(id: $accountId) {\n      id\n      name\n      slug\n      isFrozen\n      imageUrl(height: 64)\n      ...AccountSubscriptionsInfo\n      childrenAccounts {\n        nodes {\n          ...AccountSubscriptionsInfo\n        }\n      }\n    }\n  }\n  fragment AccountSubscriptionsInfo on Account {\n    stats {\n      activeRecurringContributionsBreakdown {\n        count\n      }\n    }\n    activePayPalSubscriptionOrders: orders(\n      filter: INCOMING\n      onlyActiveSubscriptions: true\n      paymentMethodService: PAYPAL\n      paymentMethodType: SUBSCRIPTION\n    ) {\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query HostApplicationThread($hostApplication: HostApplicationReferenceInput!, $offset: Int!, $limit: Int!) {\n        hostApplication(hostApplication: $hostApplication) {\n          ...HostApplicationFields\n          threadComments: comments(limit: $limit, offset: $offset, orderBy: { field: CREATED_AT, direction: ASC }) {\n            totalCount\n            offset\n            limit\n            nodes {\n              ...CommentFields\n            }\n          }\n        }\n      }\n\n      \n      \n    "): (typeof documents)["\n      query HostApplicationThread($hostApplication: HostApplicationReferenceInput!, $offset: Int!, $limit: Int!) {\n        hostApplication(hostApplication: $hostApplication) {\n          ...HostApplicationFields\n          threadComments: comments(limit: $limit, offset: $offset, orderBy: { field: CREATED_AT, direction: ASC }) {\n            totalCount\n            offset\n            limit\n            nodes {\n              ...CommentFields\n            }\n          }\n        }\n      }\n\n      \n      \n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query HostApplicationRequests($accountSlug: String!, $limit: Int, $offset: Int) {\n        account(slug: $accountSlug) {\n          hostApplicationRequests(limit: $limit, offset: $offset) {\n            totalCount\n            nodes {\n              ...HostApplicationFields\n            }\n          }\n        }\n      }\n\n      \n    "): (typeof documents)["\n      query HostApplicationRequests($accountSlug: String!, $limit: Int, $offset: Int) {\n        account(slug: $accountSlug) {\n          hostApplicationRequests(limit: $limit, offset: $offset) {\n            totalCount\n            nodes {\n              ...HostApplicationFields\n            }\n          }\n        }\n      }\n\n      \n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment HostApplicationFields on HostApplication {\n    id\n    message\n    customData\n    status\n    createdAt\n    comments {\n      totalCount\n    }\n\n    host {\n      id\n      legacyId\n      name\n      slug\n      website\n      description\n      type\n      imageUrl\n      createdAt\n      policies {\n        id\n        COLLECTIVE_MINIMUM_ADMINS {\n          numberOfAdmins\n        }\n      }\n    }\n\n    account {\n      id\n      legacyId\n      name\n      slug\n      website\n      description\n      type\n      imageUrl\n      createdAt\n      ... on AccountWithHost {\n        isActive\n        approvedAt\n        isApproved\n        host {\n          id\n        }\n      }\n      memberInvitations(role: [ADMIN]) {\n        id\n        role\n      }\n      admins: members(role: ADMIN) {\n        totalCount\n        nodes {\n          id\n          account {\n            id\n            type\n            slug\n            name\n            imageUrl\n            ...AccountHoverCardFields\n            emails\n          }\n        }\n      }\n      ...AccountHoverCardFields\n    }\n  }\n\n  \n"): (typeof documents)["\n  fragment HostApplicationFields on HostApplication {\n    id\n    message\n    customData\n    status\n    createdAt\n    comments {\n      totalCount\n    }\n\n    host {\n      id\n      legacyId\n      name\n      slug\n      website\n      description\n      type\n      imageUrl\n      createdAt\n      policies {\n        id\n        COLLECTIVE_MINIMUM_ADMINS {\n          numberOfAdmins\n        }\n      }\n    }\n\n    account {\n      id\n      legacyId\n      name\n      slug\n      website\n      description\n      type\n      imageUrl\n      createdAt\n      ... on AccountWithHost {\n        isActive\n        approvedAt\n        isApproved\n        host {\n          id\n        }\n      }\n      memberInvitations(role: [ADMIN]) {\n        id\n        role\n      }\n      admins: members(role: ADMIN) {\n        totalCount\n        nodes {\n          id\n          account {\n            id\n            type\n            slug\n            name\n            imageUrl\n            ...AccountHoverCardFields\n            emails\n          }\n        }\n      }\n      ...AccountHoverCardFields\n    }\n  }\n\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProcessHostApplicationFields on AccountWithHost {\n    isActive\n    approvedAt\n    isApproved\n    host {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment ProcessHostApplicationFields on AccountWithHost {\n    isActive\n    approvedAt\n    isApproved\n    host {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostApplicationsMetadata($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      slug\n      name\n      type\n      settings\n      policies {\n        id\n        COLLECTIVE_MINIMUM_ADMINS {\n          numberOfAdmins\n        }\n      }\n\n      unreplied: hostApplications(limit: 0, offset: 0, lastCommentBy: COLLECTIVE_ADMIN) {\n        totalCount\n      }\n      pending: hostApplications(limit: 0, offset: 0, status: PENDING) {\n        totalCount\n      }\n      approved: hostApplications(limit: 0, offset: 0, status: APPROVED) {\n        totalCount\n      }\n      rejected: hostApplications(limit: 0, offset: 0, status: REJECTED) {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query HostApplicationsMetadata($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      slug\n      name\n      type\n      settings\n      policies {\n        id\n        COLLECTIVE_MINIMUM_ADMINS {\n          numberOfAdmins\n        }\n      }\n\n      unreplied: hostApplications(limit: 0, offset: 0, lastCommentBy: COLLECTIVE_ADMIN) {\n        totalCount\n      }\n      pending: hostApplications(limit: 0, offset: 0, status: PENDING) {\n        totalCount\n      }\n      approved: hostApplications(limit: 0, offset: 0, status: APPROVED) {\n        totalCount\n      }\n      rejected: hostApplications(limit: 0, offset: 0, status: REJECTED) {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostApplications(\n    $hostSlug: String!\n    $limit: Int\n    $offset: Int\n    $orderBy: ChronologicalOrderInput\n    $searchTerm: String\n    $status: HostApplicationStatus\n    $lastCommentBy: [LastCommentBy]\n  ) {\n    host(slug: $hostSlug) {\n      id\n\n      hostApplications(\n        limit: $limit\n        offset: $offset\n        orderBy: $orderBy\n        status: $status\n        searchTerm: $searchTerm\n        lastCommentBy: $lastCommentBy\n      ) {\n        offset\n        limit\n        totalCount\n        nodes {\n          ...HostApplicationFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query HostApplications(\n    $hostSlug: String!\n    $limit: Int\n    $offset: Int\n    $orderBy: ChronologicalOrderInput\n    $searchTerm: String\n    $status: HostApplicationStatus\n    $lastCommentBy: [LastCommentBy]\n  ) {\n    host(slug: $hostSlug) {\n      id\n\n      hostApplications(\n        limit: $limit\n        offset: $offset\n        orderBy: $orderBy\n        status: $status\n        searchTerm: $searchTerm\n        lastCommentBy: $lastCommentBy\n      ) {\n        offset\n        limit\n        totalCount\n        nodes {\n          ...HostApplicationFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ProcessHostApplication(\n    $host: AccountReferenceInput\n    $account: AccountReferenceInput\n    $hostApplication: HostApplicationReferenceInput\n    $action: ProcessHostApplicationAction!\n    $message: String\n  ) {\n    processHostApplication(\n      host: $host\n      account: $account\n      hostApplication: $hostApplication\n      action: $action\n      message: $message\n    ) {\n      account {\n        id\n        ... on AccountWithHost {\n          ...ProcessHostApplicationFields\n        }\n      }\n      conversation {\n        id\n        slug\n      }\n      hostApplication {\n        ...HostApplicationFields\n      }\n    }\n  }\n  \n  \n"): (typeof documents)["\n  mutation ProcessHostApplication(\n    $host: AccountReferenceInput\n    $account: AccountReferenceInput\n    $hostApplication: HostApplicationReferenceInput\n    $action: ProcessHostApplicationAction!\n    $message: String\n  ) {\n    processHostApplication(\n      host: $host\n      account: $account\n      hostApplication: $hostApplication\n      action: $action\n      message: $message\n    ) {\n      account {\n        id\n        ... on AccountWithHost {\n          ...ProcessHostApplicationFields\n        }\n      }\n      conversation {\n        id\n        slug\n      }\n      hostApplication {\n        ...HostApplicationFields\n      }\n    }\n  }\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment HostedCollectiveFields on Account {\n    id\n    legacyId\n    name\n    slug\n    website\n    type\n    currency\n    imageUrl(height: 96)\n    isFrozen\n    isHost\n    tags\n    settings\n    createdAt\n    stats {\n      id\n      balance {\n        valueInCents\n        currency\n      }\n      consolidatedBalance: balance(includeChildren: true) {\n        valueInCents\n        currency\n      }\n    }\n    policies {\n      id\n      COLLECTIVE_ADMINS_CAN_SEE_PAYOUT_METHODS\n    }\n    ... on AccountWithHost {\n      hostFeesStructure\n      hostFeePercent\n      approvedAt\n      hostAgreements {\n        totalCount\n        nodes {\n          id\n          title\n          attachment {\n            id\n            url\n            name\n            type\n          }\n        }\n      }\n      host {\n        id\n        legacyId\n        name\n        slug\n        imageUrl(height: 96)\n      }\n    }\n    ... on AccountWithContributions {\n      totalFinancialContributors\n    }\n    childrenAccounts {\n      nodes {\n        id\n        slug\n        name\n        type\n        stats {\n          id\n          balance {\n            valueInCents\n            currency\n          }\n        }\n        ... on AccountWithHost {\n          hostFeesStructure\n          hostFeePercent\n          approvedAt\n        }\n        members(role: [ADMIN]) {\n          nodes {\n            id\n            account {\n              id\n              ...AccountHoverCardFields\n              emails\n            }\n          }\n        }\n      }\n    }\n    members(role: [ADMIN]) {\n      nodes {\n        id\n        account {\n          id\n          ...AccountHoverCardFields\n          emails\n        }\n      }\n    }\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n        name\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment HostedCollectiveFields on Account {\n    id\n    legacyId\n    name\n    slug\n    website\n    type\n    currency\n    imageUrl(height: 96)\n    isFrozen\n    isHost\n    tags\n    settings\n    createdAt\n    stats {\n      id\n      balance {\n        valueInCents\n        currency\n      }\n      consolidatedBalance: balance(includeChildren: true) {\n        valueInCents\n        currency\n      }\n    }\n    policies {\n      id\n      COLLECTIVE_ADMINS_CAN_SEE_PAYOUT_METHODS\n    }\n    ... on AccountWithHost {\n      hostFeesStructure\n      hostFeePercent\n      approvedAt\n      hostAgreements {\n        totalCount\n        nodes {\n          id\n          title\n          attachment {\n            id\n            url\n            name\n            type\n          }\n        }\n      }\n      host {\n        id\n        legacyId\n        name\n        slug\n        imageUrl(height: 96)\n      }\n    }\n    ... on AccountWithContributions {\n      totalFinancialContributors\n    }\n    childrenAccounts {\n      nodes {\n        id\n        slug\n        name\n        type\n        stats {\n          id\n          balance {\n            valueInCents\n            currency\n          }\n        }\n        ... on AccountWithHost {\n          hostFeesStructure\n          hostFeePercent\n          approvedAt\n        }\n        members(role: [ADMIN]) {\n          nodes {\n            id\n            account {\n              id\n              ...AccountHoverCardFields\n              emails\n            }\n          }\n        }\n      }\n    }\n    members(role: [ADMIN]) {\n      nodes {\n        id\n        account {\n          id\n          ...AccountHoverCardFields\n          emails\n        }\n      }\n    }\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n        name\n        ...AccountHoverCardFields\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostedCollectivesMetadata($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      currency\n      all: hostedAccounts(limit: 1, accountType: [COLLECTIVE, FUND]) {\n        totalCount\n        currencies\n      }\n      active: hostedAccounts(limit: 1, accountType: [COLLECTIVE, FUND], isFrozen: false) {\n        totalCount\n      }\n      frozen: hostedAccounts(limit: 1, isFrozen: true) {\n        totalCount\n      }\n      unhosted: hostedAccounts(limit: 1, accountType: [COLLECTIVE, FUND], isUnhosted: true) {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query HostedCollectivesMetadata($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      currency\n      all: hostedAccounts(limit: 1, accountType: [COLLECTIVE, FUND]) {\n        totalCount\n        currencies\n      }\n      active: hostedAccounts(limit: 1, accountType: [COLLECTIVE, FUND], isFrozen: false) {\n        totalCount\n      }\n      frozen: hostedAccounts(limit: 1, isFrozen: true) {\n        totalCount\n      }\n      unhosted: hostedAccounts(limit: 1, accountType: [COLLECTIVE, FUND], isUnhosted: true) {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostedCollectives(\n    $hostSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $sort: OrderByInput\n    $hostFeesStructure: HostFeeStructure\n    $searchTerm: String\n    $type: [AccountType]\n    $isApproved: Boolean\n    $isFrozen: Boolean\n    $isUnhosted: Boolean\n    $balance: AmountRangeInput\n    $consolidatedBalance: AmountRangeInput\n    $currencies: [String]\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      type\n      settings\n      hostFeePercent\n      plan {\n        id\n        hostFees\n        hostFeeSharePercent\n      }\n      hostedAccounts(\n        limit: $limit\n        offset: $offset\n        searchTerm: $searchTerm\n        hostFeesStructure: $hostFeesStructure\n        accountType: $type\n        orderBy: $sort\n        isApproved: $isApproved\n        isFrozen: $isFrozen\n        isUnhosted: $isUnhosted\n        balance: $balance\n        consolidatedBalance: $consolidatedBalance\n        currencies: $currencies\n      ) {\n        offset\n        limit\n        totalCount\n        nodes {\n          id\n          ...HostedCollectiveFields\n        }\n      }\n    }\n  }\n\n  \n"): (typeof documents)["\n  query HostedCollectives(\n    $hostSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $sort: OrderByInput\n    $hostFeesStructure: HostFeeStructure\n    $searchTerm: String\n    $type: [AccountType]\n    $isApproved: Boolean\n    $isFrozen: Boolean\n    $isUnhosted: Boolean\n    $balance: AmountRangeInput\n    $consolidatedBalance: AmountRangeInput\n    $currencies: [String]\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      type\n      settings\n      hostFeePercent\n      plan {\n        id\n        hostFees\n        hostFeeSharePercent\n      }\n      hostedAccounts(\n        limit: $limit\n        offset: $offset\n        searchTerm: $searchTerm\n        hostFeesStructure: $hostFeesStructure\n        accountType: $type\n        orderBy: $sort\n        isApproved: $isApproved\n        isFrozen: $isFrozen\n        isUnhosted: $isUnhosted\n        balance: $balance\n        consolidatedBalance: $consolidatedBalance\n        currencies: $currencies\n      ) {\n        offset\n        limit\n        totalCount\n        nodes {\n          id\n          ...HostedCollectiveFields\n        }\n      }\n    }\n  }\n\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostedCollectiveDetail($id: String!) {\n    account(id: $id) {\n      id\n      ...HostedCollectiveFields\n      transactions(limit: 10, offset: 0, kind: [ADDED_FUNDS, CONTRIBUTION, EXPENSE]) {\n        nodes {\n          id\n          clearedAt\n          createdAt\n          type\n          kind\n          description\n          isRefund\n          isRefunded\n          isInReview\n          isDisputed\n          isOrderRejected\n          amount {\n            valueInCents\n            currency\n          }\n          netAmount {\n            valueInCents\n            currency\n          }\n          oppositeAccount {\n            id\n            slug\n            name\n            imageUrl\n          }\n        }\n      }\n    }\n    activities(account: { id: $id }, limit: 5, offset: 0, type: [COLLECTIVE]) {\n      nodes {\n        id\n        type\n        createdAt\n        data\n        isSystem\n        account {\n          id\n          slug\n          name\n          imageUrl\n        }\n        fromAccount {\n          id\n          slug\n          name\n          imageUrl\n        }\n        individual {\n          id\n          slug\n          name\n          imageUrl\n        }\n        host {\n          id\n          name\n          slug\n          type\n        }\n      }\n    }\n  }\n\n  \n"): (typeof documents)["\n  query HostedCollectiveDetail($id: String!) {\n    account(id: $id) {\n      id\n      ...HostedCollectiveFields\n      transactions(limit: 10, offset: 0, kind: [ADDED_FUNDS, CONTRIBUTION, EXPENSE]) {\n        nodes {\n          id\n          clearedAt\n          createdAt\n          type\n          kind\n          description\n          isRefund\n          isRefunded\n          isInReview\n          isDisputed\n          isOrderRejected\n          amount {\n            valueInCents\n            currency\n          }\n          netAmount {\n            valueInCents\n            currency\n          }\n          oppositeAccount {\n            id\n            slug\n            name\n            imageUrl\n          }\n        }\n      }\n    }\n    activities(account: { id: $id }, limit: 5, offset: 0, type: [COLLECTIVE]) {\n      nodes {\n        id\n        type\n        createdAt\n        data\n        isSystem\n        account {\n          id\n          slug\n          name\n          imageUrl\n        }\n        fromAccount {\n          id\n          slug\n          name\n          imageUrl\n        }\n        individual {\n          id\n          slug\n          name\n          imageUrl\n        }\n        host {\n          id\n          name\n          slug\n          type\n        }\n      }\n    }\n  }\n\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AllCollectives(\n    $limit: Int!\n    $offset: Int!\n    $sort: OrderByInput\n    $searchTerm: String\n    $type: [AccountType]\n    $isHost: Boolean\n    $host: [AccountReferenceInput]\n    $isActive: Boolean\n    $consolidatedBalance: AmountRangeInput\n  ) {\n    accounts(\n      limit: $limit\n      offset: $offset\n      searchTerm: $searchTerm\n      type: $type\n      orderBy: $sort\n      isHost: $isHost\n      isActive: $isActive\n      host: $host\n      consolidatedBalance: $consolidatedBalance\n      skipGuests: false\n    ) {\n      offset\n      limit\n      totalCount\n      nodes {\n        id\n        ...HostedCollectiveFields\n      }\n    }\n  }\n\n  \n"): (typeof documents)["\n  query AllCollectives(\n    $limit: Int!\n    $offset: Int!\n    $sort: OrderByInput\n    $searchTerm: String\n    $type: [AccountType]\n    $isHost: Boolean\n    $host: [AccountReferenceInput]\n    $isActive: Boolean\n    $consolidatedBalance: AmountRangeInput\n  ) {\n    accounts(\n      limit: $limit\n      offset: $offset\n      searchTerm: $searchTerm\n      type: $type\n      orderBy: $sort\n      isHost: $isHost\n      isActive: $isActive\n      host: $host\n      consolidatedBalance: $consolidatedBalance\n      skipGuests: false\n    ) {\n      offset\n      limit\n      totalCount\n      nodes {\n        id\n        ...HostedCollectiveFields\n      }\n    }\n  }\n\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DashboardContributionsMetadata(\n    $slug: String!\n    $filter: AccountOrdersFilter!\n    $onlyExpectedFunds: Boolean!\n    $expectedFundsFilter: ExpectedFundsFilter\n    $includeHostedAccounts: Boolean!\n    $includeChildrenAccounts: Boolean\n  ) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      currency\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          slug\n          name\n          ... on AccountWithContributions {\n            tiers {\n              nodes {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      ... on AccountWithContributions {\n        canStartResumeContributionsProcess\n        hasResumeContributionsProcessStarted\n        tiers {\n          nodes {\n            id\n            name\n          }\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          type\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          imageUrl\n          type\n          hostFeePercent\n        }\n      }\n\n      PENDING: orders(\n        filter: $filter\n        expectedFundsFilter: $expectedFundsFilter\n        status: [PENDING]\n        includeHostedAccounts: $includeHostedAccounts\n      ) @include(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      EXPIRED: orders(\n        filter: $filter\n        expectedFundsFilter: $expectedFundsFilter\n        status: [EXPIRED]\n        includeHostedAccounts: $includeHostedAccounts\n      ) @include(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      RECURRING: orders(\n        filter: $filter\n        frequency: [MONTHLY, YEARLY]\n        status: [ACTIVE, ERROR]\n        includeIncognito: true\n        includeHostedAccounts: $includeHostedAccounts\n        includeChildrenAccounts: $includeChildrenAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      PAID: orders(\n        filter: $filter\n        includeIncognito: true\n        status: [PAID]\n        includeHostedAccounts: $includeHostedAccounts\n        expectedFundsFilter: $expectedFundsFilter\n      ) @include(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      ONETIME: orders(\n        filter: $filter\n        frequency: [ONETIME]\n        status: [PAID, PROCESSING]\n        includeIncognito: true\n        minAmount: 1\n        includeHostedAccounts: $includeHostedAccounts\n        includeChildrenAccounts: $includeChildrenAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      CANCELED: orders(\n        filter: $filter\n        status: [CANCELLED]\n        includeIncognito: true\n        expectedFundsFilter: $expectedFundsFilter\n        includeHostedAccounts: $includeHostedAccounts\n        includeChildrenAccounts: $includeChildrenAccounts\n      ) {\n        totalCount\n      }\n      PAUSED: orders(\n        filter: $filter\n        status: [PAUSED]\n        includeIncognito: true\n        includeHostedAccounts: $includeHostedAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      PAUSED_RESUMABLE: orders(\n        filter: INCOMING\n        status: [PAUSED]\n        includeIncognito: true\n        includeHostedAccounts: false\n        includeChildrenAccounts: true\n        pausedBy: [COLLECTIVE, HOST, PLATFORM]\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      DISPUTED: orders(\n        filter: $filter\n        status: [DISPUTED]\n        includeIncognito: true\n        includeHostedAccounts: $includeHostedAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      IN_REVIEW: orders(\n        filter: $filter\n        status: [IN_REVIEW]\n        includeIncognito: true\n        includeHostedAccounts: $includeHostedAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query DashboardContributionsMetadata(\n    $slug: String!\n    $filter: AccountOrdersFilter!\n    $onlyExpectedFunds: Boolean!\n    $expectedFundsFilter: ExpectedFundsFilter\n    $includeHostedAccounts: Boolean!\n    $includeChildrenAccounts: Boolean\n  ) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      currency\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          slug\n          name\n          ... on AccountWithContributions {\n            tiers {\n              nodes {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      ... on AccountWithContributions {\n        canStartResumeContributionsProcess\n        hasResumeContributionsProcessStarted\n        tiers {\n          nodes {\n            id\n            name\n          }\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          type\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          imageUrl\n          type\n          hostFeePercent\n        }\n      }\n\n      PENDING: orders(\n        filter: $filter\n        expectedFundsFilter: $expectedFundsFilter\n        status: [PENDING]\n        includeHostedAccounts: $includeHostedAccounts\n      ) @include(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      EXPIRED: orders(\n        filter: $filter\n        expectedFundsFilter: $expectedFundsFilter\n        status: [EXPIRED]\n        includeHostedAccounts: $includeHostedAccounts\n      ) @include(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      RECURRING: orders(\n        filter: $filter\n        frequency: [MONTHLY, YEARLY]\n        status: [ACTIVE, ERROR]\n        includeIncognito: true\n        includeHostedAccounts: $includeHostedAccounts\n        includeChildrenAccounts: $includeChildrenAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      PAID: orders(\n        filter: $filter\n        includeIncognito: true\n        status: [PAID]\n        includeHostedAccounts: $includeHostedAccounts\n        expectedFundsFilter: $expectedFundsFilter\n      ) @include(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      ONETIME: orders(\n        filter: $filter\n        frequency: [ONETIME]\n        status: [PAID, PROCESSING]\n        includeIncognito: true\n        minAmount: 1\n        includeHostedAccounts: $includeHostedAccounts\n        includeChildrenAccounts: $includeChildrenAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      CANCELED: orders(\n        filter: $filter\n        status: [CANCELLED]\n        includeIncognito: true\n        expectedFundsFilter: $expectedFundsFilter\n        includeHostedAccounts: $includeHostedAccounts\n        includeChildrenAccounts: $includeChildrenAccounts\n      ) {\n        totalCount\n      }\n      PAUSED: orders(\n        filter: $filter\n        status: [PAUSED]\n        includeIncognito: true\n        includeHostedAccounts: $includeHostedAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      PAUSED_RESUMABLE: orders(\n        filter: INCOMING\n        status: [PAUSED]\n        includeIncognito: true\n        includeHostedAccounts: false\n        includeChildrenAccounts: true\n        pausedBy: [COLLECTIVE, HOST, PLATFORM]\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      DISPUTED: orders(\n        filter: $filter\n        status: [DISPUTED]\n        includeIncognito: true\n        includeHostedAccounts: $includeHostedAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n      IN_REVIEW: orders(\n        filter: $filter\n        status: [IN_REVIEW]\n        includeIncognito: true\n        includeHostedAccounts: $includeHostedAccounts\n      ) @skip(if: $onlyExpectedFunds) {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DashboardRecurringContributions(\n    $slug: String!\n    $searchTerm: String\n    $offset: Int\n    $limit: Int\n    $filter: AccountOrdersFilter!\n    $frequency: [ContributionFrequency]\n    $status: [OrderStatus!]\n    $includeIncognito: Boolean\n    $minAmount: Int\n    $maxAmount: Int\n    $paymentMethod: PaymentMethodReferenceInput\n    $includeHostedAccounts: Boolean!\n    $includeChildrenAccounts: Boolean\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $expectedDateFrom: DateTime\n    $expectedDateTo: DateTime\n    $chargedDateFrom: DateTime\n    $chargedDateTo: DateTime\n    $expectedFundsFilter: ExpectedFundsFilter\n    $orderBy: ChronologicalOrderInput\n    $tier: [TierReferenceInput!]\n  ) {\n    account(slug: $slug) {\n      id\n      orders(\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n        expectedDateFrom: $expectedDateFrom\n        expectedDateTo: $expectedDateTo\n        filter: $filter\n        frequency: $frequency\n        status: $status\n        includeIncognito: $includeIncognito\n        minAmount: $minAmount\n        maxAmount: $maxAmount\n        searchTerm: $searchTerm\n        offset: $offset\n        limit: $limit\n        paymentMethod: $paymentMethod\n        includeHostedAccounts: $includeHostedAccounts\n        includeChildrenAccounts: $includeChildrenAccounts\n        expectedFundsFilter: $expectedFundsFilter\n        orderBy: $orderBy\n        chargedDateFrom: $chargedDateFrom\n        chargedDateTo: $chargedDateTo\n        tier: $tier\n      ) {\n        totalCount\n        nodes {\n          id\n          ...ManagedOrderFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query DashboardRecurringContributions(\n    $slug: String!\n    $searchTerm: String\n    $offset: Int\n    $limit: Int\n    $filter: AccountOrdersFilter!\n    $frequency: [ContributionFrequency]\n    $status: [OrderStatus!]\n    $includeIncognito: Boolean\n    $minAmount: Int\n    $maxAmount: Int\n    $paymentMethod: PaymentMethodReferenceInput\n    $includeHostedAccounts: Boolean!\n    $includeChildrenAccounts: Boolean\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $expectedDateFrom: DateTime\n    $expectedDateTo: DateTime\n    $chargedDateFrom: DateTime\n    $chargedDateTo: DateTime\n    $expectedFundsFilter: ExpectedFundsFilter\n    $orderBy: ChronologicalOrderInput\n    $tier: [TierReferenceInput!]\n  ) {\n    account(slug: $slug) {\n      id\n      orders(\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n        expectedDateFrom: $expectedDateFrom\n        expectedDateTo: $expectedDateTo\n        filter: $filter\n        frequency: $frequency\n        status: $status\n        includeIncognito: $includeIncognito\n        minAmount: $minAmount\n        maxAmount: $maxAmount\n        searchTerm: $searchTerm\n        offset: $offset\n        limit: $limit\n        paymentMethod: $paymentMethod\n        includeHostedAccounts: $includeHostedAccounts\n        includeChildrenAccounts: $includeChildrenAccounts\n        expectedFundsFilter: $expectedFundsFilter\n        orderBy: $orderBy\n        chargedDateFrom: $chargedDateFrom\n        chargedDateTo: $chargedDateTo\n        tier: $tier\n      ) {\n        totalCount\n        nodes {\n          id\n          ...ManagedOrderFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation ContributionsExpireOrder($orderId: Int) {\n        processPendingOrder(order: { legacyId: $orderId }, action: MARK_AS_EXPIRED) {\n          id\n          status\n          permissions {\n            id\n            canMarkAsPaid\n            canMarkAsExpired\n          }\n          activities {\n            nodes {\n              id\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation ContributionsExpireOrder($orderId: Int) {\n        processPendingOrder(order: { legacyId: $orderId }, action: MARK_AS_EXPIRED) {\n          id\n          status\n          permissions {\n            id\n            canMarkAsPaid\n            canMarkAsExpired\n          }\n          activities {\n            nodes {\n              id\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CreatePendingContributionModal($slug: String!) {\n    host(slug: $slug) {\n      id\n      legacyId\n      type\n      isHost\n      name\n      slug\n      currency\n      settings\n      hostFeePercent\n      orderAccountingCategories: accountingCategories(kind: [CONTRIBUTION, ADDED_FUNDS]) {\n        nodes {\n          id\n          name\n          friendlyName\n          code\n          kind\n          appliesTo\n        }\n      }\n      plan {\n        id\n        hostFees\n      }\n      policies {\n        id\n        REQUIRE_2FA_FOR_ADMINS\n      }\n      isTrustedHost\n      vendors {\n        totalCount\n        nodes {\n          id\n          ...VendorFields\n        }\n      }\n    }\n  }\n\n  \n"): (typeof documents)["\n  query CreatePendingContributionModal($slug: String!) {\n    host(slug: $slug) {\n      id\n      legacyId\n      type\n      isHost\n      name\n      slug\n      currency\n      settings\n      hostFeePercent\n      orderAccountingCategories: accountingCategories(kind: [CONTRIBUTION, ADDED_FUNDS]) {\n        nodes {\n          id\n          name\n          friendlyName\n          code\n          kind\n          appliesTo\n        }\n      }\n      plan {\n        id\n        hostFees\n      }\n      policies {\n        id\n        REQUIRE_2FA_FOR_ADMINS\n      }\n      isTrustedHost\n      vendors {\n        totalCount\n        nodes {\n          id\n          ...VendorFields\n        }\n      }\n    }\n  }\n\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CreatePendingContributionCollective($slug: String!) {\n    account(slug: $slug) {\n      id\n      type\n      currency\n      childrenAccounts {\n        nodes {\n          id\n          type\n          legacyId\n          isHost\n          name\n          slug\n          currency\n          settings\n          imageUrl\n          ... on AccountWithContributions {\n            tiers {\n              nodes {\n                id\n                slug\n                legacyId\n                name\n              }\n            }\n          }\n        }\n      }\n      ... on AccountWithHost {\n        bankTransfersHostFeePercent: hostFeePercent(paymentMethodType: MANUAL)\n        host {\n          id\n          legacyId\n          vendors(forAccount: { slug: $slug }, limit: 5) {\n            nodes {\n              id\n              slug\n              name\n              type\n              description\n              imageUrl(height: 64)\n            }\n          }\n        }\n      }\n      ... on AccountWithContributions {\n        tiers {\n          nodes {\n            id\n            slug\n            legacyId\n            name\n          }\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CreatePendingContributionCollective($slug: String!) {\n    account(slug: $slug) {\n      id\n      type\n      currency\n      childrenAccounts {\n        nodes {\n          id\n          type\n          legacyId\n          isHost\n          name\n          slug\n          currency\n          settings\n          imageUrl\n          ... on AccountWithContributions {\n            tiers {\n              nodes {\n                id\n                slug\n                legacyId\n                name\n              }\n            }\n          }\n        }\n      }\n      ... on AccountWithHost {\n        bankTransfersHostFeePercent: hostFeePercent(paymentMethodType: MANUAL)\n        host {\n          id\n          legacyId\n          vendors(forAccount: { slug: $slug }, limit: 5) {\n            nodes {\n              id\n              slug\n              name\n              type\n              description\n              imageUrl(height: 64)\n            }\n          }\n        }\n      }\n      ... on AccountWithContributions {\n        tiers {\n          nodes {\n            id\n            slug\n            legacyId\n            name\n          }\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePendingContribution($order: PendingOrderCreateInput!) {\n    createPendingOrder(order: $order) {\n      legacyId\n      id\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePendingContribution($order: PendingOrderCreateInput!) {\n    createPendingOrder(order: $order) {\n      legacyId\n      id\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditPendingContribution($order: PendingOrderEditInput!) {\n    editPendingOrder(order: $order) {\n      legacyId\n      id\n      status\n      ...ConfirmContributionFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation EditPendingContribution($order: PendingOrderEditInput!) {\n    editPendingOrder(order: $order) {\n      legacyId\n      id\n      status\n      ...ConfirmContributionFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation StartResumeContributionsProcess($account: AccountReferenceInput!, $message: String) {\n    startResumeOrdersProcess(account: $account, message: $message) {\n      id\n      ... on AccountWithContributions {\n        canStartResumeContributionsProcess\n        hasResumeContributionsProcessStarted\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation StartResumeContributionsProcess($account: AccountReferenceInput!, $message: String) {\n    startResumeOrdersProcess(account: $account, message: $message) {\n      id\n      ... on AccountWithContributions {\n        canStartResumeContributionsProcess\n        hasResumeContributionsProcessStarted\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ExpensePipelineOverview($hostSlug: String!, $currency: Currency!) {\n    wiseReadyToPay: expenses(\n      host: { slug: $hostSlug }\n      limit: 0\n      status: READY_TO_PAY\n      payoutMethodType: BANK_ACCOUNT\n    ) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n    wiseScheduledForPayment: expenses(\n      host: { slug: $hostSlug }\n      limit: 0\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: BANK_ACCOUNT\n    ) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n    paypalReadyToPay: expenses(host: { slug: $hostSlug }, limit: 0, status: READY_TO_PAY, payoutMethodType: PAYPAL) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n    paypalScheduledForPayment: expenses(\n      host: { slug: $hostSlug }\n      limit: 0\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: PAYPAL\n    ) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ExpensePipelineOverview($hostSlug: String!, $currency: Currency!) {\n    wiseReadyToPay: expenses(\n      host: { slug: $hostSlug }\n      limit: 0\n      status: READY_TO_PAY\n      payoutMethodType: BANK_ACCOUNT\n    ) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n    wiseScheduledForPayment: expenses(\n      host: { slug: $hostSlug }\n      limit: 0\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: BANK_ACCOUNT\n    ) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n    paypalReadyToPay: expenses(host: { slug: $hostSlug }, limit: 0, status: READY_TO_PAY, payoutMethodType: PAYPAL) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n    paypalScheduledForPayment: expenses(\n      host: { slug: $hostSlug }\n      limit: 0\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: PAYPAL\n    ) {\n      totalCount\n      totalAmount {\n        amount(currency: $currency) {\n          valueInCents\n          currency\n        }\n        amountsByCurrency {\n          valueInCents\n          currency\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostCreateExpenseModalPayeeSelect($hostId: String!, $forAccount: AccountReferenceInput) {\n    host(id: $hostId) {\n      id\n      slug\n      name\n      type\n      description\n      isHost\n      imageUrl(height: 64)\n      vendors(forAccount: $forAccount) {\n        nodes {\n          id\n          slug\n          name\n          type\n          description\n          imageUrl(height: 64)\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query HostCreateExpenseModalPayeeSelect($hostId: String!, $forAccount: AccountReferenceInput) {\n    host(id: $hostId) {\n      id\n      slug\n      name\n      type\n      description\n      isHost\n      imageUrl(height: 64)\n      vendors(forAccount: $forAccount) {\n        nodes {\n          id\n          slug\n          name\n          type\n          description\n          imageUrl(height: 64)\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation HostCreateExpense(\n    $expense: ExpenseCreateInput!\n    $account: AccountReferenceInput!\n    $transactionsImportRow: TransactionsImportRowReferenceInput\n  ) {\n    createExpense(expense: $expense, account: $account, transactionsImportRow: $transactionsImportRow) {\n      id\n      legacyId\n      account {\n        id\n        slug\n        name\n        type\n        imageUrl(height: 48)\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation HostCreateExpense(\n    $expense: ExpenseCreateInput!\n    $account: AccountReferenceInput!\n    $transactionsImportRow: TransactionsImportRowReferenceInput\n  ) {\n    createExpense(expense: $expense, account: $account, transactionsImportRow: $transactionsImportRow) {\n      id\n      legacyId\n      account {\n        id\n        slug\n        name\n        type\n        imageUrl(height: 48)\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ExpensesScheduledForPayment($hostSlug: String!) {\n    expenses(host: { slug: $hostSlug }, status: SCHEDULED_FOR_PAYMENT, payoutMethodType: BANK_ACCOUNT) {\n      totalCount\n      nodes {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query ExpensesScheduledForPayment($hostSlug: String!) {\n    expenses(host: { slug: $hostSlug }, status: SCHEDULED_FOR_PAYMENT, payoutMethodType: BANK_ACCOUNT) {\n      totalCount\n      nodes {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ScheduledExpensesBanner($hostSlug: String!, $limit: Int!, $payoutMethodType: PayoutMethodType) {\n    host(slug: $hostSlug) {\n      id\n      currency\n      transferwise {\n        id\n        amountBatched {\n          valueInCents\n          currency\n        }\n      }\n    }\n    expenses(\n      host: { slug: $hostSlug }\n      status: SCHEDULED_FOR_PAYMENT\n      limit: $limit\n      payoutMethodType: $payoutMethodType\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query ScheduledExpensesBanner($hostSlug: String!, $limit: Int!, $payoutMethodType: PayoutMethodType) {\n    host(slug: $hostSlug) {\n      id\n      currency\n      transferwise {\n        id\n        amountBatched {\n          valueInCents\n          currency\n        }\n      }\n    }\n    expenses(\n      host: { slug: $hostSlug }\n      status: SCHEDULED_FOR_PAYMENT\n      limit: $limit\n      payoutMethodType: $payoutMethodType\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccountExpenses(\n    $account: AccountReferenceInput\n    $fromAccount: AccountReferenceInput\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: [ExpenseStatusFilter]\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $sort: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n    $createdByAccount: AccountReferenceInput\n    $includeChildrenExpenses: Boolean\n    $fetchHostForExpenses: Boolean!\n    $hasAmountInCreatedByAccountCurrency: Boolean!\n    $accountingCategory: [String]\n  ) {\n    expenses(\n      account: $account\n      fromAccount: $fromAccount\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $sort\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n      createdByAccount: $createdByAccount\n      includeChildrenExpenses: $includeChildrenExpenses\n      accountingCategory: $accountingCategory\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        amountInCreatedByAccountCurrency: amountV2(currencySource: CREATED_BY_ACCOUNT)\n          @include(if: $hasAmountInCreatedByAccountCurrency) {\n          value\n          valueInCents\n          currency\n          exchangeRate {\n            date\n            value\n            source\n            isApproximate\n            fromCurrency\n            toCurrency\n          }\n        }\n        host @include(if: $fetchHostForExpenses) {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n  }\n\n  \n  \n"): (typeof documents)["\n  query AccountExpenses(\n    $account: AccountReferenceInput\n    $fromAccount: AccountReferenceInput\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: [ExpenseStatusFilter]\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $sort: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n    $createdByAccount: AccountReferenceInput\n    $includeChildrenExpenses: Boolean\n    $fetchHostForExpenses: Boolean!\n    $hasAmountInCreatedByAccountCurrency: Boolean!\n    $accountingCategory: [String]\n  ) {\n    expenses(\n      account: $account\n      fromAccount: $fromAccount\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $sort\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n      createdByAccount: $createdByAccount\n      includeChildrenExpenses: $includeChildrenExpenses\n      accountingCategory: $accountingCategory\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        amountInCreatedByAccountCurrency: amountV2(currencySource: CREATED_BY_ACCOUNT)\n          @include(if: $hasAmountInCreatedByAccountCurrency) {\n          value\n          valueInCents\n          currency\n          exchangeRate {\n            date\n            value\n            source\n            isApproximate\n            fromCurrency\n            toCurrency\n          }\n        }\n        host @include(if: $fetchHostForExpenses) {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n  }\n\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccountExpensesMetadata($accountSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      slug\n      name\n      imageUrl\n      type\n      currency\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          name\n          slug\n          imageUrl\n          currency\n          type\n          isActive\n          isArchived\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n      ... on Organization {\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n    expenseTagStats(account: { slug: $accountSlug }) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query AccountExpensesMetadata($accountSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      slug\n      name\n      imageUrl\n      type\n      currency\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          name\n          slug\n          imageUrl\n          currency\n          type\n          isActive\n          isArchived\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n      ... on Organization {\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n    expenseTagStats(account: { slug: $accountSlug }) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostDashboardExpenses(\n    $hostSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: [ExpenseStatusFilter]\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $sort: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n    $account: AccountReferenceInput\n    $lastCommentBy: [LastCommentBy]\n    $accountingCategory: [String]\n  ) {\n    expenses(\n      host: { slug: $hostSlug }\n      account: $account\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $sort\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n      lastCommentBy: $lastCommentBy\n      accountingCategory: $accountingCategory\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        ...ExpensesListAdminFieldsFragment\n      }\n    }\n    host(slug: $hostSlug) {\n      id\n      ...ExpenseHostFields\n    }\n  }\n  \n  \n  \n"): (typeof documents)["\n  query HostDashboardExpenses(\n    $hostSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: [ExpenseStatusFilter]\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $sort: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n    $account: AccountReferenceInput\n    $lastCommentBy: [LastCommentBy]\n    $accountingCategory: [String]\n  ) {\n    expenses(\n      host: { slug: $hostSlug }\n      account: $account\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $sort\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n      lastCommentBy: $lastCommentBy\n      accountingCategory: $accountingCategory\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        ...ExpensesListAdminFieldsFragment\n      }\n    }\n    host(slug: $hostSlug) {\n      id\n      ...ExpenseHostFields\n    }\n  }\n  \n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment HostInfoCardFields on Host {\n    id\n    legacyId\n    slug\n    currency\n    location {\n      id\n      address\n      country\n    }\n    paypalPreApproval {\n      id\n      name\n      expiryDate\n      createdAt\n      balance {\n        currency\n        valueInCents\n      }\n    }\n    transferwise {\n      id\n      balances {\n        valueInCents\n        currency\n      }\n    }\n    stripe {\n      issuingBalance {\n        valueInCents\n        currency\n      }\n    }\n    stats {\n      id\n      balance {\n        valueInCents\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment HostInfoCardFields on Host {\n    id\n    legacyId\n    slug\n    currency\n    location {\n      id\n      address\n      country\n    }\n    paypalPreApproval {\n      id\n      name\n      expiryDate\n      createdAt\n      balance {\n        currency\n        valueInCents\n      }\n    }\n    transferwise {\n      id\n      balances {\n        valueInCents\n        currency\n      }\n    }\n    stripe {\n      issuingBalance {\n        valueInCents\n        currency\n      }\n    }\n    stats {\n      id\n      balance {\n        valueInCents\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostDashboardMetadata($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      ...HostInfoCardFields\n      transferwise {\n        id\n        availableCurrencies\n        amountBatched {\n          valueInCents\n          currency\n        }\n      }\n    }\n    unreplied: expenses(\n      host: { slug: $hostSlug }\n      status: [APPROVED, ERROR, INCOMPLETE, ON_HOLD]\n      lastCommentBy: [NON_HOST_ADMIN]\n    ) {\n      totalCount\n    }\n    ready_to_pay: expenses(host: { slug: $hostSlug }, status: [READY_TO_PAY]) {\n      totalCount\n    }\n    scheduled_for_payment: expenses(host: { slug: $hostSlug }, status: [SCHEDULED_FOR_PAYMENT]) {\n      totalCount\n    }\n    on_hold: expenses(host: { slug: $hostSlug }, status: [ON_HOLD]) {\n      totalCount\n    }\n    incomplete: expenses(host: { slug: $hostSlug }, status: [INCOMPLETE]) {\n      totalCount\n    }\n    error: expenses(host: { slug: $hostSlug }, status: [ERROR]) {\n      totalCount\n    }\n\n    hostedAccounts: accounts(host: { slug: $hostSlug }, orderBy: { field: ACTIVITY, direction: DESC }) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n\n    expenseTags: expenseTagStats(host: { slug: $hostSlug }) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n\n  \n  \n"): (typeof documents)["\n  query HostDashboardMetadata($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      ...HostInfoCardFields\n      transferwise {\n        id\n        availableCurrencies\n        amountBatched {\n          valueInCents\n          currency\n        }\n      }\n    }\n    unreplied: expenses(\n      host: { slug: $hostSlug }\n      status: [APPROVED, ERROR, INCOMPLETE, ON_HOLD]\n      lastCommentBy: [NON_HOST_ADMIN]\n    ) {\n      totalCount\n    }\n    ready_to_pay: expenses(host: { slug: $hostSlug }, status: [READY_TO_PAY]) {\n      totalCount\n    }\n    scheduled_for_payment: expenses(host: { slug: $hostSlug }, status: [SCHEDULED_FOR_PAYMENT]) {\n      totalCount\n    }\n    on_hold: expenses(host: { slug: $hostSlug }, status: [ON_HOLD]) {\n      totalCount\n    }\n    incomplete: expenses(host: { slug: $hostSlug }, status: [INCOMPLETE]) {\n      totalCount\n    }\n    error: expenses(host: { slug: $hostSlug }, status: [ERROR]) {\n      totalCount\n    }\n\n    hostedAccounts: accounts(host: { slug: $hostSlug }, orderBy: { field: ACTIVITY, direction: DESC }) {\n      nodes {\n        id\n        ...AccountHoverCardFields\n      }\n    }\n\n    expenseTags: expenseTagStats(host: { slug: $hostSlug }) {\n      nodes {\n        id\n        tag\n      }\n    }\n  }\n\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query HostExpensesReportList($accountSlug: String!, $timeUnit: TimeUnit, $dateFrom: DateTime, $dateTo: DateTime) {\n        host(slug: $accountSlug) {\n          hostExpensesReport(timeUnit: $timeUnit, dateFrom: $dateFrom, dateTo: $dateTo) {\n            timeUnit\n            dateFrom\n            dateTo\n            nodes {\n              date\n              isHost\n              amount {\n                currency\n                valueInCents\n              }\n              count\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query HostExpensesReportList($accountSlug: String!, $timeUnit: TimeUnit, $dateFrom: DateTime, $dateTo: DateTime) {\n        host(slug: $accountSlug) {\n          hostExpensesReport(timeUnit: $timeUnit, dateFrom: $dateFrom, dateTo: $dateTo) {\n            timeUnit\n            dateFrom\n            dateTo\n            nodes {\n              date\n              isHost\n              amount {\n                currency\n                valueInCents\n              }\n              count\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query HostExpensesReport($accountSlug: String!, $timeUnit: TimeUnit, $dateFrom: DateTime, $dateTo: DateTime) {\n        host(slug: $accountSlug) {\n          createdAt\n          currency\n          hostExpensesReport(timeUnit: $timeUnit, dateFrom: $dateFrom, dateTo: $dateTo) {\n            timeUnit\n            dateFrom\n            dateTo\n            nodes {\n              date\n              isHost\n              amount {\n                currency\n                valueInCents\n              }\n              count\n              accountingCategory {\n                id\n                code\n                name\n                friendlyName\n              }\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query HostExpensesReport($accountSlug: String!, $timeUnit: TimeUnit, $dateFrom: DateTime, $dateTo: DateTime) {\n        host(slug: $accountSlug) {\n          createdAt\n          currency\n          hostExpensesReport(timeUnit: $timeUnit, dateFrom: $dateFrom, dateTo: $dateTo) {\n            timeUnit\n            dateFrom\n            dateTo\n            nodes {\n              date\n              isHost\n              amount {\n                currency\n                valueInCents\n              }\n              count\n              accountingCategory {\n                id\n                code\n                name\n                friendlyName\n              }\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostTaxForms(\n    $hostSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $account: [AccountReferenceInput]\n    $status: [LegalDocumentRequestStatus]\n    $orderBy: ChronologicalOrderInput\n    $searchTerm: String\n    $requestedAtFrom: DateTime\n    $requestedAtTo: DateTime\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      taxForms: hostedLegalDocuments(\n        limit: $limit\n        offset: $offset\n        account: $account\n        type: US_TAX_FORM\n        status: $status\n        orderBy: $orderBy\n        searchTerm: $searchTerm\n        requestedAtFrom: $requestedAtFrom\n        requestedAtTo: $requestedAtTo\n      ) {\n        totalCount\n        nodes {\n          id\n          year\n          type\n          status\n          service\n          requestedAt\n          updatedAt\n          documentLink\n          isExpired\n          account {\n            id\n            name\n            slug\n            type\n            imageUrl(height: 128)\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query HostTaxForms(\n    $hostSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $account: [AccountReferenceInput]\n    $status: [LegalDocumentRequestStatus]\n    $orderBy: ChronologicalOrderInput\n    $searchTerm: String\n    $requestedAtFrom: DateTime\n    $requestedAtTo: DateTime\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      taxForms: hostedLegalDocuments(\n        limit: $limit\n        offset: $offset\n        account: $account\n        type: US_TAX_FORM\n        status: $status\n        orderBy: $orderBy\n        searchTerm: $searchTerm\n        requestedAtFrom: $requestedAtFrom\n        requestedAtTo: $requestedAtTo\n      ) {\n        totalCount\n        nodes {\n          id\n          year\n          type\n          status\n          service\n          requestedAt\n          updatedAt\n          documentLink\n          isExpired\n          account {\n            id\n            name\n            slug\n            type\n            imageUrl(height: 128)\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditLegalDocumentStatus(\n    $id: String!\n    $host: AccountReferenceInput!\n    $status: LegalDocumentRequestStatus!\n    $message: String\n  ) {\n    editLegalDocumentStatus(id: $id, status: $status, message: $message, host: $host) {\n      id\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation EditLegalDocumentStatus(\n    $id: String!\n    $host: AccountReferenceInput!\n    $status: LegalDocumentRequestStatus!\n    $message: String\n  ) {\n    editLegalDocumentStatus(id: $id, status: $status, message: $message, host: $host) {\n      id\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LegalDocumentDrawer($hostId: String!, $accountId: String!) {\n    expenses(\n      limit: 5\n      fromAccount: { id: $accountId }\n      host: { id: $hostId }\n      orderBy: { field: CREATED_AT, direction: DESC }\n      types: [INVOICE, GRANT, UNCLASSIFIED]\n    ) {\n      totalCount\n      nodes {\n        id\n        legacyId\n        type\n        description\n        createdAt\n        amountV2 {\n          valueInCents\n          currency\n        }\n        account {\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query LegalDocumentDrawer($hostId: String!, $accountId: String!) {\n    expenses(\n      limit: 5\n      fromAccount: { id: $accountId }\n      host: { id: $hostId }\n      orderBy: { field: CREATED_AT, direction: DESC }\n      types: [INVOICE, GRANT, UNCLASSIFIED]\n    ) {\n      totalCount\n      nodes {\n        id\n        legacyId\n        type\n        description\n        createdAt\n        amountV2 {\n          valueInCents\n          currency\n        }\n        account {\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UploadTaxForm($id: String!, $host: AccountReferenceInput!, $file: Upload!) {\n    editLegalDocumentStatus(id: $id, status: RECEIVED, host: $host, file: $file) {\n      id\n      status\n      documentLink\n      year\n      isExpired\n    }\n  }\n"): (typeof documents)["\n  mutation UploadTaxForm($id: String!, $host: AccountReferenceInput!, $file: Upload!) {\n    editLegalDocumentStatus(id: $id, status: RECEIVED, host: $host, file: $file) {\n      id\n      status\n      documentLink\n      year\n      isExpired\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Timeline($slug: String!, $limit: Int, $dateTo: DateTime, $classes: [ActivityClassType!]) {\n    account(slug: $slug) {\n      id\n      feed(limit: $limit, dateTo: $dateTo, classes: $classes) {\n        id\n        createdAt\n        type\n        data\n        isSystem\n        fromAccount {\n          id\n          name\n          slug\n          type\n          isIncognito\n          ...AccountHoverCardFields\n\n          imageUrl\n          ... on Individual {\n            isGuest\n          }\n        }\n        host {\n          id\n          name\n          slug\n          type\n        }\n        account {\n          id\n          name\n          slug\n          type\n          isIncognito\n          ...AccountHoverCardFields\n          imageUrl\n          ... on Individual {\n            isGuest\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n              slug\n              name\n              type\n            }\n          }\n        }\n        expense {\n          id\n          legacyId\n          description\n          amountV2 {\n            valueInCents\n            currency\n          }\n          payee {\n            id\n            name\n            slug\n            imageUrl\n            ...AccountHoverCardFields\n          }\n          account {\n            id\n            name\n            type\n            slug\n            ...AccountHoverCardFields\n            ... on AccountWithParent {\n              parent {\n                id\n                slug\n              }\n            }\n          }\n        }\n        order {\n          id\n          legacyId\n          description\n          toAccount {\n            id\n            name\n            slug\n            ... on AccountWithParent {\n              parent {\n                id\n                slug\n              }\n            }\n          }\n        }\n        update {\n          id\n          legacyId\n          title\n          summary\n          slug\n        }\n        conversation {\n          id\n          title\n          summary\n          slug\n        }\n        individual {\n          id\n          slug\n          name\n          type\n          imageUrl\n          isIncognito\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query Timeline($slug: String!, $limit: Int, $dateTo: DateTime, $classes: [ActivityClassType!]) {\n    account(slug: $slug) {\n      id\n      feed(limit: $limit, dateTo: $dateTo, classes: $classes) {\n        id\n        createdAt\n        type\n        data\n        isSystem\n        fromAccount {\n          id\n          name\n          slug\n          type\n          isIncognito\n          ...AccountHoverCardFields\n\n          imageUrl\n          ... on Individual {\n            isGuest\n          }\n        }\n        host {\n          id\n          name\n          slug\n          type\n        }\n        account {\n          id\n          name\n          slug\n          type\n          isIncognito\n          ...AccountHoverCardFields\n          imageUrl\n          ... on Individual {\n            isGuest\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n              slug\n              name\n              type\n            }\n          }\n        }\n        expense {\n          id\n          legacyId\n          description\n          amountV2 {\n            valueInCents\n            currency\n          }\n          payee {\n            id\n            name\n            slug\n            imageUrl\n            ...AccountHoverCardFields\n          }\n          account {\n            id\n            name\n            type\n            slug\n            ...AccountHoverCardFields\n            ... on AccountWithParent {\n              parent {\n                id\n                slug\n              }\n            }\n          }\n        }\n        order {\n          id\n          legacyId\n          description\n          toAccount {\n            id\n            name\n            slug\n            ... on AccountWithParent {\n              parent {\n                id\n                slug\n              }\n            }\n          }\n        }\n        update {\n          id\n          legacyId\n          title\n          summary\n          slug\n        }\n        conversation {\n          id\n          title\n          summary\n          slug\n        }\n        individual {\n          id\n          slug\n          name\n          type\n          imageUrl\n          isIncognito\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CollectiveBalance($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      imageUrl\n      slug\n      ...AccountHoverCardFields\n      type\n\n      stats {\n        id\n        balance {\n          currency\n          valueInCents\n        }\n      }\n\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          name\n          slug\n          imageUrl\n          isArchived\n          ...AccountHoverCardFields\n          ... on Event {\n            startsAt\n            endsAt\n          }\n          stats {\n            id\n            balance {\n              currency\n              valueInCents\n            }\n          }\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query CollectiveBalance($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      imageUrl\n      slug\n      ...AccountHoverCardFields\n      type\n\n      stats {\n        id\n        balance {\n          currency\n          valueInCents\n        }\n      }\n\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          name\n          slug\n          imageUrl\n          isArchived\n          ...AccountHoverCardFields\n          ... on Event {\n            startsAt\n            endsAt\n          }\n          stats {\n            id\n            balance {\n              currency\n              valueInCents\n            }\n          }\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MetricsPerAccount(\n    $slug: String!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $compareFrom: DateTime\n    $compareTo: DateTime\n    $includeComparison: Boolean!\n    $includeBalance: Boolean!\n    $includeSpent: Boolean!\n    $includeReceived: Boolean!\n    $includeContributionsCount: Boolean!\n  ) {\n    account(slug: $slug) {\n      id\n      ...AccountMetrics\n\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          ...AccountMetrics\n        }\n      }\n    }\n  }\n  fragment AccountMetrics on Account {\n    ...AccountHoverCardFields\n    balance: stats @include(if: $includeBalance) {\n      id\n      current: balance(dateTo: $dateTo) {\n        currency\n        valueInCents\n      }\n      comparison: balance(dateTo: $compareTo) @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n    }\n    spent: stats @include(if: $includeSpent) {\n      id\n      current: totalAmountSpent(dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n        currency\n        valueInCents\n      }\n      comparison: totalAmountSpent(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n        @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n    }\n    received: stats @include(if: $includeReceived) {\n      id\n      current: totalAmountReceived(dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n        currency\n        valueInCents\n      }\n      comparison: totalAmountReceived(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n        @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n    }\n\n    contributions: stats @include(if: $includeContributionsCount) {\n      id\n      current: contributionsCount(dateFrom: $dateFrom, dateTo: $dateTo)\n      comparison: contributionsCount(dateFrom: $compareFrom, dateTo: $compareTo) @include(if: $includeComparison)\n    }\n  }\n  \n"): (typeof documents)["\n  query MetricsPerAccount(\n    $slug: String!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $compareFrom: DateTime\n    $compareTo: DateTime\n    $includeComparison: Boolean!\n    $includeBalance: Boolean!\n    $includeSpent: Boolean!\n    $includeReceived: Boolean!\n    $includeContributionsCount: Boolean!\n  ) {\n    account(slug: $slug) {\n      id\n      ...AccountMetrics\n\n      childrenAccounts {\n        totalCount\n        nodes {\n          id\n          ...AccountMetrics\n        }\n      }\n    }\n  }\n  fragment AccountMetrics on Account {\n    ...AccountHoverCardFields\n    balance: stats @include(if: $includeBalance) {\n      id\n      current: balance(dateTo: $dateTo) {\n        currency\n        valueInCents\n      }\n      comparison: balance(dateTo: $compareTo) @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n    }\n    spent: stats @include(if: $includeSpent) {\n      id\n      current: totalAmountSpent(dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n        currency\n        valueInCents\n      }\n      comparison: totalAmountSpent(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n        @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n    }\n    received: stats @include(if: $includeReceived) {\n      id\n      current: totalAmountReceived(dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n        currency\n        valueInCents\n      }\n      comparison: totalAmountReceived(dateFrom: $compareFrom, dateTo: $compareTo, net: true)\n        @include(if: $includeComparison) {\n        currency\n        valueInCents\n      }\n    }\n\n    contributions: stats @include(if: $includeContributionsCount) {\n      id\n      current: contributionsCount(dateFrom: $dateFrom, dateTo: $dateTo)\n      comparison: contributionsCount(dateFrom: $compareFrom, dateTo: $compareTo) @include(if: $includeComparison)\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OverviewMetrics(\n    $slug: String!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $compareFrom: DateTime\n    $compareTo: DateTime\n    $includeComparison: Boolean!\n    $includeChildren: Boolean\n    $includeBalance: Boolean!\n    $includeBalanceTimeseries: Boolean!\n    $includeSpent: Boolean!\n    $includeReceived: Boolean!\n    $includeReceivedTimeseries: Boolean!\n    $includeContributionsCount: Boolean!\n    $timeUnit: TimeUnit\n  ) {\n    account(slug: $slug) {\n      id\n      isActive\n      ...AccountHoverCardFields\n      balance: stats @include(if: $includeBalance) {\n        id\n        current: balance(includeChildren: $includeChildren, dateTo: $dateTo) {\n          currency\n          valueInCents\n        }\n        comparison: balance(includeChildren: $includeChildren, dateTo: $compareTo) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      balanceTimeseries: stats @include(if: $includeBalanceTimeseries) {\n        id\n        current: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n      spent: stats @include(if: $includeSpent) {\n        id\n        current: totalAmountSpent(includeChildren: $includeChildren, dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountSpent(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      received: stats @include(if: $includeReceived) {\n        id\n        current: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          net: true\n        ) @include(if: $includeReceived) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      receivedTimeseries: stats @include(if: $includeReceivedTimeseries) {\n        id\n        current: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n          net: true\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n          net: true\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n\n      contributionsCount: stats @include(if: $includeContributionsCount) {\n        id\n        current: contributionsCount(includeChildren: $includeChildren, dateFrom: $dateFrom, dateTo: $dateTo)\n        comparison: contributionsCount(includeChildren: $includeChildren, dateFrom: $compareFrom, dateTo: $compareTo)\n          @include(if: $includeComparison)\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query OverviewMetrics(\n    $slug: String!\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $compareFrom: DateTime\n    $compareTo: DateTime\n    $includeComparison: Boolean!\n    $includeChildren: Boolean\n    $includeBalance: Boolean!\n    $includeBalanceTimeseries: Boolean!\n    $includeSpent: Boolean!\n    $includeReceived: Boolean!\n    $includeReceivedTimeseries: Boolean!\n    $includeContributionsCount: Boolean!\n    $timeUnit: TimeUnit\n  ) {\n    account(slug: $slug) {\n      id\n      isActive\n      ...AccountHoverCardFields\n      balance: stats @include(if: $includeBalance) {\n        id\n        current: balance(includeChildren: $includeChildren, dateTo: $dateTo) {\n          currency\n          valueInCents\n        }\n        comparison: balance(includeChildren: $includeChildren, dateTo: $compareTo) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      balanceTimeseries: stats @include(if: $includeBalanceTimeseries) {\n        id\n        current: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: balanceTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n      spent: stats @include(if: $includeSpent) {\n        id\n        current: totalAmountSpent(includeChildren: $includeChildren, dateFrom: $dateFrom, dateTo: $dateTo, net: true) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountSpent(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      received: stats @include(if: $includeReceived) {\n        id\n        current: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          net: true\n        ) @include(if: $includeReceived) {\n          currency\n          valueInCents\n        }\n        comparison: totalAmountReceived(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          net: true\n        ) @include(if: $includeComparison) {\n          currency\n          valueInCents\n        }\n      }\n      receivedTimeseries: stats @include(if: $includeReceivedTimeseries) {\n        id\n        current: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $dateFrom\n          dateTo: $dateTo\n          timeUnit: $timeUnit\n          net: true\n        ) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n        comparison: totalAmountReceivedTimeSeries(\n          includeChildren: $includeChildren\n          dateFrom: $compareFrom\n          dateTo: $compareTo\n          timeUnit: $timeUnit\n          net: true\n        ) @include(if: $includeComparison) {\n          dateTo\n          dateFrom\n          timeUnit\n          nodes {\n            date\n            amount {\n              currency\n              value\n            }\n          }\n        }\n      }\n\n      contributionsCount: stats @include(if: $includeContributionsCount) {\n        id\n        current: contributionsCount(includeChildren: $includeChildren, dateFrom: $dateFrom, dateTo: $dateTo)\n        comparison: contributionsCount(includeChildren: $includeChildren, dateFrom: $compareFrom, dateTo: $compareTo)\n          @include(if: $includeComparison)\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostReportsPage(\n    $hostSlug: String!\n    $account: [AccountReferenceInput!]\n    $dateFrom: DateTime\n    $dateTo: DateTime\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      isActive\n      type\n      createdAt\n      hostFeePercent\n      isTrustedHost\n      settings\n      stats {\n        id\n        balance(dateTo: $dateTo) {\n          valueInCents\n          currency\n        }\n      }\n      contributionStats(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        contributionsCount\n        oneTimeContributionsCount\n        recurringContributionsCount\n        dailyAverageIncomeAmount {\n          valueInCents\n        }\n      }\n      expenseStats(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        expensesCount\n        dailyAverageAmount {\n          valueInCents\n        }\n        invoicesCount\n        reimbursementsCount\n        grantsCount\n      }\n      hostMetrics(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        hostFees {\n          valueInCents\n          currency\n        }\n        hostFeeShare {\n          valueInCents\n          currency\n        }\n        platformTips {\n          valueInCents\n          currency\n        }\n        pendingPlatformTips {\n          valueInCents\n          currency\n        }\n        totalMoneyManaged {\n          valueInCents\n          currency\n        }\n      }\n      hostMetricsTimeSeries(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        timeUnit\n        totalReceived {\n          timeUnit\n          nodes {\n            date\n            kind\n            amount {\n              value\n            }\n          }\n        }\n        totalSpent {\n          timeUnit\n          nodes {\n            date\n            kind\n            amount {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query HostReportsPage(\n    $hostSlug: String!\n    $account: [AccountReferenceInput!]\n    $dateFrom: DateTime\n    $dateTo: DateTime\n  ) {\n    host(slug: $hostSlug) {\n      id\n      legacyId\n      slug\n      name\n      currency\n      isHost\n      isActive\n      type\n      createdAt\n      hostFeePercent\n      isTrustedHost\n      settings\n      stats {\n        id\n        balance(dateTo: $dateTo) {\n          valueInCents\n          currency\n        }\n      }\n      contributionStats(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        contributionsCount\n        oneTimeContributionsCount\n        recurringContributionsCount\n        dailyAverageIncomeAmount {\n          valueInCents\n        }\n      }\n      expenseStats(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        expensesCount\n        dailyAverageAmount {\n          valueInCents\n        }\n        invoicesCount\n        reimbursementsCount\n        grantsCount\n      }\n      hostMetrics(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        hostFees {\n          valueInCents\n          currency\n        }\n        hostFeeShare {\n          valueInCents\n          currency\n        }\n        platformTips {\n          valueInCents\n          currency\n        }\n        pendingPlatformTips {\n          valueInCents\n          currency\n        }\n        totalMoneyManaged {\n          valueInCents\n          currency\n        }\n      }\n      hostMetricsTimeSeries(account: $account, dateFrom: $dateFrom, dateTo: $dateTo) {\n        timeUnit\n        totalReceived {\n          timeUnit\n          nodes {\n            date\n            kind\n            amount {\n              value\n            }\n          }\n        }\n        totalSpent {\n          timeUnit\n          nodes {\n            date\n            kind\n            amount {\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostReports(\n    $hostSlug: String!\n    $dateTo: DateTime\n    $dateFrom: DateTime\n    $timeUnit: TimeUnit\n    $includeGroups: Boolean!\n  ) {\n    host(slug: $hostSlug) {\n      id\n      currency\n      hostTransactionsReports(dateFrom: $dateFrom, dateTo: $dateTo, timeUnit: $timeUnit) {\n        timeUnit\n        nodes {\n          date\n          managedFunds {\n            startingBalance {\n              valueInCents\n              currency\n            }\n            endingBalance {\n              valueInCents\n              currency\n            }\n            totalChange {\n              valueInCents\n              currency\n            }\n            groups @include(if: $includeGroups) {\n              amount {\n                valueInCents\n                currency\n              }\n              netAmount {\n                valueInCents\n                currency\n              }\n              platformFee {\n                valueInCents\n                currency\n              }\n              paymentProcessorFee {\n                valueInCents\n                currency\n              }\n              hostFee {\n                valueInCents\n                currency\n              }\n              taxAmount {\n                valueInCents\n                currency\n              }\n              kind\n              isHost\n              type\n              expenseType\n              isRefund\n            }\n          }\n          operationalFunds {\n            startingBalance {\n              valueInCents\n              currency\n            }\n            endingBalance {\n              valueInCents\n              currency\n            }\n            totalChange {\n              valueInCents\n              currency\n            }\n            groups @include(if: $includeGroups) {\n              amount {\n                valueInCents\n                currency\n              }\n              netAmount {\n                valueInCents\n                currency\n              }\n              platformFee {\n                valueInCents\n                currency\n              }\n              paymentProcessorFee {\n                valueInCents\n                currency\n              }\n              hostFee {\n                valueInCents\n                currency\n              }\n              taxAmount {\n                valueInCents\n                currency\n              }\n              kind\n              isHost\n              type\n              expenseType\n              isRefund\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query HostReports(\n    $hostSlug: String!\n    $dateTo: DateTime\n    $dateFrom: DateTime\n    $timeUnit: TimeUnit\n    $includeGroups: Boolean!\n  ) {\n    host(slug: $hostSlug) {\n      id\n      currency\n      hostTransactionsReports(dateFrom: $dateFrom, dateTo: $dateTo, timeUnit: $timeUnit) {\n        timeUnit\n        nodes {\n          date\n          managedFunds {\n            startingBalance {\n              valueInCents\n              currency\n            }\n            endingBalance {\n              valueInCents\n              currency\n            }\n            totalChange {\n              valueInCents\n              currency\n            }\n            groups @include(if: $includeGroups) {\n              amount {\n                valueInCents\n                currency\n              }\n              netAmount {\n                valueInCents\n                currency\n              }\n              platformFee {\n                valueInCents\n                currency\n              }\n              paymentProcessorFee {\n                valueInCents\n                currency\n              }\n              hostFee {\n                valueInCents\n                currency\n              }\n              taxAmount {\n                valueInCents\n                currency\n              }\n              kind\n              isHost\n              type\n              expenseType\n              isRefund\n            }\n          }\n          operationalFunds {\n            startingBalance {\n              valueInCents\n              currency\n            }\n            endingBalance {\n              valueInCents\n              currency\n            }\n            totalChange {\n              valueInCents\n              currency\n            }\n            groups @include(if: $includeGroups) {\n              amount {\n                valueInCents\n                currency\n              }\n              netAmount {\n                valueInCents\n                currency\n              }\n              platformFee {\n                valueInCents\n                currency\n              }\n              paymentProcessorFee {\n                valueInCents\n                currency\n              }\n              hostFee {\n                valueInCents\n                currency\n              }\n              taxAmount {\n                valueInCents\n                currency\n              }\n              kind\n              isHost\n              type\n              expenseType\n              isRefund\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccountReports(\n    $accountSlug: String!\n    $dateTo: DateTime\n    $dateFrom: DateTime\n    $timeUnit: TimeUnit\n    $includeGroups: Boolean!\n  ) {\n    account(slug: $accountSlug) {\n      id\n      currency\n      transactionReports(dateFrom: $dateFrom, dateTo: $dateTo, timeUnit: $timeUnit) {\n        timeUnit\n        nodes {\n          date\n          startingBalance {\n            valueInCents\n            currency\n          }\n          endingBalance {\n            valueInCents\n            currency\n          }\n          totalChange {\n            valueInCents\n            currency\n          }\n          groups @include(if: $includeGroups) {\n            amount {\n              valueInCents\n              currency\n            }\n            netAmount {\n              valueInCents\n              currency\n            }\n            platformFee {\n              valueInCents\n              currency\n            }\n            paymentProcessorFee {\n              valueInCents\n              currency\n            }\n            hostFee {\n              valueInCents\n              currency\n            }\n            taxAmount {\n              valueInCents\n              currency\n            }\n            kind\n            isHost\n            type\n            expenseType\n            isRefund\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AccountReports(\n    $accountSlug: String!\n    $dateTo: DateTime\n    $dateFrom: DateTime\n    $timeUnit: TimeUnit\n    $includeGroups: Boolean!\n  ) {\n    account(slug: $accountSlug) {\n      id\n      currency\n      transactionReports(dateFrom: $dateFrom, dateTo: $dateTo, timeUnit: $timeUnit) {\n        timeUnit\n        nodes {\n          date\n          startingBalance {\n            valueInCents\n            currency\n          }\n          endingBalance {\n            valueInCents\n            currency\n          }\n          totalChange {\n            valueInCents\n            currency\n          }\n          groups @include(if: $includeGroups) {\n            amount {\n              valueInCents\n              currency\n            }\n            netAmount {\n              valueInCents\n              currency\n            }\n            platformFee {\n              valueInCents\n              currency\n            }\n            paymentProcessorFee {\n              valueInCents\n              currency\n            }\n            hostFee {\n              valueInCents\n              currency\n            }\n            taxAmount {\n              valueInCents\n              currency\n            }\n            kind\n            isHost\n            type\n            expenseType\n            isRefund\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SubmitLegalDocument($account: AccountReferenceInput!, $type: LegalDocumentType!, $formData: JSON!) {\n    submitLegalDocument(account: $account, type: $type, formData: $formData) {\n      id\n      type\n      status\n      isExpired\n    }\n  }\n"): (typeof documents)["\n  mutation SubmitLegalDocument($account: AccountReferenceInput!, $type: LegalDocumentType!, $formData: JSON!) {\n    submitLegalDocument(account: $account, type: $type, formData: $formData) {\n      id\n      type\n      status\n      isExpired\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccountTaxInformation($id: String!) {\n    account(id: $id) {\n      id\n      slug\n      name\n      legalName\n      type\n      usTaxForms: legalDocuments(type: US_TAX_FORM) {\n        id\n        year\n        status\n        updatedAt\n        service\n        type\n        documentLink\n        isExpired\n      }\n      location {\n        address\n        country\n        structured\n      }\n    }\n  }\n"): (typeof documents)["\n  query AccountTaxInformation($id: String!) {\n    account(id: $id) {\n      id\n      slug\n      name\n      legalName\n      type\n      usTaxForms: legalDocuments(type: US_TAX_FORM) {\n        id\n        year\n        status\n        updatedAt\n        service\n        type\n        documentLink\n        isExpired\n      }\n      location {\n        address\n        country\n        structured\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SuggestContributionMatch(\n    $hostId: String!\n    $searchTerm: String\n    $offset: Int\n    $limit: Int\n    $frequency: [ContributionFrequency]\n    $status: [OrderStatus!]\n    $onlySubscriptions: Boolean\n    $minAmount: Int\n    $maxAmount: Int\n    $paymentMethod: PaymentMethodReferenceInput\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $expectedDateFrom: DateTime\n    $expectedDateTo: DateTime\n    $expectedFundsFilter: ExpectedFundsFilter\n  ) {\n    account(id: $hostId) {\n      id\n      orders(\n        filter: INCOMING\n        includeIncognito: true\n        includeHostedAccounts: true\n        status: $status\n        frequency: $frequency\n        onlySubscriptions: $onlySubscriptions\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n        expectedDateFrom: $expectedDateFrom\n        expectedDateTo: $expectedDateTo\n        minAmount: $minAmount\n        maxAmount: $maxAmount\n        searchTerm: $searchTerm\n        offset: $offset\n        limit: $limit\n        paymentMethod: $paymentMethod\n        expectedFundsFilter: $expectedFundsFilter\n      ) {\n        totalCount\n        offset\n        limit\n        nodes {\n          id\n          legacyId\n          totalAmount {\n            value\n            valueInCents\n            currency\n          }\n          platformTipAmount {\n            value\n            valueInCents\n          }\n          pendingContributionData {\n            expectedAt\n            paymentMethod\n            ponumber\n            memo\n            fromAccountInfo {\n              name\n              email\n            }\n          }\n          status\n          description\n          createdAt\n          processedAt\n          tier {\n            id\n            name\n          }\n          paymentMethod {\n            id\n            service\n            type\n          }\n          fromAccount {\n            id\n            name\n            legalName\n            slug\n            isIncognito\n            type\n            ...AccountHoverCardFields\n            ... on Individual {\n              isGuest\n            }\n          }\n          toAccount {\n            id\n            slug\n            name\n            legalName\n            type\n            imageUrl\n            ...AccountHoverCardFields\n          }\n          ...ConfirmContributionFields\n        }\n      }\n    }\n  }\n  \n  \n"): (typeof documents)["\n  query SuggestContributionMatch(\n    $hostId: String!\n    $searchTerm: String\n    $offset: Int\n    $limit: Int\n    $frequency: [ContributionFrequency]\n    $status: [OrderStatus!]\n    $onlySubscriptions: Boolean\n    $minAmount: Int\n    $maxAmount: Int\n    $paymentMethod: PaymentMethodReferenceInput\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $expectedDateFrom: DateTime\n    $expectedDateTo: DateTime\n    $expectedFundsFilter: ExpectedFundsFilter\n  ) {\n    account(id: $hostId) {\n      id\n      orders(\n        filter: INCOMING\n        includeIncognito: true\n        includeHostedAccounts: true\n        status: $status\n        frequency: $frequency\n        onlySubscriptions: $onlySubscriptions\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n        expectedDateFrom: $expectedDateFrom\n        expectedDateTo: $expectedDateTo\n        minAmount: $minAmount\n        maxAmount: $maxAmount\n        searchTerm: $searchTerm\n        offset: $offset\n        limit: $limit\n        paymentMethod: $paymentMethod\n        expectedFundsFilter: $expectedFundsFilter\n      ) {\n        totalCount\n        offset\n        limit\n        nodes {\n          id\n          legacyId\n          totalAmount {\n            value\n            valueInCents\n            currency\n          }\n          platformTipAmount {\n            value\n            valueInCents\n          }\n          pendingContributionData {\n            expectedAt\n            paymentMethod\n            ponumber\n            memo\n            fromAccountInfo {\n              name\n              email\n            }\n          }\n          status\n          description\n          createdAt\n          processedAt\n          tier {\n            id\n            name\n          }\n          paymentMethod {\n            id\n            service\n            type\n          }\n          fromAccount {\n            id\n            name\n            legalName\n            slug\n            isIncognito\n            type\n            ...AccountHoverCardFields\n            ... on Individual {\n              isGuest\n            }\n          }\n          toAccount {\n            id\n            slug\n            name\n            legalName\n            type\n            imageUrl\n            ...AccountHoverCardFields\n          }\n          ...ConfirmContributionFields\n        }\n      }\n    }\n  }\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SuggestExpenseMatch(\n    $hostId: String!\n    $searchTerm: String\n    $offset: Int\n    $limit: Int\n    $status: [ExpenseStatusFilter!]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $payoutMethodType: PayoutMethodType\n  ) {\n    expenses(\n      host: { id: $hostId }\n      status: $status\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      searchTerm: $searchTerm\n      offset: $offset\n      limit: $limit\n      payoutMethodType: $payoutMethodType\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        legacyId\n        amountV2 {\n          value\n          valueInCents\n          currency\n        }\n        status\n        description\n        createdAt\n        payoutMethod {\n          id\n          type\n        }\n        items {\n          id\n          description\n          amountV2 {\n            valueInCents\n            currency\n          }\n        }\n        payee {\n          id\n          name\n          slug\n          type\n          imageUrl\n          ...AccountHoverCardFields\n        }\n        account {\n          id\n          slug\n          name\n          type\n          imageUrl\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query SuggestExpenseMatch(\n    $hostId: String!\n    $searchTerm: String\n    $offset: Int\n    $limit: Int\n    $status: [ExpenseStatusFilter!]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $payoutMethodType: PayoutMethodType\n  ) {\n    expenses(\n      host: { id: $hostId }\n      status: $status\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      searchTerm: $searchTerm\n      offset: $offset\n      limit: $limit\n      payoutMethodType: $payoutMethodType\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        legacyId\n        amountV2 {\n          value\n          valueInCents\n          currency\n        }\n        status\n        description\n        createdAt\n        payoutMethod {\n          id\n          type\n        }\n        items {\n          id\n          description\n          amountV2 {\n            valueInCents\n            currency\n          }\n        }\n        payee {\n          id\n          name\n          slug\n          type\n          imageUrl\n          ...AccountHoverCardFields\n        }\n        account {\n          id\n          slug\n          name\n          type\n          imageUrl\n          ...AccountHoverCardFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query HostTransactionsImportsSources($accountSlug: String!) {\n        host(slug: $accountSlug) {\n          id\n          transactionsImportsSources\n        }\n      }\n    "): (typeof documents)["\n      query HostTransactionsImportsSources($accountSlug: String!) {\n        host(slug: $accountSlug) {\n          id\n          transactionsImportsSources\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation CreateTransactionsImport(\n        $account: AccountReferenceInput!\n        $type: TransactionsImportType!\n        $source: NonEmptyString!\n        $name: NonEmptyString!\n      ) {\n        createTransactionsImport(account: $account, source: $source, name: $name, type: $type) {\n          id\n          account {\n            id\n            ... on Host {\n              id\n              transactionsImportsSources\n            }\n            ... on Organization {\n              host {\n                id\n                transactionsImportsSources\n              }\n            }\n          }\n          ...TransactionImportListFields\n        }\n      }\n      \n    "): (typeof documents)["\n      mutation CreateTransactionsImport(\n        $account: AccountReferenceInput!\n        $type: TransactionsImportType!\n        $source: NonEmptyString!\n        $name: NonEmptyString!\n      ) {\n        createTransactionsImport(account: $account, source: $source, name: $name, type: $type) {\n          id\n          account {\n            id\n            ... on Host {\n              id\n              transactionsImportsSources\n            }\n            ... on Organization {\n              host {\n                id\n                transactionsImportsSources\n              }\n            }\n          }\n          ...TransactionImportListFields\n        }\n      }\n      \n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UploadTransactionsImport(\n    $importId: NonEmptyString!\n    $csvConfig: JSONObject\n    $data: [TransactionsImportRowCreateInput!]!\n    $file: Upload\n  ) {\n    importTransactions(id: $importId, csvConfig: $csvConfig, data: $data, file: $file) {\n      id\n      csvConfig\n      lastSyncAt\n      file {\n        id\n        url\n        name\n        type\n        size\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UploadTransactionsImport(\n    $importId: NonEmptyString!\n    $csvConfig: JSONObject\n    $data: [TransactionsImportRowCreateInput!]!\n    $file: Upload\n  ) {\n    importTransactions(id: $importId, csvConfig: $csvConfig, data: $data, file: $file) {\n      id\n      csvConfig\n      lastSyncAt\n      file {\n        id\n        url\n        name\n        type\n        size\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SyncPlaidAccount($connectedAccount: ConnectedAccountReferenceInput!) {\n    syncPlaidAccount(connectedAccount: $connectedAccount) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation SyncPlaidAccount($connectedAccount: ConnectedAccountReferenceInput!) {\n    syncPlaidAccount(connectedAccount: $connectedAccount) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TransactionsImportHostFields on Host {\n    id\n    name\n    legalName\n    imageUrl\n    legacyId\n    slug\n    currency\n    type\n\n    accountingCategories {\n      totalCount\n      nodes {\n        id\n        ...AccountingCategoryFields\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment TransactionsImportHostFields on Host {\n    id\n    name\n    legalName\n    imageUrl\n    legacyId\n    slug\n    currency\n    type\n\n    accountingCategories {\n      totalCount\n      nodes {\n        id\n        ...AccountingCategoryFields\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TransactionsImport(\n    $importId: String!\n    $limit: Int = 50\n    $offset: Int = 0\n    $status: TransactionsImportRowStatus\n    $searchTerm: String\n  ) {\n    transactionsImport(id: $importId) {\n      id\n      source\n      name\n      lastSyncAt\n      isSyncing\n      lastSyncCursor\n      file {\n        id\n        url\n        name\n        type\n        size\n      }\n      stats {\n        ...TransactionsImportStats\n      }\n      type\n      csvConfig\n      createdAt\n      updatedAt\n      connectedAccount {\n        id\n      }\n      account {\n        id\n        legacyId\n        slug\n        currency\n        ... on AccountWithHost {\n          host {\n            ...TransactionsImportHostFields\n          }\n        }\n        ... on Organization {\n          host {\n            ...TransactionsImportHostFields\n          }\n        }\n      }\n      rows(limit: $limit, offset: $offset, status: $status, searchTerm: $searchTerm) {\n        totalCount\n        offset\n        limit\n        nodes {\n          ...TransactionsImportRowFields\n        }\n      }\n    }\n  }\n  \n  \n  \n"): (typeof documents)["\n  query TransactionsImport(\n    $importId: String!\n    $limit: Int = 50\n    $offset: Int = 0\n    $status: TransactionsImportRowStatus\n    $searchTerm: String\n  ) {\n    transactionsImport(id: $importId) {\n      id\n      source\n      name\n      lastSyncAt\n      isSyncing\n      lastSyncCursor\n      file {\n        id\n        url\n        name\n        type\n        size\n      }\n      stats {\n        ...TransactionsImportStats\n      }\n      type\n      csvConfig\n      createdAt\n      updatedAt\n      connectedAccount {\n        id\n      }\n      account {\n        id\n        legacyId\n        slug\n        currency\n        ... on AccountWithHost {\n          host {\n            ...TransactionsImportHostFields\n          }\n        }\n        ... on Organization {\n          host {\n            ...TransactionsImportHostFields\n          }\n        }\n      }\n      rows(limit: $limit, offset: $offset, status: $status, searchTerm: $searchTerm) {\n        totalCount\n        offset\n        limit\n        nodes {\n          ...TransactionsImportRowFields\n        }\n      }\n    }\n  }\n  \n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TransactionsImportLastSyncAt($importId: String!) {\n    transactionsImport(id: $importId) {\n      id\n      lastSyncAt\n      isSyncing\n      lastSyncCursor\n    }\n  }\n"): (typeof documents)["\n  query TransactionsImportLastSyncAt($importId: String!) {\n    transactionsImport(id: $importId) {\n      id\n      lastSyncAt\n      isSyncing\n      lastSyncCursor\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteTransactionsImport($id: NonEmptyString!) {\n    deleteTransactionsImport(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteTransactionsImport($id: NonEmptyString!) {\n    deleteTransactionsImport(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditTransactionsImport($id: NonEmptyString!, $source: NonEmptyString, $name: NonEmptyString) {\n    editTransactionsImport(id: $id, source: $source, name: $name) {\n      id\n      source\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation EditTransactionsImport($id: NonEmptyString!, $source: NonEmptyString, $name: NonEmptyString) {\n    editTransactionsImport(id: $id, source: $source, name: $name) {\n      id\n      source\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteConnectedAccount($connectedAccount: ConnectedAccountReferenceInput!) {\n    deleteConnectedAccount(connectedAccount: $connectedAccount) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteConnectedAccount($connectedAccount: ConnectedAccountReferenceInput!) {\n    deleteConnectedAccount(connectedAccount: $connectedAccount) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TransactionImportListFields on TransactionsImport {\n    id\n    source\n    name\n    type\n    createdAt\n    updatedAt\n    lastSyncAt\n    stats {\n      total\n      ignored\n      expenses\n      orders\n      processed\n    }\n    account {\n      ... on Host {\n        id\n        transactionsImportsSources\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TransactionImportListFields on TransactionsImport {\n    id\n    source\n    name\n    type\n    createdAt\n    updatedAt\n    lastSyncAt\n    stats {\n      total\n      ignored\n      expenses\n      orders\n      processed\n    }\n    account {\n      ... on Host {\n        id\n        transactionsImportsSources\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TransactionsImportRowFields on TransactionsImportRow {\n    id\n    sourceId\n    status\n    description\n    date\n    rawValue\n    note\n    amount {\n      valueInCents\n      currency\n    }\n    expense {\n      id\n      legacyId\n      account {\n        id\n        slug\n        name\n        type\n        imageUrl(height: 48)\n      }\n    }\n    order {\n      id\n      legacyId\n      toAccount {\n        id\n        slug\n        name\n        type\n        imageUrl(height: 48)\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TransactionsImportRowFields on TransactionsImportRow {\n    id\n    sourceId\n    status\n    description\n    date\n    rawValue\n    note\n    amount {\n      valueInCents\n      currency\n    }\n    expense {\n      id\n      legacyId\n      account {\n        id\n        slug\n        name\n        type\n        imageUrl(height: 48)\n      }\n    }\n    order {\n      id\n      legacyId\n      toAccount {\n        id\n        slug\n        name\n        type\n        imageUrl(height: 48)\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TransactionsImportStats on TransactionsImportStats {\n    total\n    ignored\n    onHold\n    expenses\n    orders\n    processed\n    pending\n  }\n"): (typeof documents)["\n  fragment TransactionsImportStats on TransactionsImportStats {\n    total\n    ignored\n    onHold\n    expenses\n    orders\n    processed\n    pending\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateTransactionsImportRow(\n    $importId: NonEmptyString!\n    $rows: [TransactionsImportRowUpdateInput!]\n    $action: TransactionsImportRowAction!\n  ) {\n    updateTransactionsImportRows(id: $importId, rows: $rows, action: $action) {\n      import {\n        id\n        stats {\n          ...TransactionsImportStats\n        }\n      }\n      rows {\n        id\n        ...TransactionsImportRowFields\n      }\n    }\n  }\n  \n  \n"): (typeof documents)["\n  mutation UpdateTransactionsImportRow(\n    $importId: NonEmptyString!\n    $rows: [TransactionsImportRowUpdateInput!]\n    $action: TransactionsImportRowAction!\n  ) {\n    updateTransactionsImportRows(id: $importId, rows: $rows, action: $action) {\n      import {\n        id\n        stats {\n          ...TransactionsImportStats\n        }\n      }\n      rows {\n        id\n        ...TransactionsImportRowFields\n      }\n    }\n  }\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostTransactionImports($accountSlug: String!, $limit: Int, $offset: Int) {\n    host(slug: $accountSlug) {\n      id\n      transactionsImports(limit: $limit, offset: $offset) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          ...TransactionImportListFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query HostTransactionImports($accountSlug: String!, $limit: Int, $offset: Int) {\n    host(slug: $accountSlug) {\n      id\n      transactionsImports(limit: $limit, offset: $offset) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          ...TransactionImportListFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccountTransactionsMetaData($slug: String!) {\n    transactions(account: { slug: $slug }, limit: 0) {\n      paymentMethodTypes\n      kinds\n    }\n    account(slug: $slug) {\n      id\n      name\n      legacyId\n      slug\n      currency\n      settings\n    }\n  }\n"): (typeof documents)["\n  query AccountTransactionsMetaData($slug: String!) {\n    transactions(account: { slug: $slug }, limit: 0) {\n      paymentMethodTypes\n      kinds\n    }\n    account(slug: $slug) {\n      id\n      name\n      legacyId\n      slug\n      currency\n      settings\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostTransactionsMetaData($slug: String!) {\n    transactions(host: { slug: $slug }, limit: 0) {\n      paymentMethodTypes\n      kinds\n    }\n    host(slug: $slug) {\n      id\n      name\n      legacyId\n      slug\n      currency\n      settings\n      accountingCategories {\n        nodes {\n          id\n          code\n          name\n          kind\n          appliesTo\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query HostTransactionsMetaData($slug: String!) {\n    transactions(host: { slug: $slug }, limit: 0) {\n      paymentMethodTypes\n      kinds\n    }\n    host(slug: $slug) {\n      id\n      name\n      legacyId\n      slug\n      currency\n      settings\n      accountingCategories {\n        nodes {\n          id\n          code\n          name\n          kind\n          appliesTo\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TransactionDetails($transaction: TransactionReferenceInput!) {\n    transaction(transaction: $transaction) {\n      id\n      legacyId\n      group\n      amount {\n        valueInCents\n        currency\n      }\n      paymentProcessorFee(fetchPaymentProcessorFee: true) {\n        valueInCents\n        currency\n      }\n      hostFee {\n        valueInCents\n        currency\n      }\n      netAmount {\n        valueInCents\n        currency\n      }\n      taxAmount(fetchTax: true) {\n        valueInCents\n        currency\n      }\n      oppositeTransaction {\n        id\n        legacyId\n      }\n      paymentMethod {\n        id\n        type\n        service\n      }\n      type\n      kind\n      description\n      createdAt\n      clearedAt\n      isRefunded\n      isRefund\n      isInReview\n      isDisputed\n      isOrderRejected\n      merchantId\n      account {\n        id\n        name\n        slug\n        isIncognito\n        description\n        type\n        ... on AccountWithHost {\n          host {\n            id\n            name\n            slug\n          }\n          approvedAt\n        }\n        ... on AccountWithParent {\n          parent {\n            id\n            name\n            slug\n          }\n        }\n        ...AccountHoverCardFields\n      }\n      fromAccount {\n        id\n        ... on AccountWithParent {\n          parent {\n            id\n          }\n        }\n      }\n      toAccount {\n        id\n        ... on AccountWithHost {\n          host {\n            id\n          }\n        }\n      }\n      oppositeAccount {\n        id\n        name\n        slug\n        imageUrl\n        type\n        ...AccountHoverCardFields\n      }\n\n      permissions {\n        id\n        canRefund\n        canDownloadInvoice\n        canReject\n      }\n      order {\n        id\n        legacyId\n        status\n        description\n        processedAt\n        createdAt\n        amount {\n          valueInCents\n          currency\n        }\n        toAccount {\n          id\n          slug\n        }\n        fromAccount {\n          id\n          slug\n        }\n        accountingCategory {\n          id\n          code\n          name\n          friendlyName\n        }\n      }\n      expense {\n        id\n        status\n        tags\n        type\n        feesPayer\n        amount\n        currency\n        description\n        legacyId\n        # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n        comments(limit: 1) {\n          totalCount\n        }\n        payoutMethod {\n          id\n          type\n        }\n        account {\n          id\n          slug\n        }\n        createdByAccount {\n          id\n          slug\n        }\n        permissions {\n          id\n        }\n        createdAt\n        payee {\n          id\n          slug\n          imageUrl\n        }\n        accountingCategory {\n          id\n          code\n          name\n          friendlyName\n        }\n        host {\n          id\n          slug\n        }\n      }\n      refundTransaction {\n        id\n        group\n        createdAt\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query TransactionDetails($transaction: TransactionReferenceInput!) {\n    transaction(transaction: $transaction) {\n      id\n      legacyId\n      group\n      amount {\n        valueInCents\n        currency\n      }\n      paymentProcessorFee(fetchPaymentProcessorFee: true) {\n        valueInCents\n        currency\n      }\n      hostFee {\n        valueInCents\n        currency\n      }\n      netAmount {\n        valueInCents\n        currency\n      }\n      taxAmount(fetchTax: true) {\n        valueInCents\n        currency\n      }\n      oppositeTransaction {\n        id\n        legacyId\n      }\n      paymentMethod {\n        id\n        type\n        service\n      }\n      type\n      kind\n      description\n      createdAt\n      clearedAt\n      isRefunded\n      isRefund\n      isInReview\n      isDisputed\n      isOrderRejected\n      merchantId\n      account {\n        id\n        name\n        slug\n        isIncognito\n        description\n        type\n        ... on AccountWithHost {\n          host {\n            id\n            name\n            slug\n          }\n          approvedAt\n        }\n        ... on AccountWithParent {\n          parent {\n            id\n            name\n            slug\n          }\n        }\n        ...AccountHoverCardFields\n      }\n      fromAccount {\n        id\n        ... on AccountWithParent {\n          parent {\n            id\n          }\n        }\n      }\n      toAccount {\n        id\n        ... on AccountWithHost {\n          host {\n            id\n          }\n        }\n      }\n      oppositeAccount {\n        id\n        name\n        slug\n        imageUrl\n        type\n        ...AccountHoverCardFields\n      }\n\n      permissions {\n        id\n        canRefund\n        canDownloadInvoice\n        canReject\n      }\n      order {\n        id\n        legacyId\n        status\n        description\n        processedAt\n        createdAt\n        amount {\n          valueInCents\n          currency\n        }\n        toAccount {\n          id\n          slug\n        }\n        fromAccount {\n          id\n          slug\n        }\n        accountingCategory {\n          id\n          code\n          name\n          friendlyName\n        }\n      }\n      expense {\n        id\n        status\n        tags\n        type\n        feesPayer\n        amount\n        currency\n        description\n        legacyId\n        # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n        comments(limit: 1) {\n          totalCount\n        }\n        payoutMethod {\n          id\n          type\n        }\n        account {\n          id\n          slug\n        }\n        createdByAccount {\n          id\n          slug\n        }\n        permissions {\n          id\n        }\n        createdAt\n        payee {\n          id\n          slug\n          imageUrl\n        }\n        accountingCategory {\n          id\n          code\n          name\n          friendlyName\n        }\n        host {\n          id\n          slug\n        }\n      }\n      refundTransaction {\n        id\n        group\n        createdAt\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RejectTransaction($transaction: TransactionReferenceInput!, $message: String) {\n    rejectTransaction(transaction: $transaction, message: $message) {\n      id\n      order {\n        id\n        status\n        activities {\n          nodes {\n            id\n            type\n            createdAt\n          }\n        }\n        transactions {\n          id\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RejectTransaction($transaction: TransactionReferenceInput!, $message: String) {\n    rejectTransaction(transaction: $transaction, message: $message) {\n      id\n      order {\n        id\n        status\n        activities {\n          nodes {\n            id\n            type\n            createdAt\n          }\n        }\n        transactions {\n          id\n          createdAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RefundTransaction($transaction: TransactionReferenceInput!, $ignoreBalanceCheck: Boolean) {\n    refundTransaction(transaction: $transaction, ignoreBalanceCheck: $ignoreBalanceCheck) {\n      id\n      order {\n        id\n        status\n        activities {\n          nodes {\n            id\n            type\n            createdAt\n          }\n        }\n        transactions {\n          id\n          createdAt\n        }\n      }\n      expense {\n        id\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RefundTransaction($transaction: TransactionReferenceInput!, $ignoreBalanceCheck: Boolean) {\n    refundTransaction(transaction: $transaction, ignoreBalanceCheck: $ignoreBalanceCheck) {\n      id\n      order {\n        id\n        status\n        activities {\n          nodes {\n            id\n            type\n            createdAt\n          }\n        }\n        transactions {\n          id\n          createdAt\n        }\n      }\n      expense {\n        id\n        status\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TransactionsTableQueryCollectionFragment on TransactionCollection {\n    totalCount\n    offset\n    limit\n    nodes {\n      id\n      legacyId\n      uuid\n      kind\n      amount {\n        currency\n        valueInCents\n      }\n      netAmount {\n        currency\n        valueInCents\n      }\n      group\n      type\n      description\n      createdAt\n      clearedAt\n      isRefunded\n      isRefund\n      isOrderRejected\n      isInReview\n      isDisputed\n      refundTransaction {\n        id\n        group\n      }\n      host {\n        id\n        slug\n        legacyId\n        type\n      }\n      account {\n        id\n        name\n        slug\n        isIncognito\n        imageUrl\n        type\n        ...AccountHoverCardFields\n      }\n      oppositeAccount {\n        id\n        name\n        slug\n        isIncognito\n        imageUrl\n        type\n        ...AccountHoverCardFields\n      }\n      toAccount {\n        id\n        slug\n      }\n      expense {\n        id\n        type\n      }\n      permissions {\n        id\n        canRefund\n        canDownloadInvoice\n        canReject\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment TransactionsTableQueryCollectionFragment on TransactionCollection {\n    totalCount\n    offset\n    limit\n    nodes {\n      id\n      legacyId\n      uuid\n      kind\n      amount {\n        currency\n        valueInCents\n      }\n      netAmount {\n        currency\n        valueInCents\n      }\n      group\n      type\n      description\n      createdAt\n      clearedAt\n      isRefunded\n      isRefund\n      isOrderRejected\n      isInReview\n      isDisputed\n      refundTransaction {\n        id\n        group\n      }\n      host {\n        id\n        slug\n        legacyId\n        type\n      }\n      account {\n        id\n        name\n        slug\n        isIncognito\n        imageUrl\n        type\n        ...AccountHoverCardFields\n      }\n      oppositeAccount {\n        id\n        name\n        slug\n        isIncognito\n        imageUrl\n        type\n        ...AccountHoverCardFields\n      }\n      toAccount {\n        id\n        slug\n      }\n      expense {\n        id\n        type\n      }\n      permissions {\n        id\n        canRefund\n        canDownloadInvoice\n        canReject\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TransactionsTable(\n    $hostAccount: AccountReferenceInput\n    $account: [AccountReferenceInput!]\n    $excludeAccount: [AccountReferenceInput!]\n    $limit: Int!\n    $offset: Int!\n    $type: TransactionType\n    $paymentMethodType: [PaymentMethodType]\n    $paymentMethodService: [PaymentMethodService]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $clearedFrom: DateTime\n    $clearedTo: DateTime\n    $searchTerm: String\n    $kind: [TransactionKind]\n    $includeIncognitoTransactions: Boolean\n    $includeGiftCardTransactions: Boolean\n    $includeChildrenTransactions: Boolean\n    $virtualCard: [VirtualCardReferenceInput]\n    $sort: ChronologicalOrderInput\n    $group: [String]\n    $includeHost: Boolean\n    $expenseType: [ExpenseType]\n    $expense: ExpenseReferenceInput\n    $order: OrderReferenceInput\n    $isRefund: Boolean\n    $hasDebt: Boolean\n    $merchantId: [String]\n    $accountingCategory: [String]\n  ) {\n    transactions(\n      host: $hostAccount\n      account: $account\n      excludeAccount: $excludeAccount\n      limit: $limit\n      offset: $offset\n      type: $type\n      paymentMethodType: $paymentMethodType\n      paymentMethodService: $paymentMethodService\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      clearedFrom: $clearedFrom\n      clearedTo: $clearedTo\n      searchTerm: $searchTerm\n      kind: $kind\n      includeIncognitoTransactions: $includeIncognitoTransactions\n      includeGiftCardTransactions: $includeGiftCardTransactions\n      includeChildrenTransactions: $includeChildrenTransactions\n      includeDebts: true\n      virtualCard: $virtualCard\n      orderBy: $sort\n      group: $group\n      includeHost: $includeHost\n      expenseType: $expenseType\n      expense: $expense\n      order: $order\n      isRefund: $isRefund\n      hasDebt: $hasDebt\n      merchantId: $merchantId\n      accountingCategory: $accountingCategory\n    ) {\n      ...TransactionsTableQueryCollectionFragment\n    }\n  }\n  \n"): (typeof documents)["\n  query TransactionsTable(\n    $hostAccount: AccountReferenceInput\n    $account: [AccountReferenceInput!]\n    $excludeAccount: [AccountReferenceInput!]\n    $limit: Int!\n    $offset: Int!\n    $type: TransactionType\n    $paymentMethodType: [PaymentMethodType]\n    $paymentMethodService: [PaymentMethodService]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $clearedFrom: DateTime\n    $clearedTo: DateTime\n    $searchTerm: String\n    $kind: [TransactionKind]\n    $includeIncognitoTransactions: Boolean\n    $includeGiftCardTransactions: Boolean\n    $includeChildrenTransactions: Boolean\n    $virtualCard: [VirtualCardReferenceInput]\n    $sort: ChronologicalOrderInput\n    $group: [String]\n    $includeHost: Boolean\n    $expenseType: [ExpenseType]\n    $expense: ExpenseReferenceInput\n    $order: OrderReferenceInput\n    $isRefund: Boolean\n    $hasDebt: Boolean\n    $merchantId: [String]\n    $accountingCategory: [String]\n  ) {\n    transactions(\n      host: $hostAccount\n      account: $account\n      excludeAccount: $excludeAccount\n      limit: $limit\n      offset: $offset\n      type: $type\n      paymentMethodType: $paymentMethodType\n      paymentMethodService: $paymentMethodService\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      clearedFrom: $clearedFrom\n      clearedTo: $clearedTo\n      searchTerm: $searchTerm\n      kind: $kind\n      includeIncognitoTransactions: $includeIncognitoTransactions\n      includeGiftCardTransactions: $includeGiftCardTransactions\n      includeChildrenTransactions: $includeChildrenTransactions\n      includeDebts: true\n      virtualCard: $virtualCard\n      orderBy: $sort\n      group: $group\n      includeHost: $includeHost\n      expenseType: $expenseType\n      expense: $expense\n      order: $order\n      isRefund: $isRefund\n      hasDebt: $hasDebt\n      merchantId: $merchantId\n      accountingCategory: $accountingCategory\n    ) {\n      ...TransactionsTableQueryCollectionFragment\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DashboardDeleteUpdate($id: String!) {\n    deleteUpdate(id: $id) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation DashboardDeleteUpdate($id: String!) {\n    deleteUpdate(id: $id) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DashboardPublishUpdate($id: String!, $notificationAudience: UpdateAudience) {\n    publishUpdate(id: $id, notificationAudience: $notificationAudience) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation DashboardPublishUpdate($id: String!, $notificationAudience: UpdateAudience) {\n    publishUpdate(id: $id, notificationAudience: $notificationAudience) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DashboardUnpublishUpdate($id: String!) {\n    unpublishUpdate(id: $id) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation DashboardUnpublishUpdate($id: String!) {\n    unpublishUpdate(id: $id) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DashboardCreateUpdate($update: UpdateCreateInput!) {\n    createUpdate(update: $update) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation DashboardCreateUpdate($update: UpdateCreateInput!) {\n    createUpdate(update: $update) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DashboardEditUpdate($update: UpdateUpdateInput!) {\n    editUpdate(update: $update) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation DashboardEditUpdate($update: UpdateUpdateInput!) {\n    editUpdate(update: $update) {\n      id\n      ...UpdateFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpdateDashboardAudience($id: String!, $audience: UpdateAudience) {\n    update(id: $id) {\n      id\n      userCanPublishUpdate\n      publishedAt\n      isPrivate\n      makePublicOn\n      audienceStats(audience: $audience) {\n        id\n        total\n        hosted\n        individuals\n        organizations\n        collectives\n        coreContributors\n      }\n      account {\n        id\n        isHost\n      }\n    }\n  }\n"): (typeof documents)["\n  query UpdateDashboardAudience($id: String!, $audience: UpdateAudience) {\n    update(id: $id) {\n      id\n      userCanPublishUpdate\n      publishedAt\n      isPrivate\n      makePublicOn\n      audienceStats(audience: $audience) {\n        id\n        total\n        hosted\n        individuals\n        organizations\n        collectives\n        coreContributors\n      }\n      account {\n        id\n        isHost\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UpdateFields on Update {\n    id\n    title\n    slug\n    isPrivate\n    isChangelog\n    createdAt\n    publishedAt\n    updatedAt\n    makePublicOn\n    notificationAudience\n    userCanSeeUpdate\n    summary\n    tags\n    fromAccount {\n      id\n      slug\n      name\n      imageUrl\n      type\n    }\n    account {\n      id\n      slug\n      name\n      imageUrl\n      type\n    }\n    reactions\n    userReactions\n  }\n"): (typeof documents)["\n  fragment UpdateFields on Update {\n    id\n    title\n    slug\n    isPrivate\n    isChangelog\n    createdAt\n    publishedAt\n    updatedAt\n    makePublicOn\n    notificationAudience\n    userCanSeeUpdate\n    summary\n    tags\n    fromAccount {\n      id\n      slug\n      name\n      imageUrl\n      type\n    }\n    account {\n      id\n      slug\n      name\n      imageUrl\n      type\n    }\n    reactions\n    userReactions\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpdatesDashboard(\n    $slug: String\n    $limit: Int\n    $offset: Int\n    $isDraft: Boolean\n    $onlyPublishedUpdates: Boolean\n    $searchTerm: String\n  ) {\n    account(slug: $slug) {\n      id\n      updates(\n        limit: $limit\n        offset: $offset\n        isDraft: $isDraft\n        onlyPublishedUpdates: $onlyPublishedUpdates\n        searchTerm: $searchTerm\n      ) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          ...UpdateFields\n          comments(limit: 10) {\n            totalCount\n            nodes {\n              id\n              createdAt\n              fromAccount {\n                id\n                slug\n                name\n                imageUrl\n                type\n              }\n              reactions\n              userReactions\n              html\n            }\n          }\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query UpdatesDashboard(\n    $slug: String\n    $limit: Int\n    $offset: Int\n    $isDraft: Boolean\n    $onlyPublishedUpdates: Boolean\n    $searchTerm: String\n  ) {\n    account(slug: $slug) {\n      id\n      updates(\n        limit: $limit\n        offset: $offset\n        isDraft: $isDraft\n        onlyPublishedUpdates: $onlyPublishedUpdates\n        searchTerm: $searchTerm\n      ) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          ...UpdateFields\n          comments(limit: 10) {\n            totalCount\n            nodes {\n              id\n              createdAt\n              fromAccount {\n                id\n                slug\n                name\n                imageUrl\n                type\n              }\n              reactions\n              userReactions\n              html\n            }\n          }\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpdatesDashboardMetadata($slug: String) {\n    account(slug: $slug) {\n      id\n      PUBLISHED: updates(onlyPublishedUpdates: true) {\n        totalCount\n      }\n      DRAFTS: updates(isDraft: true) {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query UpdatesDashboardMetadata($slug: String) {\n    account(slug: $slug) {\n      id\n      PUBLISHED: updates(onlyPublishedUpdates: true) {\n        totalCount\n      }\n      DRAFTS: updates(isDraft: true) {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpdateView($id: String!, $commentOffset: Int) {\n    update(id: $id) {\n      id\n      html\n      ...UpdateFields\n      comments(limit: 20, offset: $commentOffset) {\n        totalCount\n        nodes {\n          id\n          createdAt\n          fromAccount {\n            id\n            slug\n            name\n            imageUrl\n            type\n          }\n          reactions\n          userReactions\n          html\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query UpdateView($id: String!, $commentOffset: Int) {\n    update(id: $id) {\n      id\n      html\n      ...UpdateFields\n      comments(limit: 20, offset: $commentOffset) {\n        totalCount\n        nodes {\n          id\n          createdAt\n          fromAccount {\n            id\n            slug\n            name\n            imageUrl\n            type\n          }\n          reactions\n          userReactions\n          html\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccountVirtualCards(\n    $slug: String\n    $limit: Int!\n    $offset: Int!\n    $status: [VirtualCardStatus]\n    $merchantAccount: AccountReferenceInput\n    $dateFrom: DateTime\n    $dateTo: DateTime\n  ) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      type\n      name\n      imageUrl\n      currency\n      ... on AccountWithHost {\n        isApproved\n        host {\n          legacyId\n          slug\n          id\n          type\n          name\n          imageUrl\n          settings\n          currency\n        }\n      }\n      virtualCards(\n        limit: $limit\n        offset: $offset\n        status: $status\n        merchantAccount: $merchantAccount\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n      ) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          name\n          last4\n          data\n          currency\n          provider\n          privateData\n          createdAt\n          spendingLimitAmount\n          spendingLimitInterval\n          spendingLimitRenewsOn\n          remainingLimit\n          account {\n            id\n            slug\n            name\n            imageUrl\n          }\n          assignee {\n            id\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n      virtualCardMerchants {\n        nodes {\n          id\n          type\n          slug\n          name\n          currency\n          location {\n            id\n            address\n            country\n          }\n          imageUrl(height: 64)\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AccountVirtualCards(\n    $slug: String\n    $limit: Int!\n    $offset: Int!\n    $status: [VirtualCardStatus]\n    $merchantAccount: AccountReferenceInput\n    $dateFrom: DateTime\n    $dateTo: DateTime\n  ) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      type\n      name\n      imageUrl\n      currency\n      ... on AccountWithHost {\n        isApproved\n        host {\n          legacyId\n          slug\n          id\n          type\n          name\n          imageUrl\n          settings\n          currency\n        }\n      }\n      virtualCards(\n        limit: $limit\n        offset: $offset\n        status: $status\n        merchantAccount: $merchantAccount\n        dateFrom: $dateFrom\n        dateTo: $dateTo\n      ) {\n        totalCount\n        limit\n        offset\n        nodes {\n          id\n          name\n          last4\n          data\n          currency\n          provider\n          privateData\n          createdAt\n          spendingLimitAmount\n          spendingLimitInterval\n          spendingLimitRenewsOn\n          remainingLimit\n          account {\n            id\n            slug\n            name\n            imageUrl\n          }\n          assignee {\n            id\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n      virtualCardMerchants {\n        nodes {\n          id\n          type\n          slug\n          name\n          currency\n          location {\n            id\n            address\n            country\n          }\n          imageUrl(height: 64)\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditVirtualCard(\n    $virtualCard: VirtualCardReferenceInput!\n    $name: String!\n    $limitAmount: AmountInput\n    $limitInterval: VirtualCardLimitInterval\n    $assignee: AccountReferenceInput!\n  ) {\n    editVirtualCard(\n      virtualCard: $virtualCard\n      name: $name\n      limitAmount: $limitAmount\n      limitInterval: $limitInterval\n      assignee: $assignee\n    ) {\n      id\n      name\n      spendingLimitAmount\n      spendingLimitInterval\n      assignee {\n        id\n        name\n        slug\n        imageUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation EditVirtualCard(\n    $virtualCard: VirtualCardReferenceInput!\n    $name: String!\n    $limitAmount: AmountInput\n    $limitInterval: VirtualCardLimitInterval\n    $assignee: AccountReferenceInput!\n  ) {\n    editVirtualCard(\n      virtualCard: $virtualCard\n      name: $name\n      limitAmount: $limitAmount\n      limitInterval: $limitInterval\n      assignee: $assignee\n    ) {\n      id\n      name\n      spendingLimitAmount\n      spendingLimitInterval\n      assignee {\n        id\n        name\n        slug\n        imageUrl\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateVirtualCard(\n    $name: String!\n    $limitAmount: AmountInput!\n    $limitInterval: VirtualCardLimitInterval!\n    $account: AccountReferenceInput!\n    $assignee: AccountReferenceInput!\n    $virtualCardRequest: VirtualCardRequestReferenceInput\n  ) {\n    createVirtualCard(\n      name: $name\n      limitAmount: $limitAmount\n      limitInterval: $limitInterval\n      account: $account\n      assignee: $assignee\n      virtualCardRequest: $virtualCardRequest\n    ) {\n      id\n      name\n      last4\n      data\n      virtualCardRequest {\n        id\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateVirtualCard(\n    $name: String!\n    $limitAmount: AmountInput!\n    $limitInterval: VirtualCardLimitInterval!\n    $account: AccountReferenceInput!\n    $assignee: AccountReferenceInput!\n    $virtualCardRequest: VirtualCardRequestReferenceInput\n  ) {\n    createVirtualCard(\n      name: $name\n      limitAmount: $limitAmount\n      limitInterval: $limitInterval\n      account: $account\n      assignee: $assignee\n      virtualCardRequest: $virtualCardRequest\n    ) {\n      id\n      name\n      last4\n      data\n      virtualCardRequest {\n        id\n        status\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CollectiveMembers($slug: String!) {\n    account(slug: $slug) {\n      id\n      members(role: ADMIN) {\n        nodes {\n          id\n          account {\n            id\n            name\n            imageUrl\n            slug\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CollectiveMembers($slug: String!) {\n    account(slug: $slug) {\n      id\n      members(role: ADMIN) {\n        nodes {\n          id\n          account {\n            id\n            name\n            imageUrl\n            slug\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query VirtualCardsAssignedToCollective($hostSlug: String!, $collectiveSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      allCards: hostedVirtualCards(collectiveAccountIds: [{ slug: $collectiveSlug }], status: [ACTIVE, INACTIVE]) {\n        totalCount\n      }\n      cardsMissingReceipts: hostedVirtualCards(\n        collectiveAccountIds: [{ slug: $collectiveSlug }]\n        status: [ACTIVE, INACTIVE]\n        hasMissingReceipts: true\n      ) {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query VirtualCardsAssignedToCollective($hostSlug: String!, $collectiveSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      allCards: hostedVirtualCards(collectiveAccountIds: [{ slug: $collectiveSlug }], status: [ACTIVE, INACTIVE]) {\n        totalCount\n      }\n      cardsMissingReceipts: hostedVirtualCards(\n        collectiveAccountIds: [{ slug: $collectiveSlug }]\n        status: [ACTIVE, INACTIVE]\n        hasMissingReceipts: true\n      ) {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query VirtualCardPolicies($slug: String) {\n    account(slug: $slug) {\n      id\n      policies {\n        id\n        MAXIMUM_VIRTUAL_CARD_LIMIT_AMOUNT_FOR_INTERVAL {\n          ALL_TIME {\n            valueInCents\n          }\n          DAILY {\n            valueInCents\n          }\n          MONTHLY {\n            valueInCents\n          }\n          PER_AUTHORIZATION {\n            valueInCents\n          }\n          WEEKLY {\n            valueInCents\n          }\n          YEARLY {\n            valueInCents\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query VirtualCardPolicies($slug: String) {\n    account(slug: $slug) {\n      id\n      policies {\n        id\n        MAXIMUM_VIRTUAL_CARD_LIMIT_AMOUNT_FOR_INTERVAL {\n          ALL_TIME {\n            valueInCents\n          }\n          DAILY {\n            valueInCents\n          }\n          MONTHLY {\n            valueInCents\n          }\n          PER_AUTHORIZATION {\n            valueInCents\n          }\n          WEEKLY {\n            valueInCents\n          }\n          YEARLY {\n            valueInCents\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LeaveHost($account: AccountReferenceInput!, $pauseContributions: Boolean!, $messageForContributors: String) {\n    removeHost(\n      account: $account\n      pauseContributions: $pauseContributions\n      messageForContributors: $messageForContributors\n    ) {\n      id\n      ... on AccountWithHost {\n        host {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LeaveHost($account: AccountReferenceInput!, $pauseContributions: Boolean!, $messageForContributors: String) {\n    removeHost(\n      account: $account\n      pauseContributions: $pauseContributions\n      messageForContributors: $messageForContributors\n    ) {\n      id\n      ... on AccountWithHost {\n        host {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccountInfoForLeaveHost($slug: String) {\n    account(slug: $slug, throwIfMissing: true) {\n      id\n      type\n      currency\n      name\n      stats {\n        activeRecurringContributionsBreakdown {\n          label\n          count\n          amount {\n            valueInCents\n            currency\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AccountInfoForLeaveHost($slug: String) {\n    account(slug: $slug, throwIfMissing: true) {\n      id\n      type\n      currency\n      name\n      stats {\n        activeRecurringContributionsBreakdown {\n          label\n          count\n          amount {\n            valueInCents\n            currency\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ManagePaymentMethods($accountSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      legacyId\n      type\n      slug\n      name\n      currency\n      isHost\n      settings\n      paymentMethods(type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID]) {\n        id\n        ...PaymentMethodFields\n      }\n    }\n  }\n\n  fragment PaymentMethodFields on PaymentMethod {\n    id\n    legacyId\n    name\n    data\n    service\n    type\n    balance {\n      valueInCents\n      currency\n    }\n    expiryDate\n    monthlyLimit {\n      valueInCents\n    }\n    account {\n      id\n      slug\n      name\n    }\n    recurringContributions: orders(\n      onlyActiveSubscriptions: true\n      status: [ACTIVE, ERROR, PENDING, REQUIRE_CLIENT_CONFIRMATION]\n    ) {\n      totalCount\n      nodes {\n        id\n        legacyId\n        needsConfirmation\n      }\n    }\n  }\n"): (typeof documents)["\n  query ManagePaymentMethods($accountSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      legacyId\n      type\n      slug\n      name\n      currency\n      isHost\n      settings\n      paymentMethods(type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID]) {\n        id\n        ...PaymentMethodFields\n      }\n    }\n  }\n\n  fragment PaymentMethodFields on PaymentMethod {\n    id\n    legacyId\n    name\n    data\n    service\n    type\n    balance {\n      valueInCents\n      currency\n    }\n    expiryDate\n    monthlyLimit {\n      valueInCents\n    }\n    account {\n      id\n      slug\n      name\n    }\n    recurringContributions: orders(\n      onlyActiveSubscriptions: true\n      status: [ACTIVE, ERROR, PENDING, REQUIRE_CLIENT_CONFIRMATION]\n    ) {\n      totalCount\n      nodes {\n        id\n        legacyId\n        needsConfirmation\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation ConfirmOrder($order: OrderReferenceInput!) {\n        confirmOrder(order: $order) {\n          order {\n            id\n            status\n            transactions {\n              id\n            }\n            fromAccount {\n              id\n              slug\n            }\n          }\n          stripeError {\n            message\n            account\n            response\n          }\n        }\n      }\n    "): (typeof documents)["\n      mutation ConfirmOrder($order: OrderReferenceInput!) {\n        confirmOrder(order: $order) {\n          order {\n            id\n            status\n            transactions {\n              id\n            }\n            fromAccount {\n              id\n              slug\n            }\n          }\n          stripeError {\n            message\n            account\n            response\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query ActiveFiscalHost($collectiveSlug: String!) {\n        account(slug: $collectiveSlug) {\n          id\n          legacyId\n          type\n          slug\n          name\n          currency\n          members {\n            nodes {\n              role\n              createdAt\n            }\n          }\n          ... on AccountWithHost {\n            approvedAt\n            host {\n              id\n              legacyId\n              slug\n              name\n              currency\n            }\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n            }\n          }\n          events: childrenAccounts(accountType: EVENT) {\n            totalCount\n          }\n          projects: childrenAccounts(accountType: PROJECT) {\n            totalCount\n          }\n          stats {\n            consolidatedBalance: balance(includeChildren: true) {\n              valueInCents\n              currency\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query ActiveFiscalHost($collectiveSlug: String!) {\n        account(slug: $collectiveSlug) {\n          id\n          legacyId\n          type\n          slug\n          name\n          currency\n          members {\n            nodes {\n              role\n              createdAt\n            }\n          }\n          ... on AccountWithHost {\n            approvedAt\n            host {\n              id\n              legacyId\n              slug\n              name\n              currency\n            }\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n            }\n          }\n          events: childrenAccounts(accountType: EVENT) {\n            totalCount\n          }\n          projects: childrenAccounts(accountType: PROJECT) {\n            totalCount\n          }\n          stats {\n            consolidatedBalance: balance(includeChildren: true) {\n              valueInCents\n              currency\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query AppliedToFiscalHost($collectiveSlug: String!) {\n        account(slug: $collectiveSlug) {\n          id\n          legacyId\n          slug\n          name\n          members {\n            nodes {\n              role\n              createdAt\n            }\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              slug\n              name\n            }\n          }\n        }\n      }\n    "): (typeof documents)["\n      query AppliedToFiscalHost($collectiveSlug: String!) {\n        account(slug: $collectiveSlug) {\n          id\n          legacyId\n          slug\n          name\n          members {\n            nodes {\n              role\n              createdAt\n            }\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              slug\n              name\n            }\n          }\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FiscalHostOCFTransition($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      features {\n        RECEIVE_FINANCIAL_CONTRIBUTIONS\n      }\n      newAccounts: duplicatedAccounts(limit: 1) {\n        totalCount\n        nodes {\n          id\n          name\n          slug\n          imageUrl\n          ... on AccountWithHost {\n            host {\n              id\n              legacyId\n            }\n          }\n        }\n      }\n      pausedContributions: orders(filter: INCOMING, status: PAUSED, includeIncognito: true) {\n        totalCount\n      }\n    }\n    hosts(limit: 200, offset: 0) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        createdAt\n        settings\n        type\n        name\n        slug\n        description\n        longDescription\n        currency\n        totalHostedAccounts\n        hostFeePercent\n        isTrustedHost\n        location {\n          id\n          country\n        }\n        tags\n      }\n    }\n  }\n"): (typeof documents)["\n  query FiscalHostOCFTransition($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      features {\n        RECEIVE_FINANCIAL_CONTRIBUTIONS\n      }\n      newAccounts: duplicatedAccounts(limit: 1) {\n        totalCount\n        nodes {\n          id\n          name\n          slug\n          imageUrl\n          ... on AccountWithHost {\n            host {\n              id\n              legacyId\n            }\n          }\n        }\n      }\n      pausedContributions: orders(filter: INCOMING, status: PAUSED, includeIncognito: true) {\n        totalCount\n      }\n    }\n    hosts(limit: 200, offset: 0) {\n      totalCount\n      limit\n      offset\n      nodes {\n        id\n        legacyId\n        createdAt\n        settings\n        type\n        name\n        slug\n        description\n        longDescription\n        currency\n        totalHostedAccounts\n        hostFeePercent\n        isTrustedHost\n        location {\n          id\n          country\n        }\n        tags\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DuplicateAccount(\n    $account: AccountReferenceInput!\n    $include: DuplicateAccountDataTypeInput\n    $oldName: String\n  ) {\n    duplicateAccount(account: $account, include: $include, connect: true, oldName: $oldName) {\n      id\n      legacyId\n      slug\n      duplicatedFromAccount {\n        id\n        legacyId\n        slug\n        name\n      }\n      projects: childrenAccounts(accountType: PROJECT) {\n        totalCount\n      }\n      events: childrenAccounts(accountType: EVENT) {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DuplicateAccount(\n    $account: AccountReferenceInput!\n    $include: DuplicateAccountDataTypeInput\n    $oldName: String\n  ) {\n    duplicateAccount(account: $account, include: $include, connect: true, oldName: $oldName) {\n      id\n      legacyId\n      slug\n      duplicatedFromAccount {\n        id\n        legacyId\n        slug\n        name\n      }\n      projects: childrenAccounts(accountType: PROJECT) {\n        totalCount\n      }\n      events: childrenAccounts(accountType: EVENT) {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ApplyToHostFields on Host {\n    id\n    legacyId\n    type\n    slug\n    name\n    createdAt\n    currency\n    isOpenToApplications\n    termsUrl\n    longDescription\n    hostFeePercent\n    settings\n    policies {\n      id\n      COLLECTIVE_MINIMUM_ADMINS {\n        numberOfAdmins\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ApplyToHostFields on Host {\n    id\n    legacyId\n    type\n    slug\n    name\n    createdAt\n    currency\n    isOpenToApplications\n    termsUrl\n    longDescription\n    hostFeePercent\n    settings\n    policies {\n      id\n      COLLECTIVE_MINIMUM_ADMINS {\n        numberOfAdmins\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ApplyToHostAccountFields on Account {\n    id\n    slug\n    name\n    type\n    imageUrl\n    memberInvitations(role: [ADMIN]) {\n      id\n      role\n      memberAccount {\n        id\n        type\n        slug\n        name\n        imageUrl\n      }\n    }\n    admins: members(role: ADMIN) {\n      nodes {\n        id\n        role\n        account {\n          id\n          type\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ApplyToHostAccountFields on Account {\n    id\n    slug\n    name\n    type\n    imageUrl\n    memberInvitations(role: [ADMIN]) {\n      id\n      role\n      memberAccount {\n        id\n        type\n        slug\n        name\n        imageUrl\n      }\n    }\n    admins: members(role: ADMIN) {\n      nodes {\n        id\n        role\n        account {\n          id\n          type\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ApplyToHost($hostSlug: String!, $collectiveSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      ...ApplyToHostFields\n    }\n    account(slug: $collectiveSlug) {\n      id\n      ...ApplyToHostAccountFields\n    }\n  }\n  \n  \n"): (typeof documents)["\n  query ApplyToHost($hostSlug: String!, $collectiveSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      ...ApplyToHostFields\n    }\n    account(slug: $collectiveSlug) {\n      id\n      ...ApplyToHostAccountFields\n    }\n  }\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ApplyToHostWithAccounts($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      ...ApplyToHostFields\n    }\n    loggedInAccount {\n      id\n      memberOf(role: ADMIN, accountType: [COLLECTIVE, FUND], isApproved: false, isArchived: false) {\n        nodes {\n          id\n          account {\n            id\n            ...ApplyToHostAccountFields\n            ... on AccountWithHost {\n              host {\n                id\n                legacyId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  \n"): (typeof documents)["\n  query ApplyToHostWithAccounts($hostSlug: String!) {\n    host(slug: $hostSlug) {\n      id\n      ...ApplyToHostFields\n    }\n    loggedInAccount {\n      id\n      memberOf(role: ADMIN, accountType: [COLLECTIVE, FUND], isApproved: false, isArchived: false) {\n        nodes {\n          id\n          account {\n            id\n            ...ApplyToHostAccountFields\n            ... on AccountWithHost {\n              host {\n                id\n                legacyId\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ApplyToNewHost(\n    $collective: AccountReferenceInput!\n    $host: AccountReferenceInput!\n    $message: String\n    $inviteMembers: [InviteMemberInput]\n  ) {\n    applyToHost(collective: $collective, host: $host, message: $message, inviteMembers: $inviteMembers) {\n      id\n      slug\n      ... on AccountWithHost {\n        isActive\n        isApproved\n        host {\n          id\n          ...ApplyToHostFields\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation ApplyToNewHost(\n    $collective: AccountReferenceInput!\n    $host: AccountReferenceInput!\n    $message: String\n    $inviteMembers: [InviteMemberInput]\n  ) {\n    applyToHost(collective: $collective, host: $host, message: $message, inviteMembers: $inviteMembers) {\n      id\n      slug\n      ... on AccountWithHost {\n        isActive\n        isApproved\n        host {\n          id\n          ...ApplyToHostFields\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MemberFields on Member {\n    id\n    role\n    since\n    createdAt\n    description\n    inherited\n    account {\n      id\n      name\n      slug\n      type\n      imageUrl(height: 64)\n      ... on Individual {\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment MemberFields on Member {\n    id\n    role\n    since\n    createdAt\n    description\n    inherited\n    account {\n      id\n      name\n      slug\n      type\n      imageUrl(height: 64)\n      ... on Individual {\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TeamSection($collectiveSlug: String!, $account: AccountReferenceInput!) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      isFrozen\n      type\n      imageUrl(height: 256)\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          type\n          name\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          features {\n            id\n            CONTACT_FORM\n          }\n          policies {\n            id\n            COLLECTIVE_MINIMUM_ADMINS {\n              numberOfAdmins\n              applies\n              freeze\n            }\n          }\n        }\n      }\n      members(role: [ADMIN, MEMBER, ACCOUNTANT], limit: 100) {\n        nodes {\n          id\n          ...MemberFields\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          slug\n          type\n          name\n          members(includeInherited: false, role: [ADMIN, MEMBER, ACCOUNTANT], limit: 100) {\n            nodes {\n              id\n              ...MemberFields\n            }\n          }\n        }\n      }\n    }\n    memberInvitations(account: $account) {\n      id\n      role\n      since\n      createdAt\n      description\n      account: memberAccount {\n        id\n        name\n        slug\n        type\n        imageUrl(height: 64)\n        ... on Individual {\n          email\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query TeamSection($collectiveSlug: String!, $account: AccountReferenceInput!) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      isFrozen\n      type\n      imageUrl(height: 256)\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          type\n          name\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          features {\n            id\n            CONTACT_FORM\n          }\n          policies {\n            id\n            COLLECTIVE_MINIMUM_ADMINS {\n              numberOfAdmins\n              applies\n              freeze\n            }\n          }\n        }\n      }\n      members(role: [ADMIN, MEMBER, ACCOUNTANT], limit: 100) {\n        nodes {\n          id\n          ...MemberFields\n        }\n      }\n      childrenAccounts {\n        nodes {\n          id\n          slug\n          type\n          name\n          members(includeInherited: false, role: [ADMIN, MEMBER, ACCOUNTANT], limit: 100) {\n            nodes {\n              id\n              ...MemberFields\n            }\n          }\n        }\n      }\n    }\n    memberInvitations(account: $account) {\n      id\n      role\n      since\n      createdAt\n      description\n      account: memberAccount {\n        id\n        name\n        slug\n        type\n        imageUrl(height: 64)\n        ... on Individual {\n          email\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ResendDraftExpenseInvite($expense: ExpenseReferenceInput!) {\n    resendDraftExpenseInvite(expense: $expense) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation ResendDraftExpenseInvite($expense: ExpenseReferenceInput!) {\n    resendDraftExpenseInvite(expense: $expense) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query QuoteExpense($id: String!) {\n    expense(expense: { id: $id }) {\n      id\n      currency\n      reference\n      amountInHostCurrency: amountV2(currencySource: HOST) {\n        exchangeRate {\n          value\n          fromCurrency\n          toCurrency\n        }\n      }\n      host {\n        id\n        transferwise {\n          id\n          amountBatched {\n            valueInCents\n            currency\n          }\n          balances {\n            valueInCents\n            currency\n          }\n        }\n      }\n      quote {\n        paymentProcessorFeeAmount {\n          valueInCents\n          currency\n        }\n        sourceAmount {\n          valueInCents\n          currency\n        }\n        estimatedDeliveryAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query QuoteExpense($id: String!) {\n    expense(expense: { id: $id }) {\n      id\n      currency\n      reference\n      amountInHostCurrency: amountV2(currencySource: HOST) {\n        exchangeRate {\n          value\n          fromCurrency\n          toCurrency\n        }\n      }\n      host {\n        id\n        transferwise {\n          id\n          amountBatched {\n            valueInCents\n            currency\n          }\n          balances {\n            valueInCents\n            currency\n          }\n        }\n      }\n      quote {\n        paymentProcessorFeeAmount {\n          valueInCents\n          currency\n        }\n        sourceAmount {\n          valueInCents\n          currency\n        }\n        estimatedDeliveryAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ValidateTransferRequirements($id: String!, $details: JSON) {\n    expense(expense: { id: $id }) {\n      id\n      validateTransferRequirements(details: $details) {\n        type\n        fields {\n          name\n          group {\n            key\n            name\n            type\n            required\n            example\n            minLength\n            maxLength\n            validationRegexp\n            refreshRequirementsOnChange\n            valuesAllowed {\n              key\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ValidateTransferRequirements($id: String!, $details: JSON) {\n    expense(expense: { id: $id }) {\n      id\n      validateTransferRequirements(details: $details) {\n        type\n        fields {\n          name\n          group {\n            key\n            name\n            type\n            required\n            example\n            minLength\n            maxLength\n            validationRegexp\n            refreshRequirementsOnChange\n            valuesAllowed {\n              key\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemovePayoutMethod($id: String!) {\n    removePayoutMethod(payoutMethodId: $id) {\n      id\n      isSaved\n    }\n  }\n"): (typeof documents)["\n  mutation RemovePayoutMethod($id: String!) {\n    removePayoutMethod(payoutMethodId: $id) {\n      id\n      isSaved\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment LoggedInAccountExpensePayoutFields on Individual {\n    id\n    slug\n    imageUrl\n    type\n    name\n    legalName\n    hasTwoFactorAuth\n    location {\n      id\n      address\n      country\n      structured\n    }\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n    adminMemberships: memberOf(role: ADMIN, includeIncognito: false, accountType: [ORGANIZATION, COLLECTIVE, FUND]) {\n      nodes {\n        id\n        account {\n          id\n          legacyId\n          slug\n          imageUrl\n          type\n          name\n          legalName\n          isActive\n          isHost\n          policies {\n            id\n            REQUIRE_2FA_FOR_ADMINS\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n              legacyId\n              slug\n              policies {\n                id\n                REQUIRE_2FA_FOR_ADMINS\n              }\n            }\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              payoutMethods {\n                id\n                type\n                name\n                data\n                isSaved\n              }\n            }\n          }\n          ... on Organization {\n            host {\n              id\n              payoutMethods {\n                id\n                type\n                name\n                data\n                isSaved\n              }\n            }\n          }\n          location {\n            id\n            address\n            country\n            structured\n          }\n          payoutMethods {\n            id\n            type\n            name\n            data\n            isSaved\n          }\n          childrenAccounts {\n            nodes {\n              id\n              slug\n              imageUrl\n              type\n              name\n              isActive\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment LoggedInAccountExpensePayoutFields on Individual {\n    id\n    slug\n    imageUrl\n    type\n    name\n    legalName\n    hasTwoFactorAuth\n    location {\n      id\n      address\n      country\n      structured\n    }\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n    adminMemberships: memberOf(role: ADMIN, includeIncognito: false, accountType: [ORGANIZATION, COLLECTIVE, FUND]) {\n      nodes {\n        id\n        account {\n          id\n          legacyId\n          slug\n          imageUrl\n          type\n          name\n          legalName\n          isActive\n          isHost\n          policies {\n            id\n            REQUIRE_2FA_FOR_ADMINS\n          }\n          ... on AccountWithParent {\n            parent {\n              id\n              legacyId\n              slug\n              policies {\n                id\n                REQUIRE_2FA_FOR_ADMINS\n              }\n            }\n          }\n          ... on AccountWithHost {\n            host {\n              id\n              payoutMethods {\n                id\n                type\n                name\n                data\n                isSaved\n              }\n            }\n          }\n          ... on Organization {\n            host {\n              id\n              payoutMethods {\n                id\n                type\n                name\n                data\n                isSaved\n              }\n            }\n          }\n          location {\n            id\n            address\n            country\n            structured\n          }\n          payoutMethods {\n            id\n            type\n            name\n            data\n            isSaved\n          }\n          childrenAccounts {\n            nodes {\n              id\n              slug\n              imageUrl\n              type\n              name\n              isActive\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AccountingCategoryFields on AccountingCategory {\n    id\n    name\n    kind\n    instructions\n    friendlyName\n    code\n    expensesTypes\n    appliesTo\n  }\n"): (typeof documents)["\n  fragment AccountingCategoryFields on AccountingCategory {\n    id\n    name\n    kind\n    instructions\n    friendlyName\n    code\n    expensesTypes\n    appliesTo\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ExpenseHostFields on Host {\n    id\n    legacyId\n    name\n    legalName\n    slug\n    type\n    currency\n    isHost\n    expensePolicy\n    website\n    settings\n    features {\n      id\n      MULTI_CURRENCY_EXPENSES\n      PAYPAL_PAYOUTS\n    }\n    paypalPreApproval {\n      id\n      balance {\n        currency\n        valueInCents\n      }\n    }\n    location {\n      id\n      address\n      country\n    }\n    transferwise {\n      id\n      availableCurrencies\n    }\n    supportedPayoutMethods\n    isTrustedHost\n    plan {\n      id\n    }\n    expenseAccountingCategories: accountingCategories(kind: EXPENSE) {\n      nodes {\n        id\n        ...AccountingCategoryFields\n      }\n    }\n    policies {\n      id\n      EXPENSE_CATEGORIZATION {\n        requiredForExpenseSubmitters\n        requiredForCollectiveAdmins\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment ExpenseHostFields on Host {\n    id\n    legacyId\n    name\n    legalName\n    slug\n    type\n    currency\n    isHost\n    expensePolicy\n    website\n    settings\n    features {\n      id\n      MULTI_CURRENCY_EXPENSES\n      PAYPAL_PAYOUTS\n    }\n    paypalPreApproval {\n      id\n      balance {\n        currency\n        valueInCents\n      }\n    }\n    location {\n      id\n      address\n      country\n    }\n    transferwise {\n      id\n      availableCurrencies\n    }\n    supportedPayoutMethods\n    isTrustedHost\n    plan {\n      id\n    }\n    expenseAccountingCategories: accountingCategories(kind: EXPENSE) {\n      nodes {\n        id\n        ...AccountingCategoryFields\n      }\n    }\n    policies {\n      id\n      EXPENSE_CATEGORIZATION {\n        requiredForExpenseSubmitters\n        requiredForCollectiveAdmins\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ExpenseValuesByRoleFragment on ExpenseValuesByRole {\n    id\n    submitter {\n      accountingCategory {\n        ...AccountingCategoryFields\n      }\n    }\n    accountAdmin {\n      accountingCategory {\n        ...AccountingCategoryFields\n      }\n    }\n    hostAdmin {\n      accountingCategory {\n        ...AccountingCategoryFields\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment ExpenseValuesByRoleFragment on ExpenseValuesByRole {\n    id\n    submitter {\n      accountingCategory {\n        ...AccountingCategoryFields\n      }\n    }\n    accountAdmin {\n      accountingCategory {\n        ...AccountingCategoryFields\n      }\n    }\n    hostAdmin {\n      accountingCategory {\n        ...AccountingCategoryFields\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ExpensePayeeFields on Account {\n    id\n    slug\n    name\n    legalName\n    imageUrl\n    type\n    isAdmin\n    isActive\n    description\n    ...AccountHoverCardFields\n    location {\n      id\n      address\n      country\n    }\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n\n    # For Collectives, Funds, Events and Projects\n    ... on AccountWithHost {\n      isApproved\n      host {\n        id\n        slug\n        # For Expenses across hosts\n        payoutMethods {\n          id\n          type\n          name\n          data\n          isSaved\n        }\n      }\n    }\n\n    # For Fiscal Hosts\n    ... on Organization {\n      host {\n        id\n        slug\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ExpensePayeeFields on Account {\n    id\n    slug\n    name\n    legalName\n    imageUrl\n    type\n    isAdmin\n    isActive\n    description\n    ...AccountHoverCardFields\n    location {\n      id\n      address\n      country\n    }\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n\n    # For Collectives, Funds, Events and Projects\n    ... on AccountWithHost {\n      isApproved\n      host {\n        id\n        slug\n        # For Expenses across hosts\n        payoutMethods {\n          id\n          type\n          name\n          data\n          isSaved\n        }\n      }\n    }\n\n    # For Fiscal Hosts\n    ... on Organization {\n      host {\n        id\n        slug\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ExpensePageExpenseFields on Expense {\n    id\n    legacyId\n    description\n    longDescription\n    currency\n    type\n    status\n    onHold\n    privateMessage\n    reference\n    tags\n    amount\n    accountingCategory {\n      id\n      ...AccountingCategoryFields\n    }\n    valuesByRole {\n      id\n      ...ExpenseValuesByRoleFragment\n    }\n    amountInAccountCurrency: amountV2(currencySource: ACCOUNT) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    amountInHostCurrency: amountV2(currencySource: HOST) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    createdAt\n    invoiceInfo\n    merchantId\n    requiredLegalDocuments\n    receivedTaxForms: legalDocuments(type: US_TAX_FORM, status: RECEIVED) {\n      nodes {\n        id\n        type\n        documentLink\n        year\n      }\n    }\n    feesPayer\n    draft\n    items {\n      id\n      incurredAt\n      description\n      amount\n      amountV2 {\n        valueInCents\n        currency\n        exchangeRate {\n          date\n          value\n          source\n          fromCurrency\n          toCurrency\n        }\n      }\n      referenceExchangeRate {\n        value\n        fromCurrency\n        toCurrency\n      }\n      url\n      file {\n        id\n        type\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    taxes {\n      id\n      type\n      rate\n      idNumber\n    }\n    invoiceFile {\n      id\n      url\n      name\n      type\n      size\n      ... on ImageFileInfo {\n        width\n      }\n    }\n    attachedFiles {\n      id\n      url\n      name\n      info {\n        id\n        type\n        name\n        size\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    payee {\n      id\n      ...ExpensePayeeFields\n    }\n    payeeLocation {\n      id\n      address\n      country\n      structured\n    }\n    createdByAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      legacyId\n      ...AccountHoverCardFields\n    }\n    host {\n      id\n      ...ExpenseHostFields\n    }\n    requestedByAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      ...AccountHoverCardFields\n    }\n    approvedBy {\n      id\n      type\n      slug\n      name\n      imageUrl\n      ...AccountHoverCardFields\n    }\n    account {\n      id\n      legacyId\n      slug\n      name\n      type\n      imageUrl\n      backgroundImageUrl\n      isActive\n      description\n      settings\n      twitterHandle\n      currency\n      expensePolicy\n      supportedExpenseTypes\n      features {\n        id\n        ...NavbarFields\n        MULTI_CURRENCY_EXPENSES\n      }\n      location {\n        id\n        address\n        country\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        hostAgreements {\n          totalCount\n        }\n        host {\n          id\n          slug\n          legacyId\n          ...ExpenseHostFields\n          transferwise {\n            id\n            availableCurrencies\n          }\n        }\n      }\n\n      # For Hosts with Budget capabilities\n\n      ... on Organization {\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n          transferwise {\n            id\n            availableCurrencies\n          }\n        }\n      }\n\n      ... on Event {\n        parent {\n          id\n          slug\n          name\n          type\n          imageUrl\n        }\n      }\n      ... on Project {\n        parent {\n          id\n          slug\n          name\n          type\n          imageUrl\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    payoutMethod {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n    virtualCard {\n      id\n      name\n      last4\n    }\n    permissions {\n      id\n      canEdit\n      canEditTags\n      canEditAccountingCategory\n      canDelete\n      canSeeInvoiceInfo\n      canApprove\n      canUnapprove\n      canReject\n      canMarkAsSpam\n      canPay\n      canMarkAsUnpaid\n      canMarkAsIncomplete\n      canComment\n      canUnschedulePayment\n      canVerifyDraftExpense\n      canUsePrivateNote\n      canHold\n      canRelease\n      canDownloadTaxForm\n      canSeePayoutMethodPrivateDetails\n      approve {\n        allowed\n        reason\n        reasonDetails\n      }\n    }\n    lockedFields\n    activities {\n      id\n      type\n      createdAt\n      data\n      account {\n        id\n        slug\n        ... on AccountWithHost {\n          host {\n            id\n            slug\n          }\n        }\n      }\n      individual {\n        id\n        type\n        slug\n        name\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      transaction {\n        id\n        kind\n        type\n        amount {\n          valueInCents\n          currency\n        }\n        platformFee {\n          valueInCents\n          currency\n        }\n        hostFee {\n          valueInCents\n          currency\n        }\n        paymentProcessorFee {\n          valueInCents\n          currency\n        }\n        netAmount {\n          valueInCents\n          currency\n        }\n        taxAmount {\n          valueInCents\n          currency\n        }\n        taxInfo {\n          id\n          rate\n          type\n          percentage\n        }\n        fromAccount {\n          id\n          slug\n          name\n          ... on AccountWithHost {\n            hostFeePercent\n          }\n        }\n        toAccount {\n          id\n          slug\n          name\n          ... on AccountWithHost {\n            hostFeePercent\n          }\n        }\n        expense {\n          id\n          currency\n          amount\n          feesPayer\n        }\n        relatedTransactions(kind: PAYMENT_PROCESSOR_FEE) {\n          id\n          type\n          kind\n          amount {\n            valueInCents\n            currency\n          }\n        }\n      }\n    }\n    recurringExpense {\n      id\n      interval\n      endsAt\n    }\n    securityChecks {\n      level\n      message\n      scope\n      details\n    }\n  }\n\n  \n  \n  \n  \n  \n  \n"): (typeof documents)["\n  fragment ExpensePageExpenseFields on Expense {\n    id\n    legacyId\n    description\n    longDescription\n    currency\n    type\n    status\n    onHold\n    privateMessage\n    reference\n    tags\n    amount\n    accountingCategory {\n      id\n      ...AccountingCategoryFields\n    }\n    valuesByRole {\n      id\n      ...ExpenseValuesByRoleFragment\n    }\n    amountInAccountCurrency: amountV2(currencySource: ACCOUNT) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    amountInHostCurrency: amountV2(currencySource: HOST) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    createdAt\n    invoiceInfo\n    merchantId\n    requiredLegalDocuments\n    receivedTaxForms: legalDocuments(type: US_TAX_FORM, status: RECEIVED) {\n      nodes {\n        id\n        type\n        documentLink\n        year\n      }\n    }\n    feesPayer\n    draft\n    items {\n      id\n      incurredAt\n      description\n      amount\n      amountV2 {\n        valueInCents\n        currency\n        exchangeRate {\n          date\n          value\n          source\n          fromCurrency\n          toCurrency\n        }\n      }\n      referenceExchangeRate {\n        value\n        fromCurrency\n        toCurrency\n      }\n      url\n      file {\n        id\n        type\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    taxes {\n      id\n      type\n      rate\n      idNumber\n    }\n    invoiceFile {\n      id\n      url\n      name\n      type\n      size\n      ... on ImageFileInfo {\n        width\n      }\n    }\n    attachedFiles {\n      id\n      url\n      name\n      info {\n        id\n        type\n        name\n        size\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    payee {\n      id\n      ...ExpensePayeeFields\n    }\n    payeeLocation {\n      id\n      address\n      country\n      structured\n    }\n    createdByAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      legacyId\n      ...AccountHoverCardFields\n    }\n    host {\n      id\n      ...ExpenseHostFields\n    }\n    requestedByAccount {\n      id\n      slug\n      name\n      type\n      imageUrl\n      ...AccountHoverCardFields\n    }\n    approvedBy {\n      id\n      type\n      slug\n      name\n      imageUrl\n      ...AccountHoverCardFields\n    }\n    account {\n      id\n      legacyId\n      slug\n      name\n      type\n      imageUrl\n      backgroundImageUrl\n      isActive\n      description\n      settings\n      twitterHandle\n      currency\n      expensePolicy\n      supportedExpenseTypes\n      features {\n        id\n        ...NavbarFields\n        MULTI_CURRENCY_EXPENSES\n      }\n      location {\n        id\n        address\n        country\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        hostAgreements {\n          totalCount\n        }\n        host {\n          id\n          slug\n          legacyId\n          ...ExpenseHostFields\n          transferwise {\n            id\n            availableCurrencies\n          }\n        }\n      }\n\n      # For Hosts with Budget capabilities\n\n      ... on Organization {\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n          transferwise {\n            id\n            availableCurrencies\n          }\n        }\n      }\n\n      ... on Event {\n        parent {\n          id\n          slug\n          name\n          type\n          imageUrl\n        }\n      }\n      ... on Project {\n        parent {\n          id\n          slug\n          name\n          type\n          imageUrl\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    payoutMethod {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n    virtualCard {\n      id\n      name\n      last4\n    }\n    permissions {\n      id\n      canEdit\n      canEditTags\n      canEditAccountingCategory\n      canDelete\n      canSeeInvoiceInfo\n      canApprove\n      canUnapprove\n      canReject\n      canMarkAsSpam\n      canPay\n      canMarkAsUnpaid\n      canMarkAsIncomplete\n      canComment\n      canUnschedulePayment\n      canVerifyDraftExpense\n      canUsePrivateNote\n      canHold\n      canRelease\n      canDownloadTaxForm\n      canSeePayoutMethodPrivateDetails\n      approve {\n        allowed\n        reason\n        reasonDetails\n      }\n    }\n    lockedFields\n    activities {\n      id\n      type\n      createdAt\n      data\n      account {\n        id\n        slug\n        ... on AccountWithHost {\n          host {\n            id\n            slug\n          }\n        }\n      }\n      individual {\n        id\n        type\n        slug\n        name\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      transaction {\n        id\n        kind\n        type\n        amount {\n          valueInCents\n          currency\n        }\n        platformFee {\n          valueInCents\n          currency\n        }\n        hostFee {\n          valueInCents\n          currency\n        }\n        paymentProcessorFee {\n          valueInCents\n          currency\n        }\n        netAmount {\n          valueInCents\n          currency\n        }\n        taxAmount {\n          valueInCents\n          currency\n        }\n        taxInfo {\n          id\n          rate\n          type\n          percentage\n        }\n        fromAccount {\n          id\n          slug\n          name\n          ... on AccountWithHost {\n            hostFeePercent\n          }\n        }\n        toAccount {\n          id\n          slug\n          name\n          ... on AccountWithHost {\n            hostFeePercent\n          }\n        }\n        expense {\n          id\n          currency\n          amount\n          feesPayer\n        }\n        relatedTransactions(kind: PAYMENT_PROCESSOR_FEE) {\n          id\n          type\n          kind\n          amount {\n            valueInCents\n            currency\n          }\n        }\n      }\n    }\n    recurringExpense {\n      id\n      interval\n      endsAt\n    }\n    securityChecks {\n      level\n      message\n      scope\n      details\n    }\n  }\n\n  \n  \n  \n  \n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ExpensesListFieldsFragment on Expense {\n    id\n    legacyId\n    description\n    reference\n    status\n    createdAt\n    tags\n    amount\n    comments {\n      totalCount\n    }\n    accountingCategory {\n      id\n      ...AccountingCategoryFields\n    }\n    valuesByRole {\n      id\n      ...ExpenseValuesByRoleFragment\n    }\n    amountInAccountCurrency: amountV2(currencySource: ACCOUNT) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    amountInHostCurrency: amountV2(currencySource: HOST) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    currency\n    type\n    requiredLegalDocuments\n    feesPayer\n    account {\n      id\n      name\n      slug\n      createdAt\n      currency\n      type\n      imageUrl\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    permissions {\n      id\n      canDelete\n      canApprove\n      canUnapprove\n      canReject\n      canMarkAsSpam\n      canPay\n      canMarkAsUnpaid\n      canMarkAsIncomplete\n      canSeeInvoiceInfo\n      canEditTags\n      canEditAccountingCategory\n      canUnschedulePayment\n      canHold\n      canRelease\n      approve {\n        allowed\n        reason\n        reasonDetails\n      }\n    }\n    payoutMethod {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n    payee {\n      id\n      type\n      slug\n      name\n      imageUrl\n      isAdmin\n      # For Collectives, Funds, Events and Projects\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n        }\n      }\n\n      # For Fiscal Hosts\n      ... on Organization {\n        host {\n          id\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    createdByAccount {\n      id\n      type\n      slug\n      name\n      legacyId\n      ...AccountHoverCardFields\n    }\n  }\n  \n  \n  \n"): (typeof documents)["\n  fragment ExpensesListFieldsFragment on Expense {\n    id\n    legacyId\n    description\n    reference\n    status\n    createdAt\n    tags\n    amount\n    comments {\n      totalCount\n    }\n    accountingCategory {\n      id\n      ...AccountingCategoryFields\n    }\n    valuesByRole {\n      id\n      ...ExpenseValuesByRoleFragment\n    }\n    amountInAccountCurrency: amountV2(currencySource: ACCOUNT) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    amountInHostCurrency: amountV2(currencySource: HOST) {\n      valueInCents\n      currency\n      exchangeRate {\n        date\n        value\n        source\n        isApproximate\n        fromCurrency\n        toCurrency\n      }\n    }\n    currency\n    type\n    requiredLegalDocuments\n    feesPayer\n    account {\n      id\n      name\n      slug\n      createdAt\n      currency\n      type\n      imageUrl\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    permissions {\n      id\n      canDelete\n      canApprove\n      canUnapprove\n      canReject\n      canMarkAsSpam\n      canPay\n      canMarkAsUnpaid\n      canMarkAsIncomplete\n      canSeeInvoiceInfo\n      canEditTags\n      canEditAccountingCategory\n      canUnschedulePayment\n      canHold\n      canRelease\n      approve {\n        allowed\n        reason\n        reasonDetails\n      }\n    }\n    payoutMethod {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n    payee {\n      id\n      type\n      slug\n      name\n      imageUrl\n      isAdmin\n      # For Collectives, Funds, Events and Projects\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n        }\n      }\n\n      # For Fiscal Hosts\n      ... on Organization {\n        host {\n          id\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    createdByAccount {\n      id\n      type\n      slug\n      name\n      legacyId\n      ...AccountHoverCardFields\n    }\n  }\n  \n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ExpensesListAdminFieldsFragment on Expense {\n    id\n    onHold\n    account {\n      id\n    }\n    createdByAccount {\n      id\n      ... on Individual {\n        emails\n      }\n    }\n    approvedBy {\n      id\n      type\n      slug\n      name\n      imageUrl\n      ...AccountHoverCardFields\n    }\n    payee {\n      id\n      ... on Individual {\n        emails\n      }\n    }\n    payoutMethod {\n      id\n      type\n      name\n      data\n    }\n    items {\n      id\n      description\n      incurredAt\n      url\n      amount\n      file {\n        id\n        type\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    taxes {\n      id\n      type\n      rate\n    }\n    invoiceFile {\n      id\n      url\n      name\n      type\n      size\n      ... on ImageFileInfo {\n        width\n      }\n    }\n    attachedFiles {\n      id\n      url\n      name\n      info {\n        id\n        type\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    securityChecks {\n      level\n      message\n      scope\n      details\n    }\n    lastComment: comments(limit: 1, orderBy: { field: CREATED_AT, direction: DESC }) {\n      totalCount\n      nodes {\n        id\n        createdAt\n        fromAccount {\n          id\n          type\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ExpensesListAdminFieldsFragment on Expense {\n    id\n    onHold\n    account {\n      id\n    }\n    createdByAccount {\n      id\n      ... on Individual {\n        emails\n      }\n    }\n    approvedBy {\n      id\n      type\n      slug\n      name\n      imageUrl\n      ...AccountHoverCardFields\n    }\n    payee {\n      id\n      ... on Individual {\n        emails\n      }\n    }\n    payoutMethod {\n      id\n      type\n      name\n      data\n    }\n    items {\n      id\n      description\n      incurredAt\n      url\n      amount\n      file {\n        id\n        type\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    taxes {\n      id\n      type\n      rate\n    }\n    invoiceFile {\n      id\n      url\n      name\n      type\n      size\n      ... on ImageFileInfo {\n        width\n      }\n    }\n    attachedFiles {\n      id\n      url\n      name\n      info {\n        id\n        type\n        ... on ImageFileInfo {\n          width\n        }\n      }\n    }\n    securityChecks {\n      level\n      message\n      scope\n      details\n    }\n    lastComment: comments(limit: 1, orderBy: { field: CREATED_AT, direction: DESC }) {\n      totalCount\n      nodes {\n        id\n        createdAt\n        fromAccount {\n          id\n          type\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditExpense($expense: ExpenseUpdateInput!, $draftKey: String) {\n    editExpense(expense: $expense, draftKey: $draftKey) {\n      id\n      ...ExpensePageExpenseFields\n    }\n  }\n\n  \n"): (typeof documents)["\n  mutation EditExpense($expense: ExpenseUpdateInput!, $draftKey: String) {\n    editExpense(expense: $expense, draftKey: $draftKey) {\n      id\n      ...ExpensePageExpenseFields\n    }\n  }\n\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditExpenseCategory($expenseId: String!, $category: AccountingCategoryReferenceInput) {\n    editExpense(expense: { id: $expenseId, accountingCategory: $category }) {\n      id\n      valuesByRole {\n        id\n        ...ExpenseValuesByRoleFragment\n      }\n      accountingCategory {\n        id\n        ...AccountingCategoryFields\n      }\n    }\n  }\n  \n  \n"): (typeof documents)["\n  mutation EditExpenseCategory($expenseId: String!, $category: AccountingCategoryReferenceInput) {\n    editExpense(expense: { id: $expenseId, accountingCategory: $category }) {\n      id\n      valuesByRole {\n        id\n        ...ExpenseValuesByRoleFragment\n      }\n      accountingCategory {\n        id\n        ...AccountingCategoryFields\n      }\n    }\n  }\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ExpensePage($legacyExpenseId: Int!, $draftKey: String, $offset: Int, $totalPaidExpensesDateFrom: DateTime) {\n    expense(expense: { legacyId: $legacyExpenseId }, draftKey: $draftKey) {\n      id\n      ...ExpensePageExpenseFields\n      payee {\n        id\n        ...ExpensePayeeFields\n        stats {\n          id\n          totalPaidExpenses(dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidInvoices: totalPaidExpenses(expenseType: [INVOICE], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidReceipts: totalPaidExpenses(expenseType: [RECEIPT], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidGrants: totalPaidExpenses(expenseType: [GRANT], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n        }\n      }\n      permissions {\n        canDeclineExpenseInvite(draftKey: $draftKey)\n      }\n      comments(limit: 100, offset: $offset) {\n        totalCount\n        nodes {\n          id\n          ...CommentFields\n        }\n      }\n    }\n\n    loggedInAccount {\n      id\n      ...LoggedInAccountExpensePayoutFields\n    }\n  }\n\n  \n  \n  \n  \n"): (typeof documents)["\n  query ExpensePage($legacyExpenseId: Int!, $draftKey: String, $offset: Int, $totalPaidExpensesDateFrom: DateTime) {\n    expense(expense: { legacyId: $legacyExpenseId }, draftKey: $draftKey) {\n      id\n      ...ExpensePageExpenseFields\n      payee {\n        id\n        ...ExpensePayeeFields\n        stats {\n          id\n          totalPaidExpenses(dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidInvoices: totalPaidExpenses(expenseType: [INVOICE], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidReceipts: totalPaidExpenses(expenseType: [RECEIPT], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n          totalPaidGrants: totalPaidExpenses(expenseType: [GRANT], dateFrom: $totalPaidExpensesDateFrom) {\n            valueInCents\n            currency\n          }\n        }\n      }\n      permissions {\n        canDeclineExpenseInvite(draftKey: $draftKey)\n      }\n      comments(limit: 100, offset: $offset) {\n        totalCount\n        nodes {\n          id\n          ...CommentFields\n        }\n      }\n    }\n\n    loggedInAccount {\n      id\n      ...LoggedInAccountExpensePayoutFields\n    }\n  }\n\n  \n  \n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MemberInvitationsCount($memberAccount: AccountReferenceInput!) {\n    memberInvitations(memberAccount: $memberAccount) {\n      id\n    }\n  }\n"): (typeof documents)["\n  query MemberInvitationsCount($memberAccount: AccountReferenceInput!) {\n    memberInvitations(memberAccount: $memberAccount) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditOrderAccountingCategory($order: OrderReferenceInput!, $category: AccountingCategoryReferenceInput) {\n    updateOrderAccountingCategory(order: $order, accountingCategory: $category) {\n      id\n      accountingCategory {\n        id\n        name\n        code\n        friendlyName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation EditOrderAccountingCategory($order: OrderReferenceInput!, $category: AccountingCategoryReferenceInput) {\n    updateOrderAccountingCategory(order: $order, accountingCategory: $category) {\n      id\n      accountingCategory {\n        id\n        name\n        code\n        friendlyName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PaymentMethodPicker($accountSlug: String!, $hostSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      name\n      paymentMethods(type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID, COLLECTIVE]) {\n        id\n        name\n        data\n        service\n        type\n        account {\n          id\n          name\n          slug\n        }\n        balance {\n          value\n          valueInCents\n          currency\n        }\n        limitedToHosts {\n          id\n        }\n        sourcePaymentMethod {\n          id\n          limitedToHosts {\n            id\n          }\n        }\n      }\n    }\n    host(slug: $hostSlug) {\n      id\n      paypalClientId\n      supportedPaymentMethods\n    }\n  }\n"): (typeof documents)["\n  query PaymentMethodPicker($accountSlug: String!, $hostSlug: String!) {\n    account(slug: $accountSlug) {\n      id\n      name\n      paymentMethods(type: [CREDITCARD, US_BANK_ACCOUNT, SEPA_DEBIT, BACS_DEBIT, GIFTCARD, PREPAID, COLLECTIVE]) {\n        id\n        name\n        data\n        service\n        type\n        account {\n          id\n          name\n          slug\n        }\n        balance {\n          value\n          valueInCents\n          currency\n        }\n        limitedToHosts {\n          id\n        }\n        sourcePaymentMethod {\n          id\n          limitedToHosts {\n            id\n          }\n        }\n      }\n    }\n    host(slug: $hostSlug) {\n      id\n      paypalClientId\n      supportedPaymentMethods\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UpdatePaymentMethodFragment on PaymentMethod {\n    id\n    name\n    data\n    service\n    type\n    expiryDate\n    account {\n      id\n    }\n    balance {\n      value\n      valueInCents\n      currency\n    }\n  }\n"): (typeof documents)["\n  fragment UpdatePaymentMethodFragment on PaymentMethod {\n    id\n    name\n    data\n    service\n    type\n    expiryDate\n    account {\n      id\n    }\n    balance {\n      value\n      valueInCents\n      currency\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ManagedOrderFields on Order {\n    id\n    legacyId\n    nextChargeDate\n    paymentMethod {\n      ...UpdatePaymentMethodFragment\n    }\n    amount {\n      value\n      valueInCents\n      currency\n    }\n    totalAmount {\n      value\n      valueInCents\n      currency\n    }\n    status\n    description\n    memo\n    createdAt\n    processedAt\n    lastChargedAt\n    hostFeePercent\n    frequency\n    tier {\n      id\n      name\n    }\n    tax {\n      id\n      type\n      rate\n      idNumber\n    }\n    permissions {\n      id\n      canResume\n      canMarkAsExpired\n      canMarkAsPaid\n      canEdit\n      canComment\n      canSeePrivateActivities\n      canSetTags\n      canUpdateAccountingCategory\n    }\n    fromAccount {\n      id\n      name\n      slug\n      isIncognito\n      type\n      ... on Individual {\n        isGuest\n      }\n      ...AccountHoverCardFields\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      description\n      tags\n      imageUrl\n      backgroundImageUrl(height: 256)\n      settings\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    platformTipAmount {\n      value\n      valueInCents\n    }\n    paymentProcessorFee {\n      valueInCents\n      currency\n    }\n    pendingContributionData {\n      expectedAt\n      paymentMethod\n      ponumber\n      memo\n      fromAccountInfo {\n        name\n        email\n      }\n    }\n    accountingCategory {\n      id\n      name\n      kind\n      code\n    }\n  }\n  \n  \n"): (typeof documents)["\n  fragment ManagedOrderFields on Order {\n    id\n    legacyId\n    nextChargeDate\n    paymentMethod {\n      ...UpdatePaymentMethodFragment\n    }\n    amount {\n      value\n      valueInCents\n      currency\n    }\n    totalAmount {\n      value\n      valueInCents\n      currency\n    }\n    status\n    description\n    memo\n    createdAt\n    processedAt\n    lastChargedAt\n    hostFeePercent\n    frequency\n    tier {\n      id\n      name\n    }\n    tax {\n      id\n      type\n      rate\n      idNumber\n    }\n    permissions {\n      id\n      canResume\n      canMarkAsExpired\n      canMarkAsPaid\n      canEdit\n      canComment\n      canSeePrivateActivities\n      canSetTags\n      canUpdateAccountingCategory\n    }\n    fromAccount {\n      id\n      name\n      slug\n      isIncognito\n      type\n      ... on Individual {\n        isGuest\n      }\n      ...AccountHoverCardFields\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      description\n      tags\n      imageUrl\n      backgroundImageUrl(height: 256)\n      settings\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ...AccountHoverCardFields\n    }\n    platformTipAmount {\n      value\n      valueInCents\n    }\n    paymentProcessorFee {\n      valueInCents\n      currency\n    }\n    pendingContributionData {\n      expectedAt\n      paymentMethod\n      ponumber\n      memo\n      fromAccountInfo {\n        name\n        email\n      }\n    }\n    accountingCategory {\n      id\n      name\n      kind\n      code\n    }\n  }\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RecurringContributions($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      features {\n        id\n        ...NavbarFields\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      orders(filter: OUTGOING, onlySubscriptions: true, includeIncognito: true) {\n        totalCount\n        nodes {\n          id\n          ...ManagedOrderFields\n          totalDonations {\n            value\n            valueInCents\n            currency\n          }\n        }\n      }\n    }\n  }\n  \n  \n"): (typeof documents)["\n  query RecurringContributions($slug: String!) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      settings\n      imageUrl\n      features {\n        id\n        ...NavbarFields\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n        }\n      }\n      orders(filter: OUTGOING, onlySubscriptions: true, includeIncognito: true) {\n        totalCount\n        nodes {\n          id\n          ...ManagedOrderFields\n          totalDonations {\n            value\n            valueInCents\n            currency\n          }\n        }\n      }\n    }\n  }\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AnonymizeAccount($account: AccountReferenceInput!) {\n    rootAnonymizeAccount(account: $account) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation AnonymizeAccount($account: AccountReferenceInput!) {\n    rootAnonymizeAccount(account: $account) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ClearCache($account: AccountReferenceInput!, $cacheTypes: [AccountCacheType!]) {\n    clearCacheForAccount(account: $account, type: $cacheTypes) {\n      id\n      slug\n      name\n    }\n  }\n"): (typeof documents)["\n  mutation ClearCache($account: AccountReferenceInput!, $cacheTypes: [AccountCacheType!]) {\n    clearCacheForAccount(account: $account, type: $cacheTypes) {\n      id\n      slug\n      name\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SearchAccountFields on Account {\n    id\n    name\n    slug\n    imageUrl(height: $imageHeight)\n    type\n  }\n"): (typeof documents)["\n  fragment SearchAccountFields on Account {\n    id\n    name\n    slug\n    imageUrl(height: $imageHeight)\n    type\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchCommand(\n    $searchTerm: String!\n    $host: AccountReferenceInput\n    $account: AccountReferenceInput\n    $limit: Int!\n    $includeTransactions: Boolean!\n    $imageHeight: Int\n  ) {\n    search(searchTerm: $searchTerm, defaultLimit: $limit, host: $host, account: $account) {\n      results {\n        accounts {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              ...SearchAccountFields\n            }\n          }\n        }\n        comments {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              html\n              createdAt\n              fromAccount {\n                ...SearchAccountFields\n              }\n              expense {\n                id\n                legacyId\n                description\n                account {\n                  ...SearchAccountFields\n                }\n              }\n              update {\n                id\n                legacyId\n                title\n                account {\n                  ...SearchAccountFields\n                }\n              }\n              order {\n                id\n                legacyId\n                toAccount {\n                  ...SearchAccountFields\n                }\n              }\n              hostApplication {\n                id\n                account {\n                  ...SearchAccountFields\n                }\n                host {\n                  ...SearchAccountFields\n                }\n              }\n              conversation {\n                id\n                slug\n                account {\n                  ...SearchAccountFields\n                }\n              }\n            }\n          }\n        }\n        expenses {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              description\n              legacyId\n              type\n              status\n              amountV2 {\n                valueInCents\n                currency\n              }\n              payee {\n                ...SearchAccountFields\n              }\n              account {\n                ...SearchAccountFields\n              }\n            }\n          }\n        }\n        orders @include(if: $includeTransactions) {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              legacyId\n              description\n              status\n              amount {\n                valueInCents\n                currency\n              }\n              toAccount {\n                ...SearchAccountFields\n              }\n              fromAccount {\n                ...SearchAccountFields\n              }\n            }\n          }\n        }\n        transactions @include(if: $includeTransactions) {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              legacyId\n              description\n              type\n              kind\n              netAmount {\n                valueInCents\n                currency\n              }\n              account {\n                ...SearchAccountFields\n              }\n              oppositeAccount {\n                ...SearchAccountFields\n              }\n            }\n          }\n        }\n\n        updates {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              legacyId\n              title\n              account {\n                ...SearchAccountFields\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query SearchCommand(\n    $searchTerm: String!\n    $host: AccountReferenceInput\n    $account: AccountReferenceInput\n    $limit: Int!\n    $includeTransactions: Boolean!\n    $imageHeight: Int\n  ) {\n    search(searchTerm: $searchTerm, defaultLimit: $limit, host: $host, account: $account) {\n      results {\n        accounts {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              ...SearchAccountFields\n            }\n          }\n        }\n        comments {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              html\n              createdAt\n              fromAccount {\n                ...SearchAccountFields\n              }\n              expense {\n                id\n                legacyId\n                description\n                account {\n                  ...SearchAccountFields\n                }\n              }\n              update {\n                id\n                legacyId\n                title\n                account {\n                  ...SearchAccountFields\n                }\n              }\n              order {\n                id\n                legacyId\n                toAccount {\n                  ...SearchAccountFields\n                }\n              }\n              hostApplication {\n                id\n                account {\n                  ...SearchAccountFields\n                }\n                host {\n                  ...SearchAccountFields\n                }\n              }\n              conversation {\n                id\n                slug\n                account {\n                  ...SearchAccountFields\n                }\n              }\n            }\n          }\n        }\n        expenses {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              description\n              legacyId\n              type\n              status\n              amountV2 {\n                valueInCents\n                currency\n              }\n              payee {\n                ...SearchAccountFields\n              }\n              account {\n                ...SearchAccountFields\n              }\n            }\n          }\n        }\n        orders @include(if: $includeTransactions) {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              legacyId\n              description\n              status\n              amount {\n                valueInCents\n                currency\n              }\n              toAccount {\n                ...SearchAccountFields\n              }\n              fromAccount {\n                ...SearchAccountFields\n              }\n            }\n          }\n        }\n        transactions @include(if: $includeTransactions) {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              legacyId\n              description\n              type\n              kind\n              netAmount {\n                valueInCents\n                currency\n              }\n              account {\n                ...SearchAccountFields\n              }\n              oppositeAccount {\n                ...SearchAccountFields\n              }\n            }\n          }\n        }\n\n        updates {\n          highlights\n          collection {\n            totalCount\n            limit\n            nodes {\n              id\n              legacyId\n              title\n              account {\n                ...SearchAccountFields\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchContext($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      slug\n      imageUrl\n      type\n    }\n  }\n"): (typeof documents)["\n  query SearchContext($slug: String!) {\n    account(slug: $slug) {\n      id\n      name\n      slug\n      imageUrl\n      type\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation CreateExpenseFromDashboard(\n        $expenseCreateInput: ExpenseCreateInput!\n        $account: AccountReferenceInput!\n        $recurring: RecurringExpenseInput\n        $privateComment: String\n      ) {\n        expense: createExpense(\n          expense: $expenseCreateInput\n          account: $account\n          privateComment: $privateComment\n          recurring: $recurring\n        ) {\n          id\n          legacyId\n        }\n      }\n    "): (typeof documents)["\n      mutation CreateExpenseFromDashboard(\n        $expenseCreateInput: ExpenseCreateInput!\n        $account: AccountReferenceInput!\n        $recurring: RecurringExpenseInput\n        $privateComment: String\n      ) {\n        expense: createExpense(\n          expense: $expenseCreateInput\n          account: $account\n          privateComment: $privateComment\n          recurring: $recurring\n        ) {\n          id\n          legacyId\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation InviteExpenseFromDashboard(\n        $expenseInviteInput: ExpenseInviteDraftInput!\n        $account: AccountReferenceInput!\n      ) {\n        expense: draftExpenseAndInviteUser(expense: $expenseInviteInput, account: $account) {\n          id\n          legacyId\n        }\n      }\n    "): (typeof documents)["\n      mutation InviteExpenseFromDashboard(\n        $expenseInviteInput: ExpenseInviteDraftInput!\n        $account: AccountReferenceInput!\n      ) {\n        expense: draftExpenseAndInviteUser(expense: $expenseInviteInput, account: $account) {\n          id\n          legacyId\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation EditExpenseFromDashboard($expenseEditInput: ExpenseUpdateInput!, $draftKey: String) {\n        expense: editExpense(expense: $expenseEditInput, draftKey: $draftKey) {\n          id\n          legacyId\n        }\n      }\n    "): (typeof documents)["\n      mutation EditExpenseFromDashboard($expenseEditInput: ExpenseUpdateInput!, $draftKey: String) {\n        expense: editExpense(expense: $expenseEditInput, draftKey: $draftKey) {\n          id\n          legacyId\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      query AccountItem($slug: String!, $showAdmins: Boolean!) {\n        account(slug: $slug) {\n          id\n          legacyId\n          slug\n          name\n          type\n          imageUrl\n\n          admins: members(role: ADMIN) @include(if: $showAdmins) {\n            totalCount\n            nodes {\n              id\n              account {\n                id\n                type\n                slug\n                name\n                imageUrl\n                ...AccountHoverCardFields\n                emails\n              }\n            }\n          }\n\n          ... on AccountWithParent {\n            parent {\n              id\n              legacyId\n              slug\n            }\n          }\n        }\n      }\n      \n    "): (typeof documents)["\n      query AccountItem($slug: String!, $showAdmins: Boolean!) {\n        account(slug: $slug) {\n          id\n          legacyId\n          slug\n          name\n          type\n          imageUrl\n\n          admins: members(role: ADMIN) @include(if: $showAdmins) {\n            totalCount\n            nodes {\n              id\n              account {\n                id\n                type\n                slug\n                name\n                imageUrl\n                ...AccountHoverCardFields\n                emails\n              }\n            }\n          }\n\n          ... on AccountWithParent {\n            parent {\n              id\n              legacyId\n              slug\n            }\n          }\n        }\n      }\n      \n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation SavePayoutMethod($payoutMethod: PayoutMethodInput!, $payeeSlug: String!) {\n        createPayoutMethod(payoutMethod: $payoutMethod, account: { slug: $payeeSlug }) {\n          id\n        }\n      }\n    "): (typeof documents)["\n      mutation SavePayoutMethod($payoutMethod: PayoutMethodInput!, $payeeSlug: String!) {\n        createPayoutMethod(payoutMethod: $payoutMethod, account: { slug: $payeeSlug }) {\n          id\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n            fragment PayoutProfile on Account {\n              legalName\n            }\n          "): (typeof documents)["\n            fragment PayoutProfile on Account {\n              legalName\n            }\n          "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n      mutation DeletePayoutMethod($payoutMethodId: String!) {\n        removePayoutMethod(payoutMethodId: $payoutMethodId) {\n          id\n        }\n      }\n    "): (typeof documents)["\n      mutation DeletePayoutMethod($payoutMethodId: String!) {\n        removePayoutMethod(payoutMethodId: $payoutMethodId) {\n          id\n        }\n      }\n    "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ExpenseFormSchema(\n    $collectiveSlug: String\n    $hasCollectiveSlug: Boolean!\n    $payeeSlug: String\n    $hasPayeeSlug: Boolean!\n    $submitterSlug: String\n    $hasSubmitterSlug: Boolean!\n    $hasExpenseId: Boolean!\n    $expenseId: Int\n    $expenseKey: String\n  ) {\n    account(slug: $collectiveSlug) @include(if: $hasCollectiveSlug) {\n      ...ExpenseFormAccountFields\n\n      ... on AccountWithHost {\n        host {\n          vendors(forAccount: { slug: $collectiveSlug }, limit: 5) {\n            nodes {\n              ...ExpenseVendorFields\n            }\n          }\n        }\n      }\n\n      ... on Organization {\n        host {\n          vendors(forAccount: { slug: $collectiveSlug }, limit: 5) {\n            nodes {\n              ...ExpenseVendorFields\n            }\n          }\n        }\n      }\n    }\n\n    payee: account(slug: $payeeSlug) @include(if: $hasPayeeSlug) {\n      ...ExpenseFormPayeeFields\n    }\n\n    loggedInAccount {\n      id\n      legacyId\n      ...LoggedInAccountExpensePayoutFields\n    }\n\n    submitter: account(slug: $submitterSlug) @include(if: $hasSubmitterSlug) {\n      ...ExpenseFormSubmitterFields\n    }\n\n    recentlySubmittedExpenses: expenses(\n      createdByAccount: { slug: $submitterSlug }\n      limit: 10\n      types: [INVOICE, RECEIPT]\n      orderBy: { field: CREATED_AT, direction: DESC }\n    ) @include(if: $hasSubmitterSlug) {\n      nodes {\n        account {\n          ...ExpenseFormAccountFields\n        }\n        payee {\n          ...ExpenseFormAccountFields\n        }\n        payoutMethod {\n          id\n        }\n      }\n    }\n\n    expense(expense: { legacyId: $expenseId }, draftKey: $expenseKey) @include(if: $hasExpenseId) {\n      id\n      legacyId\n      description\n      createdAt\n      longDescription\n      amountV2 {\n        valueInCents\n        currency\n      }\n      taxes {\n        id\n        type\n        rate\n        idNumber\n      }\n      requiredLegalDocuments\n      accountingCategory {\n        id\n      }\n      currency\n      type\n      status\n      account {\n        ...ExpenseFormAccountFields\n      }\n      createdByAccount {\n        ...ExpenseFormAccountFields\n      }\n      payee {\n        ...ExpenseFormPayeeFields\n      }\n      payoutMethod {\n        id\n      }\n      attachedFiles {\n        id\n        url\n        info {\n          name\n          type\n          size\n        }\n      }\n      invoiceFile {\n        id\n        url\n        name\n        type\n        size\n        ... on ImageFileInfo {\n          width\n        }\n      }\n      items {\n        id\n        description\n        url\n        file {\n          name\n          type\n          size\n        }\n        amount: amountV2 {\n          currency\n          valueInCents\n          exchangeRate {\n            value\n            source\n            fromCurrency\n            toCurrency\n            date\n          }\n        }\n        createdAt\n        incurredAt\n      }\n      privateMessage\n      invoiceInfo\n      reference\n      tags\n      permissions {\n        id\n        canEdit\n        canEditAccountingCategory\n        canEditTags\n        canDeclineExpenseInvite(draftKey: $expenseKey)\n      }\n      draft\n      lockedFields\n      submitter: createdByAccount {\n        ...ExpenseFormSubmitterFields\n      }\n    }\n  }\n\n  \n\n  fragment ExpenseFormSchemaFeatureFields on Account {\n    features {\n      id\n      MULTI_CURRENCY_EXPENSES\n      PAYPAL_PAYOUTS\n    }\n  }\n\n  fragment ExpenseFormSchemaPolicyFields on Account {\n    policies {\n      EXPENSE_CATEGORIZATION {\n        requiredForExpenseSubmitters\n        requiredForCollectiveAdmins\n      }\n\n      EXPENSE_POLICIES {\n        invoicePolicy\n        receiptPolicy\n        titlePolicy\n      }\n    }\n  }\n\n  fragment ExpenseFormSchemaHostFields on Host {\n    id\n    legacyId\n    name\n    legalName\n    slug\n    type\n    currency\n    settings\n\n    location {\n      id\n      address\n      country\n    }\n    transferwise {\n      id\n      availableCurrencies\n    }\n\n    supportedPayoutMethods\n    isTrustedHost\n\n    expensesTags {\n      id\n      tag\n    }\n\n    ...ExpenseFormSchemaPolicyFields\n    ...ExpenseFormSchemaFeatureFields\n\n    accountingCategories(kind: EXPENSE) {\n      nodes {\n        id\n        name\n        kind\n        expensesTypes\n        friendlyName\n        code\n        instructions\n        appliesTo\n      }\n    }\n  }\n\n  fragment ExpenseVendorFields on Vendor {\n    id\n    slug\n    name\n    type\n    description\n    imageUrl(height: 64)\n    hasPayoutMethod\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n  }\n\n  fragment ExpenseFormAccountFields on Account {\n    id\n    legacyId\n    name\n    slug\n    type\n    currency\n    settings\n    supportedExpenseTypes\n\n    stats {\n      balance {\n        valueInCents\n        currency\n      }\n    }\n\n    ...AccountHoverCardFields\n    ...ExpenseFormSchemaFeatureFields\n    ...ExpenseFormSchemaPolicyFields\n\n    ... on AccountWithHost {\n      host {\n        ...ExpenseFormSchemaHostFields\n      }\n    }\n    ... on Organization {\n      host {\n        ...ExpenseFormSchemaHostFields\n      }\n    }\n\n    policies {\n      EXPENSE_POLICIES {\n        invoicePolicy\n        receiptPolicy\n        titlePolicy\n      }\n    }\n\n    ... on AccountWithParent {\n      parent {\n        id\n        legacyId\n        slug\n      }\n    }\n\n    admins: members(role: ADMIN) {\n      totalCount\n      nodes {\n        id\n        account {\n          id\n          type\n          slug\n          name\n          imageUrl\n          ...AccountHoverCardFields\n          emails\n        }\n      }\n    }\n  }\n\n  fragment ExpenseFormSubmitterFields on Account {\n    id\n    slug\n    name\n    imageUrl\n  }\n\n  fragment ExpenseFormPayeeFields on Account {\n    id\n    legacyId\n    slug\n    name\n    legalName\n    type\n    isAdmin\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n\n    location {\n      address\n      country\n    }\n\n    ... on AccountWithHost {\n      host {\n        ...ExpenseFormSchemaHostFields\n      }\n    }\n    ... on Organization {\n      host {\n        ...ExpenseFormSchemaHostFields\n      }\n    }\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n      }\n    }\n  }\n\n  \n"): (typeof documents)["\n  query ExpenseFormSchema(\n    $collectiveSlug: String\n    $hasCollectiveSlug: Boolean!\n    $payeeSlug: String\n    $hasPayeeSlug: Boolean!\n    $submitterSlug: String\n    $hasSubmitterSlug: Boolean!\n    $hasExpenseId: Boolean!\n    $expenseId: Int\n    $expenseKey: String\n  ) {\n    account(slug: $collectiveSlug) @include(if: $hasCollectiveSlug) {\n      ...ExpenseFormAccountFields\n\n      ... on AccountWithHost {\n        host {\n          vendors(forAccount: { slug: $collectiveSlug }, limit: 5) {\n            nodes {\n              ...ExpenseVendorFields\n            }\n          }\n        }\n      }\n\n      ... on Organization {\n        host {\n          vendors(forAccount: { slug: $collectiveSlug }, limit: 5) {\n            nodes {\n              ...ExpenseVendorFields\n            }\n          }\n        }\n      }\n    }\n\n    payee: account(slug: $payeeSlug) @include(if: $hasPayeeSlug) {\n      ...ExpenseFormPayeeFields\n    }\n\n    loggedInAccount {\n      id\n      legacyId\n      ...LoggedInAccountExpensePayoutFields\n    }\n\n    submitter: account(slug: $submitterSlug) @include(if: $hasSubmitterSlug) {\n      ...ExpenseFormSubmitterFields\n    }\n\n    recentlySubmittedExpenses: expenses(\n      createdByAccount: { slug: $submitterSlug }\n      limit: 10\n      types: [INVOICE, RECEIPT]\n      orderBy: { field: CREATED_AT, direction: DESC }\n    ) @include(if: $hasSubmitterSlug) {\n      nodes {\n        account {\n          ...ExpenseFormAccountFields\n        }\n        payee {\n          ...ExpenseFormAccountFields\n        }\n        payoutMethod {\n          id\n        }\n      }\n    }\n\n    expense(expense: { legacyId: $expenseId }, draftKey: $expenseKey) @include(if: $hasExpenseId) {\n      id\n      legacyId\n      description\n      createdAt\n      longDescription\n      amountV2 {\n        valueInCents\n        currency\n      }\n      taxes {\n        id\n        type\n        rate\n        idNumber\n      }\n      requiredLegalDocuments\n      accountingCategory {\n        id\n      }\n      currency\n      type\n      status\n      account {\n        ...ExpenseFormAccountFields\n      }\n      createdByAccount {\n        ...ExpenseFormAccountFields\n      }\n      payee {\n        ...ExpenseFormPayeeFields\n      }\n      payoutMethod {\n        id\n      }\n      attachedFiles {\n        id\n        url\n        info {\n          name\n          type\n          size\n        }\n      }\n      invoiceFile {\n        id\n        url\n        name\n        type\n        size\n        ... on ImageFileInfo {\n          width\n        }\n      }\n      items {\n        id\n        description\n        url\n        file {\n          name\n          type\n          size\n        }\n        amount: amountV2 {\n          currency\n          valueInCents\n          exchangeRate {\n            value\n            source\n            fromCurrency\n            toCurrency\n            date\n          }\n        }\n        createdAt\n        incurredAt\n      }\n      privateMessage\n      invoiceInfo\n      reference\n      tags\n      permissions {\n        id\n        canEdit\n        canEditAccountingCategory\n        canEditTags\n        canDeclineExpenseInvite(draftKey: $expenseKey)\n      }\n      draft\n      lockedFields\n      submitter: createdByAccount {\n        ...ExpenseFormSubmitterFields\n      }\n    }\n  }\n\n  \n\n  fragment ExpenseFormSchemaFeatureFields on Account {\n    features {\n      id\n      MULTI_CURRENCY_EXPENSES\n      PAYPAL_PAYOUTS\n    }\n  }\n\n  fragment ExpenseFormSchemaPolicyFields on Account {\n    policies {\n      EXPENSE_CATEGORIZATION {\n        requiredForExpenseSubmitters\n        requiredForCollectiveAdmins\n      }\n\n      EXPENSE_POLICIES {\n        invoicePolicy\n        receiptPolicy\n        titlePolicy\n      }\n    }\n  }\n\n  fragment ExpenseFormSchemaHostFields on Host {\n    id\n    legacyId\n    name\n    legalName\n    slug\n    type\n    currency\n    settings\n\n    location {\n      id\n      address\n      country\n    }\n    transferwise {\n      id\n      availableCurrencies\n    }\n\n    supportedPayoutMethods\n    isTrustedHost\n\n    expensesTags {\n      id\n      tag\n    }\n\n    ...ExpenseFormSchemaPolicyFields\n    ...ExpenseFormSchemaFeatureFields\n\n    accountingCategories(kind: EXPENSE) {\n      nodes {\n        id\n        name\n        kind\n        expensesTypes\n        friendlyName\n        code\n        instructions\n        appliesTo\n      }\n    }\n  }\n\n  fragment ExpenseVendorFields on Vendor {\n    id\n    slug\n    name\n    type\n    description\n    imageUrl(height: 64)\n    hasPayoutMethod\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n  }\n\n  fragment ExpenseFormAccountFields on Account {\n    id\n    legacyId\n    name\n    slug\n    type\n    currency\n    settings\n    supportedExpenseTypes\n\n    stats {\n      balance {\n        valueInCents\n        currency\n      }\n    }\n\n    ...AccountHoverCardFields\n    ...ExpenseFormSchemaFeatureFields\n    ...ExpenseFormSchemaPolicyFields\n\n    ... on AccountWithHost {\n      host {\n        ...ExpenseFormSchemaHostFields\n      }\n    }\n    ... on Organization {\n      host {\n        ...ExpenseFormSchemaHostFields\n      }\n    }\n\n    policies {\n      EXPENSE_POLICIES {\n        invoicePolicy\n        receiptPolicy\n        titlePolicy\n      }\n    }\n\n    ... on AccountWithParent {\n      parent {\n        id\n        legacyId\n        slug\n      }\n    }\n\n    admins: members(role: ADMIN) {\n      totalCount\n      nodes {\n        id\n        account {\n          id\n          type\n          slug\n          name\n          imageUrl\n          ...AccountHoverCardFields\n          emails\n        }\n      }\n    }\n  }\n\n  fragment ExpenseFormSubmitterFields on Account {\n    id\n    slug\n    name\n    imageUrl\n  }\n\n  fragment ExpenseFormPayeeFields on Account {\n    id\n    legacyId\n    slug\n    name\n    legalName\n    type\n    isAdmin\n    payoutMethods {\n      id\n      type\n      name\n      data\n      isSaved\n    }\n\n    location {\n      address\n      country\n    }\n\n    ... on AccountWithHost {\n      host {\n        ...ExpenseFormSchemaHostFields\n      }\n    }\n    ... on Organization {\n      host {\n        ...ExpenseFormSchemaHostFields\n      }\n    }\n    ... on AccountWithParent {\n      parent {\n        id\n        slug\n      }\n    }\n  }\n\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n            query ExpenseFormExchangeRates($exchangeRateRequests: [CurrencyExchangeRateRequest!]!) {\n              currencyExchangeRate(requests: $exchangeRateRequests) {\n                value\n                source\n                fromCurrency\n                toCurrency\n                date\n                isApproximate\n              }\n            }\n          "): (typeof documents)["\n            query ExpenseFormExchangeRates($exchangeRateRequests: [CurrencyExchangeRateRequest!]!) {\n              currencyExchangeRate(requests: $exchangeRateRequests) {\n                value\n                source\n                fromCurrency\n                toCurrency\n                date\n                isApproximate\n              }\n            }\n          "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TransactionsQueryCollectionFragment on TransactionCollection {\n    offset\n    limit\n    nodes {\n      id\n      uuid\n      kind\n      amount {\n        currency\n        valueInCents\n      }\n      netAmount {\n        currency\n        valueInCents\n      }\n      taxAmount {\n        valueInCents\n        currency\n      }\n      taxInfo {\n        id\n        rate\n        type\n      }\n      platformFee {\n        currency\n        valueInCents\n      }\n      paymentProcessorFee {\n        currency\n        valueInCents\n      }\n      hostFee {\n        currency\n        valueInCents\n      }\n      type\n      description\n      createdAt\n      isRefunded\n      isRefund\n      isOrderRejected\n      toAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n        isIncognito\n        ... on AccountWithParent {\n          parent {\n            id\n            slug\n          }\n        }\n        settings\n        ... on Individual {\n          isGuest\n        }\n        ... on Collective {\n          host {\n            id\n            name\n            slug\n            type\n          }\n        }\n        ... on AccountWithHost {\n          hostFeePercent\n          platformFeePercent\n        }\n        ...AccountHoverCardFields\n      }\n      fromAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n        isIncognito\n        ... on Event {\n          parent {\n            id\n          }\n        }\n        ... on Project {\n          parent {\n            id\n          }\n        }\n        ... on Individual {\n          isGuest\n        }\n        ... on AccountWithHost {\n          hostFeePercent\n          platformFeePercent\n        }\n        ...AccountHoverCardFields\n      }\n      host {\n        id\n        name\n        slug\n        type\n        imageUrl\n      }\n      account {\n        id\n        isIncognito\n      }\n      giftCardEmitterAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n      }\n      permissions {\n        id\n        canRefund\n        canDownloadInvoice\n        canReject\n      }\n      paymentMethod {\n        id\n        type\n      }\n      payoutMethod {\n        id\n        type\n      }\n      order {\n        id\n        legacyId\n        status\n        memo\n        processedAt\n        toAccount {\n          id\n          slug\n        }\n      }\n      expense {\n        id\n        status\n        tags\n        type\n        feesPayer\n        amount\n        currency\n        legacyId\n        # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n        comments(limit: 1) {\n          totalCount\n        }\n        payoutMethod {\n          id\n          type\n        }\n        account {\n          id\n          slug\n        }\n        createdByAccount {\n          id\n          slug\n        }\n      }\n      relatedTransactions(kind: [HOST_FEE, PAYMENT_PROCESSOR_FEE, PAYMENT_PROCESSOR_COVER, TAX]) {\n        id\n        type\n        kind\n        netAmount {\n          currency\n          valueInCents\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  fragment TransactionsQueryCollectionFragment on TransactionCollection {\n    offset\n    limit\n    nodes {\n      id\n      uuid\n      kind\n      amount {\n        currency\n        valueInCents\n      }\n      netAmount {\n        currency\n        valueInCents\n      }\n      taxAmount {\n        valueInCents\n        currency\n      }\n      taxInfo {\n        id\n        rate\n        type\n      }\n      platformFee {\n        currency\n        valueInCents\n      }\n      paymentProcessorFee {\n        currency\n        valueInCents\n      }\n      hostFee {\n        currency\n        valueInCents\n      }\n      type\n      description\n      createdAt\n      isRefunded\n      isRefund\n      isOrderRejected\n      toAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n        isIncognito\n        ... on AccountWithParent {\n          parent {\n            id\n            slug\n          }\n        }\n        settings\n        ... on Individual {\n          isGuest\n        }\n        ... on Collective {\n          host {\n            id\n            name\n            slug\n            type\n          }\n        }\n        ... on AccountWithHost {\n          hostFeePercent\n          platformFeePercent\n        }\n        ...AccountHoverCardFields\n      }\n      fromAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n        isIncognito\n        ... on Event {\n          parent {\n            id\n          }\n        }\n        ... on Project {\n          parent {\n            id\n          }\n        }\n        ... on Individual {\n          isGuest\n        }\n        ... on AccountWithHost {\n          hostFeePercent\n          platformFeePercent\n        }\n        ...AccountHoverCardFields\n      }\n      host {\n        id\n        name\n        slug\n        type\n        imageUrl\n      }\n      account {\n        id\n        isIncognito\n      }\n      giftCardEmitterAccount {\n        id\n        name\n        slug\n        type\n        imageUrl\n      }\n      permissions {\n        id\n        canRefund\n        canDownloadInvoice\n        canReject\n      }\n      paymentMethod {\n        id\n        type\n      }\n      payoutMethod {\n        id\n        type\n      }\n      order {\n        id\n        legacyId\n        status\n        memo\n        processedAt\n        toAccount {\n          id\n          slug\n        }\n      }\n      expense {\n        id\n        status\n        tags\n        type\n        feesPayer\n        amount\n        currency\n        legacyId\n        # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n        comments(limit: 1) {\n          totalCount\n        }\n        payoutMethod {\n          id\n          type\n        }\n        account {\n          id\n          slug\n        }\n        createdByAccount {\n          id\n          slug\n        }\n      }\n      relatedTransactions(kind: [HOST_FEE, PAYMENT_PROCESSOR_FEE, PAYMENT_PROCESSOR_COVER, TAX]) {\n        id\n        type\n        kind\n        netAmount {\n          currency\n          valueInCents\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddAuthenticatorAppToIndividual($account: AccountReferenceInput!, $token: String!) {\n    addTwoFactorAuthTokenToIndividual(account: $account, token: $token, type: TOTP) {\n      account {\n        id\n        hasTwoFactorAuth\n        twoFactorMethods {\n          id\n          method\n          createdAt\n          description\n          icon\n        }\n      }\n      recoveryCodes\n    }\n  }\n"): (typeof documents)["\n  mutation AddAuthenticatorAppToIndividual($account: AccountReferenceInput!, $token: String!) {\n    addTwoFactorAuthTokenToIndividual(account: $account, token: $token, type: TOTP) {\n      account {\n        id\n        hasTwoFactorAuth\n        twoFactorMethods {\n          id\n          method\n          createdAt\n          description\n          icon\n        }\n      }\n      recoveryCodes\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateWebAuthnRegistrationOptions($account: AccountReferenceInput!) {\n    createWebAuthnRegistrationOptions(account: $account)\n  }\n"): (typeof documents)["\n  mutation CreateWebAuthnRegistrationOptions($account: AccountReferenceInput!) {\n    createWebAuthnRegistrationOptions(account: $account)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddTwoFactorAuthToIndividual($account: AccountReferenceInput!, $token: String!) {\n    addTwoFactorAuthTokenToIndividual(account: $account, token: $token, type: WEBAUTHN) {\n      account {\n        id\n        hasTwoFactorAuth\n        twoFactorMethods {\n          id\n          method\n          name\n          createdAt\n          description\n          icon\n        }\n      }\n      recoveryCodes\n    }\n  }\n"): (typeof documents)["\n  mutation AddTwoFactorAuthToIndividual($account: AccountReferenceInput!, $token: String!) {\n    addTwoFactorAuthTokenToIndividual(account: $account, token: $token, type: WEBAUTHN) {\n      account {\n        id\n        hasTwoFactorAuth\n        twoFactorMethods {\n          id\n          method\n          name\n          createdAt\n          description\n          icon\n        }\n      }\n      recoveryCodes\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RegenerateRecoveryCodes {\n    regenerateRecoveryCodes\n  }\n"): (typeof documents)["\n  mutation RegenerateRecoveryCodes {\n    regenerateRecoveryCodes\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveTwoFactorAuthentication($account: AccountReferenceInput!) {\n    removeTwoFactorAuthTokenFromIndividual(account: $account) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveTwoFactorAuthentication($account: AccountReferenceInput!) {\n    removeTwoFactorAuthTokenFromIndividual(account: $account) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveTwoFactorAuthFromIndividual(\n    $account: AccountReferenceInput!\n    $userTwoFactorMethod: UserTwoFactorMethodReferenceInput!\n  ) {\n    removeTwoFactorAuthTokenFromIndividual(account: $account, userTwoFactorMethod: $userTwoFactorMethod) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveTwoFactorAuthFromIndividual(\n    $account: AccountReferenceInput!\n    $userTwoFactorMethod: UserTwoFactorMethodReferenceInput!\n  ) {\n    removeTwoFactorAuthTokenFromIndividual(account: $account, userTwoFactorMethod: $userTwoFactorMethod) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditTwoFactorAuthenticationMethod($userTwoFactorMethod: UserTwoFactorMethodReferenceInput!, $name: String!) {\n    editTwoFactorAuthenticationMethod(userTwoFactorMethod: $userTwoFactorMethod, name: $name) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation EditTwoFactorAuthenticationMethod($userTwoFactorMethod: UserTwoFactorMethodReferenceInput!, $name: String!) {\n    editTwoFactorAuthenticationMethod(userTwoFactorMethod: $userTwoFactorMethod, name: $name) {\n      id\n      hasTwoFactorAuth\n      twoFactorMethods {\n        id\n        method\n        name\n        createdAt\n        description\n        icon\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OrganizationDetails($organizationSlug: String!) {\n    account(slug: $organizationSlug) {\n      id\n      type\n      name\n      slug\n      createdAt\n      orders {\n        totalCount\n      }\n      expenses(status: PAID, direction: SUBMITTED) {\n        totalCount\n      }\n      members(role: ADMIN, includeInherited: true) {\n        nodes {\n          id\n          role\n          account {\n            id\n            name\n            slug\n            type\n            imageUrl(height: 64)\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrganizationDetails($organizationSlug: String!) {\n    account(slug: $organizationSlug) {\n      id\n      type\n      name\n      slug\n      createdAt\n      orders {\n        totalCount\n      }\n      expenses(status: PAID, direction: SUBMITTED) {\n        totalCount\n      }\n      members(role: ADMIN, includeInherited: true) {\n        nodes {\n          id\n          role\n          account {\n            id\n            name\n            slug\n            type\n            imageUrl(height: 64)\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConvertOrganizationToVendor($organization: AccountReferenceInput!, $host: AccountReferenceInput!) {\n    convertOrganizationToVendor(organization: $organization, host: $host) {\n      id\n      ...VendorFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation ConvertOrganizationToVendor($organization: AccountReferenceInput!, $host: AccountReferenceInput!) {\n    convertOrganizationToVendor(organization: $organization, host: $host) {\n      id\n      ...VendorFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateVendor($vendor: VendorCreateInput!, $host: AccountReferenceInput!) {\n    createVendor(host: $host, vendor: $vendor) {\n      id\n      ...VendorFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation CreateVendor($vendor: VendorCreateInput!, $host: AccountReferenceInput!) {\n    createVendor(host: $host, vendor: $vendor) {\n      id\n      ...VendorFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EditVendor($vendor: VendorEditInput!) {\n    editVendor(vendor: $vendor) {\n      id\n      ...VendorFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation EditVendor($vendor: VendorEditInput!) {\n    editVendor(vendor: $vendor) {\n      id\n      ...VendorFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment VendorFields on Vendor {\n    id\n    slug\n    name\n    legalName\n    type\n    description\n    tags\n    imageUrl(height: 96)\n    isArchived\n    createdAt\n\n    location {\n      id\n      address\n      country\n      name\n      structured\n    }\n\n    createdByAccount {\n      id\n      slug\n      name\n      imageUrl\n      ...AccountHoverCardFields\n    }\n\n    vendorInfo {\n      contact {\n        name\n        email\n      }\n      taxFormUrl\n      taxFormRequired\n      taxType\n      taxId\n      notes\n    }\n\n    payoutMethods {\n      id\n      type\n      name\n      data\n    }\n\n    orders(filter: OUTGOING, limit: 1) {\n      totalCount\n    }\n\n    expenses(status: PAID, direction: SUBMITTED, limit: 1) {\n      totalCount\n    }\n  }\n  \n"): (typeof documents)["\n  fragment VendorFields on Vendor {\n    id\n    slug\n    name\n    legalName\n    type\n    description\n    tags\n    imageUrl(height: 96)\n    isArchived\n    createdAt\n\n    location {\n      id\n      address\n      country\n      name\n      structured\n    }\n\n    createdByAccount {\n      id\n      slug\n      name\n      imageUrl\n      ...AccountHoverCardFields\n    }\n\n    vendorInfo {\n      contact {\n        name\n        email\n      }\n      taxFormUrl\n      taxFormRequired\n      taxType\n      taxId\n      notes\n    }\n\n    payoutMethods {\n      id\n      type\n      name\n      data\n    }\n\n    orders(filter: OUTGOING, limit: 1) {\n      totalCount\n    }\n\n    expenses(status: PAID, direction: SUBMITTED, limit: 1) {\n      totalCount\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetVendorArchive($vendor: VendorEditInput!, $archive: Boolean!) {\n    editVendor(archive: $archive, vendor: $vendor) {\n      id\n      ...VendorFields\n    }\n  }\n  \n"): (typeof documents)["\n  mutation SetVendorArchive($vendor: VendorEditInput!, $archive: Boolean!) {\n    editVendor(archive: $archive, vendor: $vendor) {\n      id\n      ...VendorFields\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query VirtualCardRequest($virtualCardRequest: VirtualCardRequestReferenceInput!) {\n    virtualCardRequest(virtualCardRequest: $virtualCardRequest) {\n      id\n      purpose\n      notes\n      status\n      currency\n      spendingLimitAmount {\n        valueInCents\n        currency\n      }\n      spendingLimitInterval\n      createdAt\n      account {\n        id\n        name\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      assignee {\n        id\n        name\n        email\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      host {\n        id\n        name\n        slug\n        imageUrl\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query VirtualCardRequest($virtualCardRequest: VirtualCardRequestReferenceInput!) {\n    virtualCardRequest(virtualCardRequest: $virtualCardRequest) {\n      id\n      purpose\n      notes\n      status\n      currency\n      spendingLimitAmount {\n        valueInCents\n        currency\n      }\n      spendingLimitInterval\n      createdAt\n      account {\n        id\n        name\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      assignee {\n        id\n        name\n        email\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      host {\n        id\n        name\n        slug\n        imageUrl\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RejectVirtualCardRequest($virtualCardRequest: VirtualCardRequestReferenceInput!) {\n    rejectVirtualCardRequest(virtualCardRequest: $virtualCardRequest) {\n      id\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation RejectVirtualCardRequest($virtualCardRequest: VirtualCardRequestReferenceInput!) {\n    rejectVirtualCardRequest(virtualCardRequest: $virtualCardRequest) {\n      id\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query VirtualCardDrawer($virtualCard: VirtualCardReferenceInput!) {\n    virtualCard(virtualCard: $virtualCard) {\n      id\n      name\n      last4\n      data\n      privateData\n      provider\n      spendingLimitAmount\n      spendingLimitInterval\n      spendingLimitRenewsOn\n      remainingLimit\n      currency\n      createdAt\n      status\n      account {\n        id\n        name\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      assignee {\n        id\n        name\n        email\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      host {\n        id\n        slug\n        stripe {\n          username\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query VirtualCardDrawer($virtualCard: VirtualCardReferenceInput!) {\n    virtualCard(virtualCard: $virtualCard) {\n      id\n      name\n      last4\n      data\n      privateData\n      provider\n      spendingLimitAmount\n      spendingLimitInterval\n      spendingLimitRenewsOn\n      remainingLimit\n      currency\n      createdAt\n      status\n      account {\n        id\n        name\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      assignee {\n        id\n        name\n        email\n        slug\n        imageUrl\n        ...AccountHoverCardFields\n      }\n      host {\n        id\n        slug\n        stripe {\n          username\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UploadFile($files: [UploadFileInput!]!) {\n    uploadFile(files: $files) {\n      file {\n        id\n        url\n        name\n        type\n        size\n      }\n      parsingResult {\n        success\n        message\n        expense {\n          confidence\n          description\n          date\n          amount {\n            valueInCents\n            currency\n            exchangeRate {\n              value\n              fromCurrency\n              toCurrency\n              date\n              source\n              isApproximate\n            }\n          }\n          items {\n            description\n            incurredAt\n            url\n            amount {\n              valueInCents\n              currency\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UploadFile($files: [UploadFileInput!]!) {\n    uploadFile(files: $files) {\n      file {\n        id\n        url\n        name\n        type\n        size\n      }\n      parsingResult {\n        success\n        message\n        expense {\n          confidence\n          description\n          date\n          amount {\n            valueInCents\n            currency\n            exchangeRate {\n              value\n              fromCurrency\n              toCurrency\n              date\n              source\n              isApproximate\n            }\n          }\n          items {\n            description\n            incurredAt\n            url\n            amount {\n              valueInCents\n              currency\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GeneratePlaidLinkToken(\n    $host: AccountReferenceInput!\n    $transactionImport: TransactionsImportReferenceInput\n    $locale: Locale\n    $accountSelectionEnabled: Boolean\n  ) {\n    generatePlaidLinkToken(\n      host: $host\n      transactionImport: $transactionImport\n      locale: $locale\n      accountSelectionEnabled: $accountSelectionEnabled\n    ) {\n      linkToken\n      expiration\n      requestId\n      hostedLinkUrl\n    }\n  }\n"): (typeof documents)["\n  mutation GeneratePlaidLinkToken(\n    $host: AccountReferenceInput!\n    $transactionImport: TransactionsImportReferenceInput\n    $locale: Locale\n    $accountSelectionEnabled: Boolean\n  ) {\n    generatePlaidLinkToken(\n      host: $host\n      transactionImport: $transactionImport\n      locale: $locale\n      accountSelectionEnabled: $accountSelectionEnabled\n    ) {\n      linkToken\n      expiration\n      requestId\n      hostedLinkUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConnectPlaidAccount(\n    $publicToken: String!\n    $host: AccountReferenceInput!\n    $sourceName: String\n    $name: String\n  ) {\n    connectPlaidAccount(publicToken: $publicToken, host: $host, sourceName: $sourceName, name: $name) {\n      connectedAccount {\n        id\n      }\n      transactionsImport {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ConnectPlaidAccount(\n    $publicToken: String!\n    $host: AccountReferenceInput!\n    $sourceName: String\n    $name: String\n  ) {\n    connectPlaidAccount(publicToken: $publicToken, host: $host, sourceName: $sourceName, name: $name) {\n      connectedAccount {\n        id\n      }\n      transactionsImport {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CollectiveContactPage($collectiveSlug: String!) {\n    account(slug: $collectiveSlug, throwIfMissing: false) {\n      id\n      slug\n      name\n      type\n      permissions {\n        id\n        contact {\n          allowed\n        }\n      }\n      description\n      settings\n      imageUrl\n      twitterHandle\n      features {\n        id\n        ...NavbarFields\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query CollectiveContactPage($collectiveSlug: String!) {\n    account(slug: $collectiveSlug, throwIfMissing: false) {\n      id\n      slug\n      name\n      type\n      permissions {\n        id\n        contact {\n          allowed\n        }\n      }\n      description\n      settings\n      imageUrl\n      twitterHandle\n      features {\n        id\n        ...NavbarFields\n      }\n    }\n  }\n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ConfirmEmail($token: NonEmptyString!) {\n    confirmEmail(token: $token) {\n      sessionToken\n      individual {\n        id\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ConfirmEmail($token: NonEmptyString!) {\n    confirmEmail(token: $token) {\n      sessionToken\n      individual {\n        id\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ExpensesPage(\n    $collectiveSlug: String!\n    $account: AccountReferenceInput\n    $fromAccount: AccountReferenceInput\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: [ExpenseStatusFilter]\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n    $createdByAccount: AccountReferenceInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      type\n      imageUrl\n      backgroundImageUrl\n      twitterHandle\n      name\n      currency\n      isArchived\n      isActive\n      settings\n      createdAt\n      supportedExpenseTypes\n      expensesTags {\n        id\n        tag\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n\n      ... on Organization {\n        # We add that for hasFeature\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n\n      ... on Event {\n        parent {\n          id\n          name\n          slug\n          type\n        }\n      }\n\n      ... on Project {\n        parent {\n          id\n          name\n          slug\n          type\n        }\n      }\n    }\n    expenses(\n      account: $account\n      fromAccount: $fromAccount\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n      createdByAccount: $createdByAccount\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n      }\n    }\n    # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n    # TODO: We don't need to try and fetch this field on non-host accounts (should use a ... on Host)\n    scheduledExpenses: expenses(\n      host: { slug: $collectiveSlug }\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: BANK_ACCOUNT\n      limit: 1\n    ) {\n      totalCount\n    }\n  }\n\n  \n  \n  \n"): (typeof documents)["\n  query ExpensesPage(\n    $collectiveSlug: String!\n    $account: AccountReferenceInput\n    $fromAccount: AccountReferenceInput\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: [ExpenseStatusFilter]\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n    $chargeHasReceipts: Boolean\n    $virtualCards: [VirtualCardReferenceInput]\n    $createdByAccount: AccountReferenceInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      type\n      imageUrl\n      backgroundImageUrl\n      twitterHandle\n      name\n      currency\n      isArchived\n      isActive\n      settings\n      createdAt\n      supportedExpenseTypes\n      expensesTags {\n        id\n        tag\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithHost {\n        isApproved\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n\n      ... on Organization {\n        # We add that for hasFeature\n        isHost\n        isActive\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n\n      ... on Event {\n        parent {\n          id\n          name\n          slug\n          type\n        }\n      }\n\n      ... on Project {\n        parent {\n          id\n          name\n          slug\n          type\n        }\n      }\n    }\n    expenses(\n      account: $account\n      fromAccount: $fromAccount\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n      chargeHasReceipts: $chargeHasReceipts\n      virtualCards: $virtualCards\n      createdByAccount: $createdByAccount\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n      }\n    }\n    # limit: 1 as current best practice to avoid the API fetching entries it doesn't need\n    # TODO: We don't need to try and fetch this field on non-host accounts (should use a ... on Host)\n    scheduledExpenses: expenses(\n      host: { slug: $collectiveSlug }\n      status: SCHEDULED_FOR_PAYMENT\n      payoutMethodType: BANK_ACCOUNT\n      limit: 1\n    ) {\n      totalCount\n    }\n  }\n\n  \n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OrderPage($legacyId: Int!, $collectiveSlug: String!) {\n    order(order: { legacyId: $legacyId }) {\n      id\n      legacyId\n      status\n      description\n      tags\n      ...ConfirmContributionFields\n      paymentMethod {\n        id\n        type\n      }\n      createdAt\n      processedAt\n      permissions {\n        id\n        canMarkAsExpired\n        canMarkAsPaid\n        canSetTags\n        canEdit\n      }\n      transactions {\n        id\n        legacyId\n        group\n        description\n        type\n        kind\n        createdAt\n        order {\n          id\n        }\n        amount {\n          valueInCents\n          currency\n        }\n        netAmount {\n          valueInCents\n          currency\n        }\n        taxAmount {\n          valueInCents\n          currency\n        }\n        taxInfo {\n          id\n          type\n          rate\n        }\n        paymentProcessorFee {\n          valueInCents\n          currency\n        }\n        fromAccount {\n          id\n          slug\n          type\n          name\n          imageUrl\n          isIncognito\n          ... on Individual {\n            isGuest\n          }\n        }\n        account {\n          id\n          slug\n          type\n          name\n          imageUrl\n        }\n      }\n    }\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      isHost\n      imageUrl\n      backgroundImageUrl\n      isActive\n      description\n      settings\n      twitterHandle\n      currency\n      expensePolicy\n      supportedExpenseTypes\n      features {\n        id\n        ...NavbarFields\n        MULTI_CURRENCY_EXPENSES\n      }\n      location {\n        id\n        address\n        country\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          name\n          slug\n          imageUrl\n          backgroundImageUrl\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          name\n          slug\n          imageUrl\n          backgroundImageUrl\n        }\n      }\n    }\n  }\n\n  \n  \n"): (typeof documents)["\n  query OrderPage($legacyId: Int!, $collectiveSlug: String!) {\n    order(order: { legacyId: $legacyId }) {\n      id\n      legacyId\n      status\n      description\n      tags\n      ...ConfirmContributionFields\n      paymentMethod {\n        id\n        type\n      }\n      createdAt\n      processedAt\n      permissions {\n        id\n        canMarkAsExpired\n        canMarkAsPaid\n        canSetTags\n        canEdit\n      }\n      transactions {\n        id\n        legacyId\n        group\n        description\n        type\n        kind\n        createdAt\n        order {\n          id\n        }\n        amount {\n          valueInCents\n          currency\n        }\n        netAmount {\n          valueInCents\n          currency\n        }\n        taxAmount {\n          valueInCents\n          currency\n        }\n        taxInfo {\n          id\n          type\n          rate\n        }\n        paymentProcessorFee {\n          valueInCents\n          currency\n        }\n        fromAccount {\n          id\n          slug\n          type\n          name\n          imageUrl\n          isIncognito\n          ... on Individual {\n            isGuest\n          }\n        }\n        account {\n          id\n          slug\n          type\n          name\n          imageUrl\n        }\n      }\n    }\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      isHost\n      imageUrl\n      backgroundImageUrl\n      isActive\n      description\n      settings\n      twitterHandle\n      currency\n      expensePolicy\n      supportedExpenseTypes\n      features {\n        id\n        ...NavbarFields\n        MULTI_CURRENCY_EXPENSES\n      }\n      location {\n        id\n        address\n        country\n      }\n\n      stats {\n        id\n        balanceWithBlockedFunds {\n          valueInCents\n          currency\n        }\n      }\n\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          imageUrl\n          backgroundImageUrl\n          twitterHandle\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          name\n          slug\n          imageUrl\n          backgroundImageUrl\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          name\n          slug\n          imageUrl\n          backgroundImageUrl\n        }\n      }\n    }\n  }\n\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ResetPassword($password: String!) {\n    setPassword(password: $password) {\n      individual {\n        id\n      }\n      token\n    }\n  }\n"): (typeof documents)["\n  mutation ResetPassword($password: String!) {\n    setPassword(password: $password) {\n      individual {\n        id\n      }\n      token\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ResetPasswordAccount {\n    loggedInAccount {\n      id\n      type\n      slug\n      name\n      email\n      imageUrl\n    }\n  }\n"): (typeof documents)["\n  query ResetPasswordAccount {\n    loggedInAccount {\n      id\n      type\n      slug\n      name\n      email\n      imageUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SubmittedExpensesPage(\n    $collectiveSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: [ExpenseStatusFilter]\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      type\n      imageUrl\n      backgroundImageUrl\n      twitterHandle\n      name\n      currency\n      isArchived\n      isActive\n      settings\n      createdAt\n      supportedExpenseTypes\n      isHost\n      features {\n        id\n        ...NavbarFields\n      }\n    }\n    expenses(\n      createdByAccount: { slug: $collectiveSlug }\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        amountInCreatedByAccountCurrency: amountV2(currencySource: CREATED_BY_ACCOUNT) {\n          value\n          valueInCents\n          currency\n          exchangeRate {\n            date\n            value\n            source\n            isApproximate\n          }\n        }\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n  }\n\n  \n  \n  \n"): (typeof documents)["\n  query SubmittedExpensesPage(\n    $collectiveSlug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: ExpenseType\n    $tags: [String]\n    $status: [ExpenseStatusFilter]\n    $minAmount: Int\n    $maxAmount: Int\n    $payoutMethodType: PayoutMethodType\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $orderBy: ChronologicalOrderInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      slug\n      type\n      imageUrl\n      backgroundImageUrl\n      twitterHandle\n      name\n      currency\n      isArchived\n      isActive\n      settings\n      createdAt\n      supportedExpenseTypes\n      isHost\n      features {\n        id\n        ...NavbarFields\n      }\n    }\n    expenses(\n      createdByAccount: { slug: $collectiveSlug }\n      limit: $limit\n      offset: $offset\n      type: $type\n      tag: $tags\n      status: $status\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      payoutMethodType: $payoutMethodType\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      orderBy: $orderBy\n    ) {\n      totalCount\n      offset\n      limit\n      nodes {\n        id\n        ...ExpensesListFieldsFragment\n        amountInCreatedByAccountCurrency: amountV2(currencySource: CREATED_BY_ACCOUNT) {\n          value\n          valueInCents\n          currency\n          exchangeRate {\n            date\n            value\n            source\n            isApproximate\n          }\n        }\n        host {\n          id\n          ...ExpenseHostFields\n        }\n      }\n    }\n  }\n\n  \n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HostTerms($hostCollectiveSlug: String!) {\n    host(slug: $hostCollectiveSlug) {\n      id\n      termsUrl\n      isTrustedHost\n    }\n  }\n"): (typeof documents)["\n  query HostTerms($hostCollectiveSlug: String!) {\n    host(slug: $hostCollectiveSlug) {\n      id\n      termsUrl\n      isTrustedHost\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProcessingOrderFields on Order {\n    id\n    legacyId\n    nextChargeDate\n    paymentMethod {\n      id\n      service\n      name\n      type\n      expiryDate\n      data\n      balance {\n        value\n        valueInCents\n        currency\n      }\n    }\n    amount {\n      value\n      valueInCents\n      currency\n    }\n    totalAmount {\n      value\n      valueInCents\n      currency\n    }\n    status\n    description\n    createdAt\n    frequency\n    tier {\n      id\n      name\n    }\n    totalDonations {\n      value\n      valueInCents\n      currency\n    }\n    fromAccount {\n      id\n      name\n      slug\n      isIncognito\n      type\n      ... on Individual {\n        isGuest\n      }\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      description\n      tags\n      imageUrl\n      settings\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n    }\n    platformTipAmount {\n      value\n      valueInCents\n    }\n  }\n"): (typeof documents)["\n  fragment ProcessingOrderFields on Order {\n    id\n    legacyId\n    nextChargeDate\n    paymentMethod {\n      id\n      service\n      name\n      type\n      expiryDate\n      data\n      balance {\n        value\n        valueInCents\n        currency\n      }\n    }\n    amount {\n      value\n      valueInCents\n      currency\n    }\n    totalAmount {\n      value\n      valueInCents\n      currency\n    }\n    status\n    description\n    createdAt\n    frequency\n    tier {\n      id\n      name\n    }\n    totalDonations {\n      value\n      valueInCents\n      currency\n    }\n    fromAccount {\n      id\n      name\n      slug\n      isIncognito\n      type\n      ... on Individual {\n        isGuest\n      }\n    }\n    toAccount {\n      id\n      slug\n      name\n      type\n      description\n      tags\n      imageUrl\n      settings\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n      ... on Organization {\n        host {\n          id\n          slug\n          paypalClientId\n          supportedPaymentMethods\n        }\n      }\n    }\n    platformTipAmount {\n      value\n      valueInCents\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TransactionsPage(\n    $slug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: TransactionType\n    $paymentMethodType: [PaymentMethodType]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $kind: [TransactionKind]\n    $includeIncognitoTransactions: Boolean\n    $includeGiftCardTransactions: Boolean\n    $includeChildrenTransactions: Boolean\n    $virtualCard: [VirtualCardReferenceInput]\n    $orderBy: ChronologicalOrderInput\n  ) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      createdAt\n      imageUrl(height: 256)\n      currency\n      settings\n      features {\n        id\n        ...NavbarFields\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n      processingOrders: orders(filter: OUTGOING, includeIncognito: true, status: [PENDING, PROCESSING]) {\n        totalCount\n        nodes {\n          id\n          ...ProcessingOrderFields\n        }\n      }\n    }\n    transactions(\n      account: { slug: $slug }\n      limit: $limit\n      offset: $offset\n      type: $type\n      paymentMethodType: $paymentMethodType\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      kind: $kind\n      includeIncognitoTransactions: $includeIncognitoTransactions\n      includeGiftCardTransactions: $includeGiftCardTransactions\n      includeChildrenTransactions: $includeChildrenTransactions\n      includeDebts: true\n      virtualCard: $virtualCard\n      orderBy: $orderBy\n    ) {\n      ...TransactionsQueryCollectionFragment\n      kinds\n      paymentMethodTypes\n      totalCount\n    }\n  }\n  \n  \n  \n"): (typeof documents)["\n  query TransactionsPage(\n    $slug: String!\n    $limit: Int!\n    $offset: Int!\n    $type: TransactionType\n    $paymentMethodType: [PaymentMethodType]\n    $minAmount: Int\n    $maxAmount: Int\n    $dateFrom: DateTime\n    $dateTo: DateTime\n    $searchTerm: String\n    $kind: [TransactionKind]\n    $includeIncognitoTransactions: Boolean\n    $includeGiftCardTransactions: Boolean\n    $includeChildrenTransactions: Boolean\n    $virtualCard: [VirtualCardReferenceInput]\n    $orderBy: ChronologicalOrderInput\n  ) {\n    account(slug: $slug) {\n      id\n      legacyId\n      slug\n      name\n      type\n      createdAt\n      imageUrl(height: 256)\n      currency\n      settings\n      features {\n        id\n        ...NavbarFields\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n        }\n      }\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n        }\n      }\n      processingOrders: orders(filter: OUTGOING, includeIncognito: true, status: [PENDING, PROCESSING]) {\n        totalCount\n        nodes {\n          id\n          ...ProcessingOrderFields\n        }\n      }\n    }\n    transactions(\n      account: { slug: $slug }\n      limit: $limit\n      offset: $offset\n      type: $type\n      paymentMethodType: $paymentMethodType\n      minAmount: $minAmount\n      maxAmount: $maxAmount\n      dateFrom: $dateFrom\n      dateTo: $dateTo\n      searchTerm: $searchTerm\n      kind: $kind\n      includeIncognitoTransactions: $includeIncognitoTransactions\n      includeGiftCardTransactions: $includeGiftCardTransactions\n      includeChildrenTransactions: $includeChildrenTransactions\n      includeDebts: true\n      virtualCard: $virtualCard\n      orderBy: $orderBy\n    ) {\n      ...TransactionsQueryCollectionFragment\n      kinds\n      paymentMethodTypes\n      totalCount\n    }\n  }\n  \n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpdatePage($collectiveSlug: String, $updateSlug: String!, $offset: Int) {\n    account(slug: $collectiveSlug, throwIfMissing: false) {\n      id\n      legacyId\n      slug\n      name\n      type\n      description\n      settings\n      imageUrl\n      isFrozen\n      twitterHandle\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          features {\n            id\n            CONTACT_FORM\n          }\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n      conversationsTags {\n        id\n        tag\n      }\n      ... on Collective {\n        isApproved\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n    update(slug: $updateSlug, account: { slug: $collectiveSlug }) {\n      id\n      slug\n      title\n      createdAt\n      publishedAt\n      html\n      summary\n      isPrivate\n      isChangelog\n      makePublicOn\n      userCanSeeUpdate\n      userCanPublishUpdate\n      reactions\n      userReactions\n      notificationAudience\n      account {\n        id\n        slug\n        type\n        name\n        isHost\n      }\n      fromAccount {\n        id\n        slug\n        type\n        name\n      }\n      comments(limit: 100, offset: $offset) {\n        totalCount\n        nodes {\n          id\n          ...CommentFields\n        }\n      }\n    }\n  }\n  \n  \n"): (typeof documents)["\n  query UpdatePage($collectiveSlug: String, $updateSlug: String!, $offset: Int) {\n    account(slug: $collectiveSlug, throwIfMissing: false) {\n      id\n      legacyId\n      slug\n      name\n      type\n      description\n      settings\n      imageUrl\n      isFrozen\n      twitterHandle\n      ... on AccountWithHost {\n        host {\n          id\n          slug\n          name\n          features {\n            id\n            CONTACT_FORM\n          }\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n      conversationsTags {\n        id\n        tag\n      }\n      ... on Collective {\n        isApproved\n      }\n      ... on AccountWithParent {\n        parent {\n          id\n          slug\n          name\n          imageUrl\n        }\n      }\n    }\n    update(slug: $updateSlug, account: { slug: $collectiveSlug }) {\n      id\n      slug\n      title\n      createdAt\n      publishedAt\n      html\n      summary\n      isPrivate\n      isChangelog\n      makePublicOn\n      userCanSeeUpdate\n      userCanPublishUpdate\n      reactions\n      userReactions\n      notificationAudience\n      account {\n        id\n        slug\n        type\n        name\n        isHost\n      }\n      fromAccount {\n        id\n        slug\n        type\n        name\n      }\n      comments(limit: 100, offset: $offset) {\n        totalCount\n        nodes {\n          id\n          ...CommentFields\n        }\n      }\n    }\n  }\n  \n  \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpdatesPage(\n    $collectiveSlug: String!\n    $limit: Int\n    $offset: Int\n    $searchTerm: String\n    $orderBy: UpdateChronologicalOrderInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      name\n      slug\n      type\n      ... on Event {\n        parent {\n          id\n          name\n          slug\n          imageUrl\n        }\n      }\n      ... on Project {\n        parent {\n          id\n          name\n          slug\n          imageUrl\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n      updates(limit: $limit, offset: $offset, searchTerm: $searchTerm, orderBy: $orderBy) {\n        totalCount\n        offset\n        limit\n        nodes {\n          id\n          slug\n          title\n          summary\n          createdAt\n          publishedAt\n          updatedAt\n          userCanSeeUpdate\n          notificationAudience\n          tags\n          isPrivate\n          isChangelog\n          makePublicOn\n          fromAccount {\n            id\n            type\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  query UpdatesPage(\n    $collectiveSlug: String!\n    $limit: Int\n    $offset: Int\n    $searchTerm: String\n    $orderBy: UpdateChronologicalOrderInput\n  ) {\n    account(slug: $collectiveSlug) {\n      id\n      legacyId\n      name\n      slug\n      type\n      ... on Event {\n        parent {\n          id\n          name\n          slug\n          imageUrl\n        }\n      }\n      ... on Project {\n        parent {\n          id\n          name\n          slug\n          imageUrl\n        }\n      }\n      features {\n        id\n        ...NavbarFields\n      }\n      updates(limit: $limit, offset: $offset, searchTerm: $searchTerm, orderBy: $orderBy) {\n        totalCount\n        offset\n        limit\n        nodes {\n          id\n          slug\n          title\n          summary\n          createdAt\n          publishedAt\n          updatedAt\n          userCanSeeUpdate\n          notificationAudience\n          tags\n          isPrivate\n          isChangelog\n          makePublicOn\n          fromAccount {\n            id\n            type\n            name\n            slug\n            imageUrl\n          }\n        }\n      }\n    }\n  }\n  \n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;