"""
An OAuth application.
"""
type Application {
  id: String!
  legacyId: Int!
  type: ApplicationType
    @deprecated(
      reason: "2022-06-16: This Application object will only be used for OAuth tokens. Use PersonalToken for user tokens"
    )
  name: String
  description: String
  apiKey: String
    @deprecated(
      reason: "2022-06-16: This Application object will only be used for OAuth tokens. Use PersonalToken for user tokens"
    )
  clientId: String
  clientSecret: String
  redirectUri: URL
  account: Account!
  oAuthAuthorization: OAuthAuthorization

  """
  Whether this application is allowed to directly use operations that would normally require 2FA
  """
  preAuthorize2FA: Boolean!
}

"""
All application types
"""
enum ApplicationType {
  API_KEY
  OAUTH
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""
An OAuth authorization
"""
type OAuthAuthorization {
  id: String
  account: Individual!
  application: Application!

  """
  The time of creation
  """
  createdAt: DateTime!

  """
  The time of last update
  """
  updatedAt: DateTime!

  """
  The time of expiration
  """
  expiresAt: DateTime!

  """
  The last time of token was used
  """
  lastUsedAt: DateTime

  """
  The attached scopes.
  """
  scope: [OAuthScope]

  """
  Whether this OAuth token is allowed to directly use operations that would normally require 2FA
  """
  preAuthorize2FA: Boolean!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
All supported OAuth scopes
"""
enum OAuthScope {
  """
  Access your email address.
  """
  email

  """
  Access your incognito account.
  """
  incognito

  """
  Manage your account, collectives and organizations.
  """
  account

  """
  Create and manage expenses, payout methods.
  """
  expenses

  """
  Create and manage contributions, payment methods.
  """
  orders

  """
  Refund and reject recorded transactions.
  """
  transactions

  """
  Create and manage virtual cards.
  """
  virtualCards

  """
  Create and manage updates.
  """
  updates

  """
  Create and manage conversations.
  """
  conversations

  """
  Create and manage webhooks
  """
  webhooks

  """
  Administrate fiscal hosts.
  """
  host

  """
  Create and manage OAuth applications.
  """
  applications

  """
  Create and manage connected accounts.
  """
  connectedAccounts

  """
  Perform critical administrative operations.
  """
  root
}

"""
Account interface shared by all kind of accounts (Bot, Collective, Event, User, Organization)
"""
interface Account {
  """
  The public id identifying the account (ie: 5v08jk63-w4g9nbpz-j7qmyder-p7ozax5g)
  """
  id: String!

  """
  The internal database identifier of the collective (ie: 580)
  """
  legacyId: Int! @deprecated(reason: "2020-01-01: should only be used during the transition to GraphQL API v2.")

  """
  The slug identifying the account (ie: babel)
  """
  slug: String!

  """
  The type of the account (BOT/COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL/VENDOR)
  """
  type: AccountType!

  """
  Public name
  """
  name: String

  """
  Private, legal name. Used for expense receipts, taxes, etc. Scope: "account".
  """
  legalName: String
  description: String
  longDescription: String
  tags: [String]
  website: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  twitterHandle: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  githubHandle: String @deprecated(reason: "2022-06-03: Please use repositoryUrl")
  repositoryUrl: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  socialLinks: [SocialLink!]!

  """
  The currency of the account
  """
  currency: Currency!
  expensePolicy: String @deprecated(reason: "2024-11-04: Please use policies.EXPENSE_POLICIES")

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime

  """
  The time of last update
  """
  updatedAt: DateTime

  """
  Date of unhosting by a given Fiscal Host.
  """
  unhostedAt(
    """
    The host account this collective was hosted by
    """
    host: AccountReferenceInput!
  ): DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean!

  """
  Whether this account is frozen
  """
  isFrozen: Boolean!

  """
  Returns whether the account accepts financial contributions.
  """
  isActive: Boolean

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean!

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!
  parentAccount: Account @deprecated(reason: "2022-12-16: use parent on AccountWithParent instead")
  members(
    limit: Int! = 100
    offset: Int! = 0
    role: [MemberRole]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }

    """
    Type of accounts (BOT/COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: [AccountType]
    includeInherited: Boolean = true
  ): MemberCollection!

  """
  Get pending member invitations for this account
  """
  memberInvitations(role: [MemberRole]): [MemberInvitation]

  """
  The legal documents associated with this account
  """
  legalDocuments(
    """
    Filter by type
    """
    type: [LegalDocumentType]
  ): [LegalDocument]
  memberOf(
    limit: Int! = 100
    offset: Int! = 0
    role: [MemberRole]

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Type of accounts (BOT/COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: [AccountType]

    """
    Specific account to query the membership of.
    """
    account: AccountReferenceInput
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }

    """
    Order the query by requested role order
    """
    orderByRoles: Boolean
  ): MemberOfCollection

  """
  Returns the emails of the account. Individuals only have one, but organizations can have multiple emails.
  """
  emails: [EmailAddress!]
  transactions(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The transaction type (DEBIT or CREDIT)
    """
    type: TransactionType

    """
    The payment method types. Can include `null` for transactions without a payment method
    """
    paymentMethodType: [PaymentMethodType]

    """
    The payment method services.
    """
    paymentMethodService: [PaymentMethodService]

    """
    Reference of the account(s) assigned to the main side of the transaction you want to EXCLUDE from the results
    """
    excludeAccount: [AccountReferenceInput]

    """
    Reference of the account assigned to the other side of the transaction (CREDIT -> sender, DEBIT -> recipient). Avoid, favor account instead.
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the host accounting the transaction
    """
    host: AccountReferenceInput

    """
    NOT IMPLEMENTED. Only return transactions that match these tags.
    """
    tags: [String] @deprecated(reason: "2020-08-09: Was never implemented.")

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return transactions where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transactions that were created before this date
    """
    dateTo: DateTime

    """
    Only return transactions that were cleared after this date
    """
    clearedFrom: DateTime

    """
    Only return transactions that were cleared before this date
    """
    clearedTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    If true, return transactions with debt attached, if false transactions without debt attached.
    """
    hasDebt: Boolean

    """
    Only return transactions with an Expense attached
    """
    hasExpense: Boolean

    """
    Only return transactions with this Expense attached
    """
    expense: ExpenseReferenceInput

    """
    Only return transactions that have an Expense of one of these expense types attached
    """
    expenseType: [ExpenseType]

    """
    Only return transactions with an Order attached
    """
    hasOrder: Boolean

    """
    Only return transactions for this order.
    """
    order: OrderReferenceInput

    """
    Used when filtering with the `host` argument to determine whether to include transactions on the fiscal host account (and children)
    """
    includeHost: Boolean! = true

    """
    Whether to include regular transactions from the account (turn false if you only want Incognito or Gift Card transactions)
    """
    includeRegularTransactions: Boolean! = true

    """
    If the account is a user and this field is true, contributions from the incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false

    """
    Whether to include transactions from children (Events and Projects)
    """
    includeChildrenTransactions: Boolean! = false

    """
    Whether to include transactions from Gift Cards issued by the account.
    """
    includeGiftCardTransactions: Boolean! = false

    """
    Whether to include debt transactions
    """
    includeDebts: Boolean! = false

    """
    To filter by transaction kind
    """
    kind: [TransactionKind]

    """
    The transactions group to filter by
    """
    group: [String]
    virtualCard: [VirtualCardReferenceInput]

    """
    Only return transactions that are refunds (or not refunds if false)
    """
    isRefund: Boolean

    """
    Only return transactions that are associated with these external merchant IDs
    """
    merchantId: [String]

    """
    Only return transactions that are associated with these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payment method
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): TransactionCollection!
  orders(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Include orders from children events/projects
    """
    includeChildrenAccounts: Boolean! = false

    """
    Only return orders that were paused by these roles. status must be set to PAUSED.
    """
    pausedBy: [OrderPausedBy]

    """
    Only return orders that were paid with this payment method. Must be an admin of the account owning the payment method.
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return orders that match these payment method services
    """
    paymentMethodService: [PaymentMethodService]

    """
    Only return orders that match these payment method types
    """
    paymentMethodType: [PaymentMethodType]

    """
    Whether to include incognito orders. Must be admin or root. Only with filter null or OUTGOING.
    """
    includeIncognito: Boolean = false

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their frequency (ONETIME, MONTHLY or YEARLY)
    """
    frequency: [ContributionFrequency]

    """
    Use this field to filter orders on their statuses
    """
    status: [OrderStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: DateTime

    """
    Only return orders that were created before this date
    """
    dateTo: DateTime

    """
    Only return pending orders that were expected after this date
    """
    expectedDateFrom: DateTime

    """
    Only return pending orders that were expected before this date
    """
    expectedDateTo: DateTime

    """
    Return orders that were charged after this date
    """
    chargedDateFrom: DateTime

    """
    Return orders that were charged before this date
    """
    chargedDateTo: DateTime

    """
    The term to search
    """
    searchTerm: String
    tierSlug: String @deprecated(reason: "2022-02-25: Should be replaced by a tier reference.")
    tier: [TierReferenceInput]

    """
    Only returns orders that have a subscription (monthly/yearly). Don't use together with frequency.
    """
    onlySubscriptions: Boolean

    """
    Same as onlySubscriptions, but returns only orders with active subscriptions
    """
    onlyActiveSubscriptions: Boolean
    expectedFundsFilter: ExpectedFundsFilter

    """
    Return only orders made from/to that opposite account (only works when orders are already filtered with a main account)
    """
    oppositeAccount: AccountReferenceInput

    """
    Return only orders made from/to these hosted accounts
    """
    hostedAccounts: [AccountReferenceInput]
  ): OrderCollection!
  expenses(
    direction: ExpenseDirection

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Reference of an account that is the payee of an expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of an account that is the payer of an expense
    """
    account: AccountReferenceInput

    """
    An alternative to filter by accounts, both cannot be used together
    """
    accounts: [AccountReferenceInput]

    """
    Return expenses only for this host
    """
    host: AccountReferenceInput

    """
    Return expenses only created by this INDIVIDUAL account
    """
    createdByAccount: AccountReferenceInput

    """
    Use this field to filter expenses on their statuses
    """
    status: [ExpenseStatusFilter]

    """
    Use this field to filter expenses on their type (RECEIPT/INVOICE)
    """
    type: ExpenseType
    types: [ExpenseType]

    """
    Only expenses that match these tags
    """
    tags: [String] @deprecated(reason: "2020-06-30: Please use tag (singular)")

    """
    Only expenses that match these tags
    """
    tag: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that use the given type as payout method
    """
    payoutMethodType: PayoutMethodType

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime

    """
    Only return expenses that were created after this date
    """
    dateTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    Whether to include expenses from children of the account (Events and Projects)
    """
    includeChildrenExpenses: Boolean! = false

    """
    Only return expenses that contains this custom data. Requires being an admin of the collective, payee or host.
    """
    customData: JSON

    """
    Filter expenses of type charges based on presence of receipts
    """
    chargeHasReceipts: Boolean

    """
    Filter expenses of type charges using these virtual cards
    """
    virtualCards: [VirtualCardReferenceInput]

    """
    Filter expenses by the last user-role who replied to them
    """
    lastCommentBy: [LastCommentBy]

    """
    Only return expenses that match these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): ExpenseCollection!
  settings: JSON!
  conversations(
    limit: Int! = 15
    offset: Int! = 0

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection!

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int! = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int! = 30): [TagStat]

  """
  The list of expense types supported by this account
  """
  supportedExpenseTypes: [ExpenseType!]!
  transferwise: TransferWise

  """
  The list of payout methods that this account can use to get paid
  """
  payoutMethods(
    """
    Whether to include archived payout methods
    """
    includeArchived: Boolean = false
  ): [PayoutMethod]

  """
  The list of payment methods that this account can use to pay for Orders
  """
  paymentMethods(
    """
    Filter on given types (CREDITCARD, GIFTCARD...)
    """
    type: [PaymentMethodType]

    """
    Filter on given types (CREDITCARD, GIFTCARD...)
    """
    enumType: [PaymentMethodType] @deprecated(reason: "2021-08-20: use type instead from now")

    """
    Filter on the given service types (opencollective, stripe, paypal...)
    """
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]

  """
  The list of payment methods for this account that are pending a client confirmation (3D Secure / SCA)
  """
  paymentMethodsWithPendingConfirmation: [PaymentMethod]

  """
  The list of connected accounts (Stripe, PayPal, etc ...)
  """
  connectedAccounts: [ConnectedAccount]

  """
  The list of applications created by this account. Admin only. Scope: "applications".
  """
  oAuthApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): OAuthApplicationCollection

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location

  """
  Categories set by Open Collective to help moderation.
  """
  categories: [String]!
  stats: AccountStats

  """
  Whether this account can have changelog updates
  """
  canHaveChangelogUpdates: Boolean!

  """
  Updates published by the account. To see unpublished updates, you need to be an admin and have the scope "updates".
  """
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Only return published updates.
    """
    onlyPublishedUpdates: Boolean = false
    isDraft: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: UpdateChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!

  """
  Virtual Cards attached to the account. Admin only. Scope: "virtualCards".
  """
  virtualCards(
    limit: Int! = 100
    offset: Int! = 0
    state: String = null @deprecated(reason: "2023-11-06: Please use status.")
    status: [VirtualCardStatus]
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: DateTime = null
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): VirtualCardCollection

  """
  Virtual Cards Merchants used by the account. Admin only. Scope: "virtualCards".
  """
  virtualCardMerchants(limit: Int! = 100, offset: Int! = 0): AccountCollection
  childrenAccounts(
    limit: Int! = 100
    offset: Int! = 0
    isActive: Boolean
    accountType: [AccountType]
    searchTerm: String

    """
    Order of the results. Defaults to createdAt DESC.
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }
  ): AccountCollection!

  """
  Policies for the account. To see non-public policies you need to be admin and have the scope: "account".
  """
  policies: Policies!

  """
  List of activities that the logged-in user is subscribed for this collective
  """
  activitySubscriptions(channel: ActivityChannel): [ActivitySubscription]

  """
  Logged-in user permissions on an account
  """
  permissions: AccountPermissions!

  """
  Host application requests
  """
  hostApplicationRequests(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Filter applications by status
    """
    status: HostApplicationStatus
  ): HostApplicationCollection!
  feed(
    """
    Only returns activities before this date
    """
    dateTo: DateTime

    """
    Number of activities to retrieve
    """
    limit: Int

    """
    The classes of activity types to filter for
    """
    classes: [ActivityClassType]
  ): [Activity]

  """
  If created by duplication, the account from which this one was duplicated
  """
  duplicatedFromAccount: Account

  """
  If this account was duplicated, the accounts that were created from it
  """
  duplicatedAccounts(limit: Int! = 100, offset: Int! = 0): AccountCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  transactionGroups(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter transaction groups by the type of the primary transaction
    """
    type: TransactionType

    """
    Filter transaction groups by the kind of the primary transaction
    """
    kind: TransactionKind

    """
    Only return transaction groups that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transaction groups that were created before this date
    """
    dateTo: DateTime
  ): TransactionGroupCollection!

  """
  EXPERIMENTAL (this may change or be removed)
  """
  transactionReports(timeUnit: TimeUnit = MONTH, dateFrom: DateTime, dateTo: DateTime): TransactionReports
}

"""
All account types
"""
enum AccountType {
  BOT
  COLLECTIVE
  EVENT
  FUND
  INDIVIDUAL
  ORGANIZATION
  PROJECT
  VENDOR
}

"""
A social link
"""
type SocialLink {
  type: SocialLinkType!
  url: URL!
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The type of social link
"""
enum SocialLinkType {
  BLUESKY
  DISCORD
  DISCOURSE
  FACEBOOK
  GHOST
  GIT
  GITHUB
  GITLAB
  INSTAGRAM
  LINKEDIN
  MASTODON
  MATTERMOST
  MEETUP
  PEERTUBE
  PIXELFED
  SLACK
  THREADS
  TIKTOK
  TUMBLR
  TWITCH
  TWITTER
  WEBSITE
  YOUTUBE
}

"""
All supported currencies
"""
enum Currency {
  """
  US Dollar
  """
  USD

  """
  UAE Dirham
  """
  AED

  """
  Afghani
  """
  AFN

  """
  Lek
  """
  ALL

  """
  Armenian Dram
  """
  AMD

  """
  Netherlands Antillean Guilder
  """
  ANG

  """
  Kwanza
  """
  AOA

  """
  Argentine Peso
  """
  ARS

  """
  Australian Dollar
  """
  AUD

  """
  Aruban Florin
  """
  AWG

  """
  Azerbaijanian Manat
  """
  AZN

  """
  Convertible Mark
  """
  BAM

  """
  Barbados Dollar
  """
  BBD

  """
  Taka
  """
  BDT

  """
  Bulgarian Lev
  """
  BGN

  """
  Burundi Franc
  """
  BIF

  """
  Bermudian Dollar
  """
  BMD

  """
  Brunei Dollar
  """
  BND

  """
  Boliviano
  """
  BOB

  """
  Brazilian Real
  """
  BRL

  """
  Bahamian Dollar
  """
  BSD

  """
  Pula
  """
  BWP

  """
  Belarussian Ruble
  """
  BYN

  """
  Belize Dollar
  """
  BZD

  """
  Canadian Dollar
  """
  CAD

  """
  Congolese Franc
  """
  CDF

  """
  Swiss Franc
  """
  CHF

  """
  Chilean Peso
  """
  CLP

  """
  Yuan Renminbi
  """
  CNY

  """
  Colombian Peso
  """
  COP

  """
  Costa Rican Colon
  """
  CRC

  """
  Cabo Verde Escudo
  """
  CVE

  """
  Czech Koruna
  """
  CZK

  """
  Djibouti Franc
  """
  DJF

  """
  Danish Krone
  """
  DKK

  """
  Dominican Peso
  """
  DOP

  """
  Algerian Dinar
  """
  DZD

  """
  Egyptian Pound
  """
  EGP

  """
  Ethiopian Birr
  """
  ETB

  """
  Euro
  """
  EUR

  """
  Fiji Dollar
  """
  FJD

  """
  Falkland Islands Pound
  """
  FKP

  """
  Pound Sterling
  """
  GBP

  """
  Lari
  """
  GEL

  """
  Gibraltar Pound
  """
  GIP

  """
  Dalasi
  """
  GMD

  """
  Guinea Franc
  """
  GNF

  """
  Quetzal
  """
  GTQ

  """
  Guyana Dollar
  """
  GYD

  """
  Hong Kong Dollar
  """
  HKD

  """
  Lempira
  """
  HNL

  """
  Kuna
  """
  HRK

  """
  Gourde
  """
  HTG

  """
  Forint
  """
  HUF

  """
  Rupiah
  """
  IDR

  """
  New Israeli Sheqel
  """
  ILS

  """
  Indian Rupee
  """
  INR

  """
  Iceland Krona
  """
  ISK

  """
  Jamaican Dollar
  """
  JMD

  """
  Yen
  """
  JPY

  """
  Kenyan Shilling
  """
  KES

  """
  Som
  """
  KGS

  """
  Riel
  """
  KHR

  """
  Comoro Franc
  """
  KMF

  """
  Won
  """
  KRW

  """
  Cayman Islands Dollar
  """
  KYD

  """
  Tenge
  """
  KZT

  """
  Kip
  """
  LAK

  """
  Lebanese Pound
  """
  LBP

  """
  Sri Lanka Rupee
  """
  LKR

  """
  Liberian Dollar
  """
  LRD

  """
  Loti
  """
  LSL

  """
  Moroccan Dirham
  """
  MAD

  """
  Moldovan Leu
  """
  MDL

  """
  Malagasy Ariary
  """
  MGA

  """
  Denar
  """
  MKD

  """
  Kyat
  """
  MMK

  """
  Tugrik
  """
  MNT

  """
  Pataca
  """
  MOP

  """
  Mauritius Rupee
  """
  MUR

  """
  Rufiyaa
  """
  MVR

  """
  Kwacha
  """
  MWK

  """
  Mexican Peso
  """
  MXN

  """
  Malaysian Ringgit
  """
  MYR

  """
  Mozambique Metical
  """
  MZN

  """
  Namibia Dollar
  """
  NAD

  """
  Naira
  """
  NGN

  """
  Cordoba Oro
  """
  NIO

  """
  Norwegian Krone
  """
  NOK

  """
  Nepalese Rupee
  """
  NPR

  """
  New Zealand Dollar
  """
  NZD

  """
  Balboa
  """
  PAB

  """
  Nuevo Sol
  """
  PEN

  """
  Kina
  """
  PGK

  """
  Philippine Peso
  """
  PHP

  """
  Pakistan Rupee
  """
  PKR

  """
  Zloty
  """
  PLN

  """
  Guarani
  """
  PYG

  """
  Qatari Rial
  """
  QAR

  """
  Romanian Leu
  """
  RON

  """
  Serbian Dinar
  """
  RSD

  """
  Russian Ruble
  """
  RUB

  """
  Rwanda Franc
  """
  RWF

  """
  Saudi Riyal
  """
  SAR

  """
  Solomon Islands Dollar
  """
  SBD

  """
  Seychelles Rupee
  """
  SCR

  """
  Swedish Krona
  """
  SEK

  """
  Singapore Dollar
  """
  SGD

  """
  Saint Helena Pound
  """
  SHP

  """
  Leone
  """
  SLL

  """
  Somali Shilling
  """
  SOS

  """
  Surinam Dollar
  """
  SRD

  """
  Lilangeni
  """
  SZL

  """
  Baht
  """
  THB

  """
  Somoni
  """
  TJS

  """
  Pa’anga
  """
  TOP

  """
  Turkish Lira
  """
  TRY

  """
  Trinidad and Tobago Dollar
  """
  TTD

  """
  New Taiwan Dollar
  """
  TWD

  """
  Tanzanian Shilling
  """
  TZS

  """
  Hryvnia
  """
  UAH

  """
  Uganda Shilling
  """
  UGX

  """
  Peso Uruguayo
  """
  UYU

  """
  Uzbekistan Sum
  """
  UZS

  """
  Dong
  """
  VND

  """
  Vatu
  """
  VUV

  """
  Tala
  """
  WST

  """
  CFA Franc BEAC
  """
  XAF

  """
  East Caribbean Dollar
  """
  XCD

  """
  CFA Franc BCEAO
  """
  XOF

  """
  CFP Franc
  """
  XPF

  """
  Yemeni Rial
  """
  YER

  """
  Rand
  """
  ZAR

  """
  Zambian Kwacha
  """
  ZMW
}

enum ImageFormat {
  txt
  png
  jpg
  gif
  svg
}

input AccountReferenceInput {
  """
  The public id identifying the account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the account (ie: 580)
  """
  legacyId: Int @deprecated(reason: "2020-01-01: should only be used during the transition to GraphQL API v2.")

  """
  The slug identifying the account (ie: babel for https://opencollective.com/babel)
  """
  slug: String
}

"""
A collection of "Members" (ie: Organization backing a Collective)
"""
type MemberCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Member]
}

"""
Collection interface shared by all collection types
"""
interface Collection {
  offset: Int
  limit: Int
  totalCount: Int
}

"""
All member roles
"""
enum MemberRole {
  BACKER
  ADMIN
  CONTRIBUTOR
  HOST
  ATTENDEE
  MEMBER
  FUNDRAISER @deprecated(reason: "2022-09-12: This role does not exist anymore")
  FOLLOWER
  ACCOUNTANT
  CONNECTED_ACCOUNT
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

"""
Input to order results chronologically
"""
input ChronologicalOrderInput {
  """
  Field to chronologically order by.
  """
  field: DateTimeField! = CREATED_AT

  """
  Ordering direction.
  """
  direction: OrderDirection! = DESC
}

"""
All possible DateTime fields for a resource
"""
enum DateTimeField {
  """
  The creation time of a resource
  """
  CREATED_AT

  """
  Transactions only: The date when a transaction was cleared by the payment processor
  """
  EFFECTIVE_DATE

  """
  Orders only: The date when an order was last charged, defaults to createdAt if never charged
  """
  LAST_CHARGED_AT
}

"""
Possible directions in which to order a list of items
"""
enum OrderDirection {
  ASC
  DESC
}

"""
An invitation to join the members of a collective
"""
type MemberInvitation {
  id: String!

  """
  The person who invited the member, if any
  """
  inviter: Individual
  createdAt: DateTime!
  account: Account!
  memberAccount: Account!
  role: MemberRole!
  description: String
  tier: Tier
  since: DateTime
}

"""
Tier model
"""
type Tier {
  id: String!
  legacyId: Int!
  slug: String
  name: String
  description: String

  """
  A long, html-formatted description.
  """
  longDescription: String

  """
  Link to a video (YouTube, Vimeo).
  """
  videoUrl: String

  """
  Get all orders
  """
  orders(limit: Int! = 100, offset: Int! = 0, status: [OrderStatus]): OrderCollection!
  amount: Amount!
  currency: String
  button: String
  goal: Amount!
  type: TierType!
  interval: TierInterval @deprecated(reason: "2020-08-24: Please use \"frequency\"")
  frequency: TierFrequency!
  presets: [Int]
  maxQuantity: Int

  """
  Number of tickets available. Returns null if there is no limit.
  """
  availableQuantity: Int
  customFields: JSON
  amountType: TierAmountType!
  minimumAmount: Amount!
  endsAt: DateTime
  invoiceTemplate: String
  useStandalonePage: Boolean
  singleTicket: Boolean
  requireAddress: Boolean!

  """
  Returns a list of all the contributors for this tier
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): ContributorCollection!
  stats: TierStats
}

"""
A collection of "Orders"
"""
type OrderCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Order]
}

"""
Order model
"""
type Order {
  id: String!
  legacyId: Int!
  description: String

  """
  Base order amount (without platform tip)
  """
  amount: Amount!

  """
  Tax amount
  """
  taxAmount: Amount

  """
  Total order amount, including all taxes and platform tip
  """
  totalAmount: Amount!
  quantity: Int
  status: OrderStatus
  frequency: ContributionFrequency
  nextChargeDate: DateTime
  lastChargedAt: DateTime
  tier: Tier
  fromAccount: Account
  toAccount: Account

  """
  Transactions for this order ordered by createdAt ASC
  """
  transactions: [Transaction]!
  createdAt: DateTime
  updatedAt: DateTime

  """
  WARNING: Total amount donated between collectives, though there will be edge cases especially when looking on the Order level, as the order id is not used in calculating this.
  """
  totalDonations: Amount!

  """
  Total amount contributed with this order.
  """
  totalContributed: Amount!
  paymentMethod: PaymentMethod
  paymentProcessorUrl: String

  """
  Host fee percent attached to the Order.
  """
  hostFeePercent: Float

  """
  Payment processor fee attached to manually Added Funds.
  """
  paymentProcessorFee: Amount

  """
  Platform Tip attached to the Order.
  """
  platformTipAmount: Amount
  platformTipEligible: Boolean
  tags: [String]!
  tax: TaxInfo
  taxes: [OrderTax]! @deprecated(reason: "2023-04-13: Please use `tax` instead.")

  """
  This represents a MemberOf relationship (ie: Collective backed by an Individual) attached to the Order.
  """
  membership: MemberOf

  """
  The permissions given to current logged in user for this order
  """
  permissions: OrderPermissions!

  """
  The accounting category attached to this order
  """
  accountingCategory: AccountingCategory

  """
  The list of activities (ie. approved, edited, etc) for this Order ordered by date ascending
  """
  activities: ActivityCollection!

  """
  Data related to the order
  """
  data: JSON

  """
  Custom data related to the order, based on the fields described by tier.customFields. Must be authenticated as an admin of the fromAccount or toAccount (returns null otherwise)
  """
  customData: JSON

  """
  Memo field which adds additional details about the order. For example in added funds this can be a note to mark what method (cheque, money order) the funds were received.
  """
  memo: String

  """
  The account who created this order
  """
  createdByAccount: Account

  """
  Date the funds were received.
  """
  processedAt: DateTime

  """
  Data about the pending contribution
  """
  pendingContributionData: PendingOrderData

  """
  Whether the order needs confirmation (3DSecure/SCA)
  """
  needsConfirmation: Boolean

  """
  Returns the list of comments for this order, or `null` if user is not allowed to see them
  """
  comments(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: ASC }
  ): CommentCollection

  """
  [Host admins only] If the order was associated with a transactions import row, this field will reference it
  """
  transactionImportRow: TransactionsImportRow
}

"""
All order statuses
"""
enum OrderStatus {
  NEW
  REQUIRE_CLIENT_CONFIRMATION
  PAID
  ERROR
  PROCESSING
  REJECTED
  ACTIVE
  CANCELLED
  PENDING
  EXPIRED
  DISPUTED
  REFUNDED
  PAUSED
  IN_REVIEW
}

enum ContributionFrequency {
  MONTHLY
  YEARLY
  ONETIME
}

"""
Transaction interface shared by all kind of transactions (Debit, Credit)
"""
interface Transaction {
  id: String!
  legacyId: Int!
  uuid: String! @deprecated(reason: "2021-08-15: Use id instead.")
  group: String!
  type: TransactionType!
  kind: TransactionKind
  description(
    """
    Wether to generate the description dynamically.
    """
    dynamic: Boolean = false

    """
    Wether to generate the full description when using dynamic.
    """
    full: Boolean = false
  ): String
  amount: Amount!
  amountInHostCurrency: Amount!

  """
  Exchange rate between the currency of the transaction and the currency of the host (transaction.amount * transaction.hostCurrencyFxRate = transaction.amountInHostCurrency)
  """
  hostCurrencyFxRate: Float
  netAmount(
    """
    Fetch HOST_FEE transaction and integrate in calculation for retro-compatiblity.
    """
    fetchHostFee: Boolean = false

    """
    Fetch PAYMENT_PROCESSOR_FEE transaction for retro-compatiblity.
    """
    fetchPaymentProcessorFee: Boolean = false

    """
    Fetch TAX transaction for retro-compatiblity.
    """
    fetchTax: Boolean = false
  ): Amount!
  netAmountInHostCurrency(
    """
    Fetch HOST_FEE transaction and integrate in calculation for retro-compatiblity.
    """
    fetchHostFee: Boolean = false

    """
    Fetch PAYMENT_PROCESSOR_FEE transaction for retro-compatiblity.
    """
    fetchPaymentProcessorFee: Boolean = false

    """
    Fetch TAX transaction for retro-compatiblity.
    """
    fetchTax: Boolean = false
  ): Amount!
  taxAmount(
    """
    Fetch TAX transaction for retro-compatiblity.
    """
    fetchTax: Boolean = false
  ): Amount!

  """
  If a tax is set, this field will contain more info about the tax
  """
  taxInfo: TaxInfo
  platformFee: Amount!
  hostFee(
    """
    Fetch HOST_FEE transaction for retro-compatiblity.
    """
    fetchHostFee: Boolean = false
  ): Amount
  paymentProcessorFee(
    """
    Fetch PAYMENT_PROCESSOR_FEE transaction for retro-compatiblity.
    """
    fetchPaymentProcessorFee: Boolean = false
  ): Amount
  paymentProcessorUrl: String
  host: Account
  account: Account
  oppositeAccount: Account

  """
  The sender of a transaction (on CREDIT = oppositeAccount, DEBIT = account)
  """
  fromAccount: Account

  """
  The recipient of a transaction (on CREDIT = account, DEBIT = oppositeAccount)
  """
  toAccount: Account
  giftCardEmitterAccount: Account
  createdAt: DateTime
  updatedAt: DateTime
  clearedAt: DateTime
  expense: Expense
  order: Order
  isRefunded: Boolean
  isRefund: Boolean
  isDisputed: Boolean
  isInReview: Boolean
  paymentMethod: PaymentMethod
  payoutMethod: PayoutMethod
  permissions: TransactionPermissions
  isOrderRejected: Boolean!
  refundTransaction: Transaction

  """
  The opposite transaction (CREDIT -> DEBIT, DEBIT -> CREDIT)
  """
  oppositeTransaction: Transaction
  relatedTransactions(
    """
    Filter by kind
    """
    kind: [TransactionKind]
  ): [Transaction]!

  """
  Merchant id related to the Transaction (Stripe, PayPal, Wise, Privacy)
  """
  merchantId: String

  """
  The balance after the Transaction has run. Only for financially active accounts.
  """
  balanceInHostCurrency: Amount
  invoiceTemplate: String
}

"""
All transaction types
"""
enum TransactionType {
  DEBIT
  CREDIT
}

enum TransactionKind {
  ADDED_FUNDS
  BALANCE_TRANSFER
  CONTRIBUTION
  EXPENSE
  HOST_FEE
  HOST_FEE_SHARE
  HOST_FEE_SHARE_DEBT
  PAYMENT_PROCESSOR_COVER
  PAYMENT_PROCESSOR_DISPUTE_FEE
  PAYMENT_PROCESSOR_FEE
  PLATFORM_FEE
  PLATFORM_TIP
  PLATFORM_TIP_DEBT
  PREPAID_PAYMENT_METHOD
  TAX
}

"""
Information about a tax
"""
type TaxInfo {
  """
  An unique identifier for this tax (GST, VAT, etc)
  """
  id: String!

  """
  Identifier for this tax (GST, VAT, etc)
  """
  type: TaxType!

  """
  Percentage applied, between 0-100
  """
  percentage: Int! @deprecated(reason: "Please use `rate` instead")

  """
  Percentage applied, between 0-1
  """
  rate: Float!

  """
  Tax ID number of the 3rd party receiving/paying the tax
  """
  idNumber: String
}

"""
The type of a tax like GST, VAT, etc
"""
enum TaxType {
  """
  European Value Added Tax
  """
  VAT

  """
  New Zealand Good and Services Tax
  """
  GST
}

"""
This represents an Expense
"""
type Expense {
  id: String!

  """
  Legacy ID as returned by API V1. Avoid relying on this field as it may be removed in the future.
  """
  legacyId: Int!

  """
  Title/main description for this expense
  """
  description: String!

  """
  Longer description for this expense
  """
  longDescription: String

  """
  User-provided reference number or any other identifier that references the invoice
  """
  reference: String

  """
  Total amount of the expense (sum of the item's amounts).
  """
  amount: Int! @deprecated(reason: "2022-02-09: Please use amountV2")

  """
  Total amount of the expense
  """
  amountV2(
    """
    Source of the currency to express the amount. Defaults to the expense currency
    """
    currencySource: ExpenseCurrencySource = EXPENSE
  ): Amount

  """
  Taxes applied to this expense
  """
  taxes: [TaxInfo]!

  """
  The exchange rate between the expense currency and the account currency
  """
  accountCurrencyFxRate: Float! @deprecated(reason: "2022-02-09: Please use amountV2")

  """
  The accounting category attached to this expense
  """
  accountingCategory: AccountingCategory

  """
  If available, this field will contain a breakdown of the expense values depending on who edited it
  """
  valuesByRole: ExpenseValuesByRole

  """
  The time of creation
  """
  createdAt: DateTime!

  """
  Currency that should be used for the payout
  """
  currency: Currency!

  """
  Whether this expense is a receipt or an invoice
  """
  type: ExpenseType!

  """
  The state of the expense (pending, approved, paid, rejected...etc)
  """
  status: ExpenseStatus!

  """
  The accounts who approved this expense
  """
  approvedBy: [Account]!

  """
  The account who paid this expense
  """
  paidBy: Account

  """
  Whether this expense is on hold
  """
  onHold: Boolean

  """
  Returns the list of comments for this expense, or `null` if user is not allowed to see them
  """
  comments(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: ASC }
  ): CommentCollection

  """
  The account where the expense was submitted
  """
  account: Account!

  """
  The account being paid by this expense
  """
  payee: Account!

  """
  The address of the payee
  """
  payeeLocation: Location

  """
  The account who created this expense
  """
  createdByAccount: Account

  """
  The account from where the expense was paid
  """
  host: Host

  """
  The payout method to use for this expense
  """
  payoutMethod: PayoutMethod
  paymentMethod: PaymentMethod

  """
  The virtual card used to pay for this charge
  """
  virtualCard: VirtualCard

  """
  (Optional) files attached to the expense
  """
  attachedFiles: [ExpenseAttachedFile!]

  """
  (Optional - applicable to invoice expense only) The invoice file for this expense
  """
  invoiceFile: FileInfo
  items: [ExpenseItem]

  """
  Additional information about the payment as HTML. Only visible to user and admins.
  """
  privateMessage: String

  """
  Information to display on the invoice. Only visible to user and admins.
  """
  invoiceInfo: String

  """
  The fees payer for this expense
  """
  feesPayer: FeesPayer!

  """
  The permissions given to current logged in user for this expense
  """
  permissions: ExpensePermissions!

  """
  The list of activities (ie. approved, edited, etc) for this expense ordered by date ascending
  """
  activities: [Activity!]!
  tags: [String]!

  """
  Returns the list of legal documents required from the payee before the expense can be payed. Must be logged in.
  """
  requiredLegalDocuments: [LegalDocumentType]

  """
  Returns the list of legal documents attached to this expense. Must be logged in as a host admin.
  """
  legalDocuments(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter by type of legal document
    """
    type: [LegalDocumentType]

    """
    Filter by status of legal document
    """
    status: [LegalDocumentRequestStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
  ): LegalDocumentCollection

  """
  Drafted field values that were still not persisted
  """
  draft: JSON

  """
  The account that requested this expense to be submitted
  """
  requestedByAccount: Account
  quote: ExpenseQuote
  validateTransferRequirements(
    """
    Details of the transfer
    """
    details: JSON
  ): [TransferWiseRequiredField]
  recurringExpense: RecurringExpense

  """
  [Admin only] Security checks for this expense. Only available to expenses under trusted hosts.
  """
  securityChecks: [SecurityCheck]

  """
  [Host Admin only] Key to access the draft of this expense
  """
  draftKey: String

  """
  Custom data for this expense
  """
  customData: JSON

  """
  The merchant ID for this expense
  """
  merchantId: String

  """
  The reference text used in the payment transfer
  """
  transferReference: String

  """
  Fields that cannot be edited on this expense
  """
  lockedFields: [ExpenseLockableFields]

  """
  [Host admins only] If the expense associated with a transactions import row, this field will reference it
  """
  transactionImportRow: TransactionsImportRow
}

"""
All supported expense currency sources
"""
enum ExpenseCurrencySource {
  """
  The expense currency expressed as the host currency
  """
  HOST

  """
  The expense currency expressed as the account currency
  """
  ACCOUNT

  """
  The expense currency expressed as the expense currency
  """
  EXPENSE

  """
  The expense currency expressed as the expense currency
  """
  CREATED_BY_ACCOUNT
}

"""
Fields for an accounting category
"""
type AccountingCategory {
  id: String!

  """
  The code of the accounting category
  """
  code: String!

  """
  The technical name of the accounting category
  """
  name: String!

  """
  A friendly name for non-accountants (i.e. expense submitters and collective admins)
  """
  friendlyName: String

  """
  Whether this category is only meant for the host admins
  """
  hostOnly: Boolean!

  """
  Instructions for the expense submitters
  """
  instructions: String

  """
  The account this category belongs to
  """
  account: Host!

  """
  If meant for expenses, the types of expenses this category applies to
  """
  expensesTypes: [ExpenseType]

  """
  The kind of transactions this category applies to
  """
  kind: AccountingCategoryKind

  """
  The time of creation of this accounting category
  """
  createdAt: DateTime!

  """
  If the category is applicable to the Host or Hosted Collectives
  """
  appliesTo: AccountingCategoryAppliesTo
}

"""
This represents an Host account
"""
type Host implements Account & AccountWithContributions {
  id: String!
  legacyId: Int!

  """
  The slug identifying the account (ie: babel)
  """
  slug: String!
  type: AccountType!

  """
  Public name
  """
  name: String

  """
  Private, legal name. Used for expense receipts, taxes, etc. Scope: "account".
  """
  legalName: String
  description: String
  longDescription: String
  tags: [String]
  website: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  twitterHandle: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  githubHandle: String @deprecated(reason: "2022-06-03: Please use repositoryUrl")
  repositoryUrl: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  socialLinks: [SocialLink!]!

  """
  The currency of the account
  """
  currency: Currency!
  expensePolicy: String @deprecated(reason: "2024-11-04: Please use policies.EXPENSE_POLICIES")

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Date of unhosting by a given Fiscal Host.
  """
  unhostedAt(
    """
    The host account this collective was hosted by
    """
    host: AccountReferenceInput!
  ): DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean!

  """
  Whether this account is frozen
  """
  isFrozen: Boolean!

  """
  Returns whether the account accepts financial contributions.
  """
  isActive: Boolean

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean!

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!
  parentAccount: Account @deprecated(reason: "2022-12-16: use parent on AccountWithParent instead")

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int! = 100
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
    includeInherited: Boolean = true
  ): MemberCollection!

  """
  [AUTHENTICATED] Returns the pending invitations
  """
  memberInvitations(
    """
    A reference to an account (usually Individual). Will return invitations sent to the account to join as a member
    """
    memberAccount: AccountReferenceInput

    """
    A reference to an account (usually Collective, Fund or Organization). Will return invitations sent to join this account as a member.
    """
    account: AccountReferenceInput

    """
    An array of Member roles to filter for
    """
    role: [MemberRole]
  ): [MemberInvitation]

  """
  The legal documents associated with this account
  """
  legalDocuments(
    """
    Filter by type
    """
    type: [LegalDocumentType]
  ): [LegalDocument]
  memberOf(
    limit: Int! = 150
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }

    """
    Order the query by requested role order
    """
    orderByRoles: Boolean
  ): MemberOfCollection!

  """
  Returns the emails of the account. Individuals only have one, but organizations can have multiple emails.
  """
  emails: [EmailAddress!]
  transactions(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The transaction type (DEBIT or CREDIT)
    """
    type: TransactionType

    """
    The payment method types. Can include `null` for transactions without a payment method
    """
    paymentMethodType: [PaymentMethodType]

    """
    The payment method services.
    """
    paymentMethodService: [PaymentMethodService]

    """
    Reference of the account(s) assigned to the main side of the transaction you want to EXCLUDE from the results
    """
    excludeAccount: [AccountReferenceInput]

    """
    Reference of the account assigned to the other side of the transaction (CREDIT -> sender, DEBIT -> recipient). Avoid, favor account instead.
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the host accounting the transaction
    """
    host: AccountReferenceInput

    """
    NOT IMPLEMENTED. Only return transactions that match these tags.
    """
    tags: [String] @deprecated(reason: "2020-08-09: Was never implemented.")

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return transactions where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transactions that were created before this date
    """
    dateTo: DateTime

    """
    Only return transactions that were cleared after this date
    """
    clearedFrom: DateTime

    """
    Only return transactions that were cleared before this date
    """
    clearedTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    If true, return transactions with debt attached, if false transactions without debt attached.
    """
    hasDebt: Boolean

    """
    Only return transactions with an Expense attached
    """
    hasExpense: Boolean

    """
    Only return transactions with this Expense attached
    """
    expense: ExpenseReferenceInput

    """
    Only return transactions that have an Expense of one of these expense types attached
    """
    expenseType: [ExpenseType]

    """
    Only return transactions with an Order attached
    """
    hasOrder: Boolean

    """
    Only return transactions for this order.
    """
    order: OrderReferenceInput

    """
    Used when filtering with the `host` argument to determine whether to include transactions on the fiscal host account (and children)
    """
    includeHost: Boolean! = true

    """
    Whether to include regular transactions from the account (turn false if you only want Incognito or Gift Card transactions)
    """
    includeRegularTransactions: Boolean! = true

    """
    If the account is a user and this field is true, contributions from the incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false

    """
    Whether to include transactions from children (Events and Projects)
    """
    includeChildrenTransactions: Boolean! = false

    """
    Whether to include transactions from Gift Cards issued by the account.
    """
    includeGiftCardTransactions: Boolean! = false

    """
    Whether to include debt transactions
    """
    includeDebts: Boolean! = false

    """
    To filter by transaction kind
    """
    kind: [TransactionKind]

    """
    The transactions group to filter by
    """
    group: [String]
    virtualCard: [VirtualCardReferenceInput]

    """
    Only return transactions that are refunds (or not refunds if false)
    """
    isRefund: Boolean

    """
    Only return transactions that are associated with these external merchant IDs
    """
    merchantId: [String]

    """
    Only return transactions that are associated with these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payment method
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): TransactionCollection!
  orders(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Include orders from children events/projects
    """
    includeChildrenAccounts: Boolean! = false

    """
    Only return orders that were paused by these roles. status must be set to PAUSED.
    """
    pausedBy: [OrderPausedBy]

    """
    Only return orders that were paid with this payment method. Must be an admin of the account owning the payment method.
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return orders that match these payment method services
    """
    paymentMethodService: [PaymentMethodService]

    """
    Only return orders that match these payment method types
    """
    paymentMethodType: [PaymentMethodType]

    """
    Whether to include incognito orders. Must be admin or root. Only with filter null or OUTGOING.
    """
    includeIncognito: Boolean = false

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their frequency (ONETIME, MONTHLY or YEARLY)
    """
    frequency: [ContributionFrequency]

    """
    Use this field to filter orders on their statuses
    """
    status: [OrderStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: DateTime

    """
    Only return orders that were created before this date
    """
    dateTo: DateTime

    """
    Only return pending orders that were expected after this date
    """
    expectedDateFrom: DateTime

    """
    Only return pending orders that were expected before this date
    """
    expectedDateTo: DateTime

    """
    Return orders that were charged after this date
    """
    chargedDateFrom: DateTime

    """
    Return orders that were charged before this date
    """
    chargedDateTo: DateTime

    """
    The term to search
    """
    searchTerm: String
    tierSlug: String @deprecated(reason: "2022-02-25: Should be replaced by a tier reference.")
    tier: [TierReferenceInput]

    """
    Only returns orders that have a subscription (monthly/yearly). Don't use together with frequency.
    """
    onlySubscriptions: Boolean

    """
    Same as onlySubscriptions, but returns only orders with active subscriptions
    """
    onlyActiveSubscriptions: Boolean
    expectedFundsFilter: ExpectedFundsFilter

    """
    Return only orders made from/to that opposite account (only works when orders are already filtered with a main account)
    """
    oppositeAccount: AccountReferenceInput

    """
    Return only orders made from/to these hosted accounts
    """
    hostedAccounts: [AccountReferenceInput]
  ): OrderCollection!
  expenses(
    direction: ExpenseDirection

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Reference of an account that is the payee of an expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of an account that is the payer of an expense
    """
    account: AccountReferenceInput

    """
    An alternative to filter by accounts, both cannot be used together
    """
    accounts: [AccountReferenceInput]

    """
    Return expenses only for this host
    """
    host: AccountReferenceInput

    """
    Return expenses only created by this INDIVIDUAL account
    """
    createdByAccount: AccountReferenceInput

    """
    Use this field to filter expenses on their statuses
    """
    status: [ExpenseStatusFilter]

    """
    Use this field to filter expenses on their type (RECEIPT/INVOICE)
    """
    type: ExpenseType
    types: [ExpenseType]

    """
    Only expenses that match these tags
    """
    tags: [String] @deprecated(reason: "2020-06-30: Please use tag (singular)")

    """
    Only expenses that match these tags
    """
    tag: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that use the given type as payout method
    """
    payoutMethodType: PayoutMethodType

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime

    """
    Only return expenses that were created after this date
    """
    dateTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    Whether to include expenses from children of the account (Events and Projects)
    """
    includeChildrenExpenses: Boolean! = false

    """
    Only return expenses that contains this custom data. Requires being an admin of the collective, payee or host.
    """
    customData: JSON

    """
    Filter expenses of type charges based on presence of receipts
    """
    chargeHasReceipts: Boolean

    """
    Filter expenses of type charges using these virtual cards
    """
    virtualCards: [VirtualCardReferenceInput]

    """
    Filter expenses by the last user-role who replied to them
    """
    lastCommentBy: [LastCommentBy]

    """
    Only return expenses that match these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): ExpenseCollection!
  settings: JSON!
  conversations(
    limit: Int! = 15
    offset: Int! = 0

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection!

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int! = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int! = 30): [TagStat]

  """
  The list of expense types supported by this account
  """
  supportedExpenseTypes: [ExpenseType!]!
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid. In most cases, admin only and scope: "expenses".
  """
  payoutMethods(
    """
    Whether to include archived payout methods
    """
    includeArchived: Boolean = false
  ): [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders. Admin or Host only. Scope: "orders".
  """
  paymentMethods(
    type: [PaymentMethodType]
    enumType: [PaymentMethodType] @deprecated(reason: "2021-08-20: use type instead from now")
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]

  """
  The list of payment methods for this account that are pending a client confirmation (3D Secure / SCA)
  """
  paymentMethodsWithPendingConfirmation: [PaymentMethod]

  """
  The list of connected accounts (Stripe, PayPal, etc ...). Admin only. Scope: "connectedAccounts".
  """
  connectedAccounts: [ConnectedAccount]

  """
  The list of applications created by this account. Admin only. Scope: "applications".
  """
  oAuthApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): OAuthApplicationCollection

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats

  """
  Whether this account can have changelog updates
  """
  canHaveChangelogUpdates: Boolean!

  """
  Updates published by the account. To see unpublished updates, you need to be an admin and have the scope "updates".
  """
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Only return published updates.
    """
    onlyPublishedUpdates: Boolean = false
    isDraft: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: UpdateChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!

  """
  Virtual Cards attached to the account. Admin only. Scope: "virtualCards".
  """
  virtualCards(
    limit: Int! = 100
    offset: Int! = 0
    state: String = null @deprecated(reason: "2023-11-06: Please use status.")
    status: [VirtualCardStatus]
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: DateTime = null
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): VirtualCardCollection

  """
  Virtual Cards Merchants used by the account. Admin only. Scope: "virtualCards".
  """
  virtualCardMerchants(limit: Int! = 100, offset: Int! = 0): AccountCollection
  childrenAccounts(
    limit: Int! = 100
    offset: Int! = 0
    isActive: Boolean
    accountType: [AccountType]
    searchTerm: String

    """
    Order of the results. Defaults to createdAt DESC.
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }
  ): AccountCollection!

  """
  Policies for the account. To see non-public policies you need to be admin and have the scope: "account".
  """
  policies: Policies!

  """
  List of activities that the logged-in user is subscribed for this collective
  """
  activitySubscriptions(channel: ActivityChannel): [ActivitySubscription]

  """
  Logged-in user permissions on an account
  """
  permissions: AccountPermissions!

  """
  Host application requests
  """
  hostApplicationRequests(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Filter applications by status
    """
    status: HostApplicationStatus
  ): HostApplicationCollection!
  feed(
    """
    Only returns activities before this date
    """
    dateTo: DateTime

    """
    Number of activities to retrieve
    """
    limit: Int

    """
    The classes of activity types to filter for
    """
    classes: [ActivityClassType]
  ): [Activity]

  """
  If created by duplication, the account from which this one was duplicated
  """
  duplicatedFromAccount: Account

  """
  If this account was duplicated, the accounts that were created from it
  """
  duplicatedAccounts(limit: Int! = 100, offset: Int! = 0): AccountCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  transactionGroups(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter transaction groups by the type of the primary transaction
    """
    type: TransactionType

    """
    Filter transaction groups by the kind of the primary transaction
    """
    kind: TransactionKind

    """
    Only return transaction groups that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transaction groups that were created before this date
    """
    dateTo: DateTime
  ): TransactionGroupCollection!

  """
  EXPERIMENTAL (this may change or be removed)
  """
  transactionReports(timeUnit: TimeUnit = MONTH, dateFrom: DateTime, dateTo: DateTime): TransactionReports
  webhooks(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    account: AccountReferenceInput!
  ): WebhookCollection!

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers(
    """
    The number of results to fetch
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  activeContributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    dateFrom: DateTime
    dateTo: DateTime
    includeActiveRecurringContributions: Boolean
  ): AccountCollection!

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Float!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!
  contributionPolicy: String

  """
  Returns true if the remote user can start the process to resume contributions for account
  """
  canStartResumeContributionsProcess: Boolean!

  """
  Returns true if the account has started the process to resume contributions
  """
  hasResumeContributionsProcessStarted: Boolean!

  """
  List of accounting categories for this host
  """
  accountingCategories(
    """
    Filter accounting categories by kind
    """
    kind: [AccountingCategoryKind!]

    """
    Filter by accounting category applicable to this account
    """
    account: AccountReferenceInput
  ): AccountingCategoryCollection!
  hostFeePercent: Float
  totalHostedCollectives: Int @deprecated(reason: "2023-03-20: Renamed to totalHostedAccounts")
  totalHostedAccounts: Int
  isOpenToApplications: Boolean
  termsUrl: URL
  plan: HostPlan!

  """
  EXPERIMENTAL (this may change or be removed)
  """
  hostTransactionsReports(timeUnit: TimeUnit = MONTH, dateFrom: DateTime, dateTo: DateTime): HostTransactionReports
  hostMetrics(
    """
    A collection of accounts for which the metrics should be returned.
    """
    account: [AccountReferenceInput!]

    """
    The start date of the time series
    """
    dateFrom: DateTime

    """
    The end date of the time series
    """
    dateTo: DateTime
  ): HostMetrics!
  hostMetricsTimeSeries(
    """
    A collection of accounts for which the metrics should be returned.
    """
    account: [AccountReferenceInput!]

    """
    The start date of the time series
    """
    dateFrom: DateTime

    """
    The end date of the time series
    """
    dateTo: DateTime

    """
    The time unit of the time series (such as MONTH, YEAR, WEEK etc). If no value is provided this is calculated using the dateFrom and dateTo values.
    """
    timeUnit: TimeUnit
  ): HostMetricsTimeSeries!

  """
  EXPERIMENTAL (this may change or be removed)
  """
  hostExpensesReport(timeUnit: TimeUnit = MONTH, dateFrom: DateTime, dateTo: DateTime): HostExpensesReports

  """
  The list of payment methods (Stripe, Paypal, manual bank transfer, etc ...) the Host can accept for its Collectives
  """
  supportedPaymentMethods: [PaymentMethodLegacyType]
  bankAccount: PayoutMethod

  """
  Paypal preapproval info. Returns null if PayPal account is not connected.
  """
  paypalPreApproval: PaymentMethod

  """
  If the host supports PayPal, this will contain the client ID to use in the frontend
  """
  paypalClientId: String

  """
  The list of payout methods this Host accepts for its expenses
  """
  supportedPayoutMethods: [PayoutMethodType]

  """
  Stripe connected account
  """
  stripe: StripeConnectedAccount

  """
  Applications for this host
  """
  hostApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Search term for collective tags, id, name, slug and description.
    """
    searchTerm: String

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Filter applications by status
    """
    status: HostApplicationStatus

    """
    Filter host applications by the last user-role who replied to them
    """
    lastCommentBy: [LastCommentBy]
  ): HostApplicationCollection!

  """
  Pending applications for this host
  """
  pendingApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
  ): HostApplicationCollection!
    @deprecated(reason: "2023-08-25: Deprecated in favour of host.hostApplications(status: PENDING).")
  hostedVirtualCards(
    """
    Search term (card name, card last four digits)
    """
    searchTerm: String
    limit: Int! = 100
    offset: Int! = 0
    state: String = null @deprecated(reason: "2023-06-12: Please use status.")
    status: [VirtualCardStatus]
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
    merchantAccount: AccountReferenceInput = null
    collectiveAccountIds: [AccountReferenceInput] = null

    """
    Returns virtual cards with expenses from this date.
    """
    withExpensesDateFrom: DateTime

    """
    Returns virtual cards with expenses to this date.
    """
    withExpensesDateTo: DateTime

    """
    Filter virtual cards with at least this amount in cents charged
    """
    spentAmountFrom: AmountInput

    """
    Filter virtual cards with up to this amount in cents charged
    """
    spentAmountTo: AmountInput

    """
    Filter virtual cards by whether they are missing receipts for any charges
    """
    hasMissingReceipts: Boolean
  ): VirtualCardCollection!
  hostedVirtualCardMerchants(limit: Int! = 100, offset: Int! = 0): AccountCollection!
  hostedVirtualCardCollectives(limit: Int! = 100, offset: Int! = 0): AccountCollection!
  contributionStats(
    """
    A collection of accounts for which the contribution stats should be returned.
    """
    account: [AccountReferenceInput!]

    """
    Calculate contribution statistics beginning from this date.
    """
    dateFrom: DateTime

    """
    Calculate contribution statistics until this date.
    """
    dateTo: DateTime

    """
    The time unit of the time series
    """
    timeUnit: TimeUnit
  ): ContributionStats!
  expenseStats(
    """
    A collection of accounts for which the expense stats should be returned.
    """
    account: [AccountReferenceInput!]

    """
    Calculate expense statistics beginning from this date.
    """
    dateFrom: DateTime

    """
    Calculate expense statistics until this date.
    """
    dateTo: DateTime

    """
    The time unit of the time series (such as MONTH, YEAR, WEEK etc). If no value is provided this is calculated using the dateFrom and dateTo values.
    """
    timeUnit: TimeUnit
  ): ExpenseStats!

  """
  Returns whether the host is trusted or not
  """
  isTrustedHost: Boolean!

  """
  Returns whether the host has any Stripe disputed orders
  """
  hasDisputedOrders: Boolean

  """
  Returns whether the host has any Stripe in review orders
  """
  hasInReviewOrders: Boolean

  """
  Returns agreements with Hosted Accounts
  """
  hostedAccountAgreements(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter by accounts participating in the agreement
    """
    accounts: [AccountReferenceInput]
  ): AgreementCollection!

  """
  Returns a list of vendors that works with this host
  """
  vendors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Rank vendors based on their relationship with this account
    """
    forAccount: AccountReferenceInput

    """
    Filter on archived vendors
    """
    isArchived: Boolean

    """
    Search vendors related to this term based on name, description, tags, slug, and location
    """
    searchTerm: String
  ): VendorCollection!

  """
  Returns a list of organizations that only transacted with this host and all its admins are also admins of this host.
  """
  potentialVendors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): AccountCollection!

  """
  Returns a list of accounts hosted by this host
  """
  hostedAccounts(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    accountType: [AccountType]

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean = true

    """
    Filter on frozen accounts
    """
    isFrozen: Boolean

    """
    Filter on unhosted accounts
    """
    isUnhosted: Boolean = false

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Order of the results
    """
    orderBy: OrderByInput

    """
    Filter by the balance of the account
    """
    balance: AmountRangeInput

    """
    Filter by the balance of the account and its children accounts (events and projects)
    """
    consolidatedBalance: AmountRangeInput

    """
    Filter by specific Account currencies
    """
    currencies: [String]
  ): HostedAccountCollection!

  """
  Returns the legal documents required by this host
  """
  requiredLegalDocuments: [LegalDocumentType!]!

  """
  Returns legal documents hosted by this host
  """
  hostedLegalDocuments(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter by type of legal document
    """
    type: [LegalDocumentType]

    """
    Filter by status of legal document
    """
    status: [LegalDocumentRequestStatus]

    """
    Filter by accounts
    """
    account: [AccountReferenceInput]

    """
    Search term (name, description, ...)
    """
    searchTerm: String

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Filter by requested date from
    """
    requestedAtFrom: DateTime

    """
    Filter by requested date to
    """
    requestedAtTo: DateTime
  ): LegalDocumentCollection!

  """
  Returns a list of transactions imports for this host
  """
  transactionsImports(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
  ): TransactionsImportsCollection!

  """
  Returns a list of transactions imports sources for this host
  """
  transactionsImportsSources: [NonEmptyString]!
}

"""
An account that can receive financial contributions
"""
interface AccountWithContributions {
  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers(
    """
    The number of results to fetch
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  activeContributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    dateFrom: DateTime
    dateTo: DateTime
    includeActiveRecurringContributions: Boolean
  ): AccountCollection!

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Float!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!
  contributionPolicy: String

  """
  Returns true if the remote user can start the process to resume contributions for account
  """
  canStartResumeContributionsProcess: Boolean!

  """
  Returns true if the account has started the process to resume contributions
  """
  hasResumeContributionsProcessStarted: Boolean!
}

"""
A collection of "Tiers"
"""
type TierCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Tier]
}

"""
A collection of "Contributor"
"""
type ContributorCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Contributor]
}

"\n    A person or an entity that contributes financially or by any other mean to the mission\n    of the collective. While \"Member\" is dedicated to permissions, this type is meant\n    to surface all the public contributors and properly groups contributors who are part of\n    multiple tiers.\n  "
type Contributor {
  """
  A unique identifier for this member
  """
  id: String!

  """
  Name of the contributor
  """
  name: String! @deprecated(reason: "2024-08-26: Use account.name instead")

  """
  All the roles for a given contributor
  """
  roles: [MemberRole]

  """
  True if the contributor is a collective admin
  """
  isAdmin: Boolean!

  """
  True if the contributor is a core contributor
  """
  isCore: Boolean!

  """
  True if the contributor is a financial contributor
  """
  isBacker: Boolean!

  """
  Member join date
  """
  since: DateTime!

  """
  How much money the user has contributed for this (in cents, using collective currency)
  """
  totalAmountDonated: Int! @deprecated(reason: "2024-08-26: Use totalAmountContributed instead")

  """
  How much money the user has contributed
  """
  totalAmountContributed: Amount!

  """
  Whether the contributor is an individual, an organization...
  """
  type: String! @deprecated(reason: "2024-08-26: Use account.type instead")

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean! @deprecated(reason: "2024-08-26: Use account.isIncognito instead")

  """
  Description of how the member contribute. Will usually be a tier name, or "design" or "code".
  """
  description: String

  """
  If the contributor has a page on Open Collective, this is the slug to link to it. Always null for incognito contributors
  """
  collectiveSlug: String @deprecated(reason: "2024-08-26: Use account.slug instead")
  account: Account

  """
  Contributor avatar or logo
  """
  image(height: Int, format: ImageFormat): String @deprecated(reason: "2024-08-26: Use account.image instead")

  """
  A public message from contributors to describe their contributions
  """
  publicMessage: String
}

"""
A collection of "Accounts"
"""
type AccountCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Account]
}

"""
A legal document (e.g. W9, W8BEN, W8BEN-E)
"""
type LegalDocument {
  """
  Unique identifier for this legal document
  """
  id: String!

  """
  The year this legal document is for
  """
  year: Int!

  """
  The type of legal document
  """
  type: LegalDocumentType!

  """
  The status of the request for this legal document
  """
  status: LegalDocumentRequestStatus!

  """
  The service that provided this legal document
  """
  service: LegalDocumentService!

  """
  Whether this legal document is expired
  """
  isExpired: Boolean!

  """
  The date and time the request for this legal document was created
  """
  requestedAt: DateTime!

  """
  The date and time this legal document was last updated
  """
  updatedAt: DateTime!

  """
  The account this legal document is for
  """
  account: Account!

  """
  URL to download the file. Must be logged in as a host with access to the document. The returned URL will be protected by authentication + 2FA.
  """
  documentLink: URL
}

"""
Type for a required legal document
"""
enum LegalDocumentType {
  """
  US tax form (W9, W8BEN, W8BEN-E)
  """
  US_TAX_FORM
}

"""
Status for a legal document
"""
enum LegalDocumentRequestStatus {
  NOT_REQUESTED
  REQUESTED
  RECEIVED
  ERROR
  INVALID
}

"""
Type for a required legal document
"""
enum LegalDocumentService {
  DROPBOX_FORMS
  OPENCOLLECTIVE
}

"""
A collection of "MemberOf" (ie: Collective backed by an Organization)
"""
type MemberOfCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [MemberOf]
  roles: [MemberOfCollectionRoles]
}

"""
An existing member role and account type combination used used to filter collections
"""
type MemberOfCollectionRoles {
  type: AccountType!
  role: MemberRole!
}

"""
All supported expense types
"""
enum HostFeeStructure {
  """
  Use global host fees
  """
  DEFAULT

  """
  Custom fee for this Collective only
  """
  CUSTOM_FEE

  """
  Set a monthly retainer for this Collective
  """
  MONTHLY_RETAINER
}

"""
Input to order collection
"""
input OrderByInput {
  """
  Field to order by.
  """
  field: OrderByFieldType!

  """
  Ordering direction.
  """
  direction: OrderDirection!
}

"""
Possible fields you can use to order by
"""
enum OrderByFieldType {
  CREATED_AT
  LAST_CHARGED_AT

  """
  The financial activity of the collective (number of transactions)
  """
  ACTIVITY
  HOST_RANK
  HOSTED_COLLECTIVES_COUNT
  RANK
  BALANCE
  MEMBER_COUNT
  TOTAL_CONTRIBUTED
  NAME

  """
  Order by start date
  """
  STARTS_AT

  """
  Order by end date
  """
  ENDS_AT
}

"""
A collection of Transactions (Debit or Credit)
"""
type TransactionCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Transaction]
  kinds: [TransactionKind]

  """
  The types of payment methods used in this collection, regardless of the pagination
  """
  paymentMethodTypes: [PaymentMethodType]!
}

enum PaymentMethodType {
  default @deprecated(reason: "Please use uppercase values")
  alipay @deprecated(reason: "Please use uppercase values")
  creditcard @deprecated(reason: "Please use uppercase values")
  prepaid @deprecated(reason: "Please use uppercase values")
  payment @deprecated(reason: "Please use uppercase values")
  subscription @deprecated(reason: "Please use uppercase values")
  collective @deprecated(reason: "Please use uppercase values")
  host @deprecated(reason: "Please use uppercase values")
  adaptive @deprecated(reason: "Please use uppercase values")
  giftcard @deprecated(reason: "Please use uppercase values")
  manual @deprecated(reason: "Please use uppercase values")
  crypto @deprecated(reason: "Please use uppercase values")
  paymentintent @deprecated(reason: "Please use uppercase values")
  us_bank_account @deprecated(reason: "Please use uppercase values")
  sepa_debit @deprecated(reason: "Please use uppercase values")
  bacs_debit @deprecated(reason: "Please use uppercase values")
  bancontact @deprecated(reason: "Please use uppercase values")
  link @deprecated(reason: "Please use uppercase values")
  bank_transfer @deprecated(reason: "Please use uppercase values")
  payout @deprecated(reason: "Please use uppercase values")
  virtual_card @deprecated(reason: "Please use uppercase values")
  swish @deprecated(reason: "Please use uppercase values")
  DEFAULT
  ALIPAY
  CREDITCARD
  PREPAID
  PAYMENT
  SUBSCRIPTION
  COLLECTIVE
  HOST
  ADAPTIVE
  GIFTCARD
  MANUAL
  CRYPTO
  PAYMENT_INTENT
  US_BANK_ACCOUNT
  SEPA_DEBIT
  BACS_DEBIT
  BANCONTACT
  LINK
  BANK_TRANSFER
  PAYOUT
  VIRTUAL_CARD
  SWISH
}

enum PaymentMethodService {
  PAYPAL
  STRIPE
  OPENCOLLECTIVE
  THEGIVINGBLOCK
  WISE
}

input ExpenseReferenceInput {
  """
  The public id identifying the expense (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the expense (ie: 580)
  """
  legacyId: Int
}

"""
All supported expense types
"""
enum ExpenseType {
  """
  Invoice: Charge for your time or get paid in advance.
  """
  INVOICE

  """
  Receipt: Get paid back for a purchase already made.
  """
  RECEIPT

  """
  Funding Request: Request funding for a project or initiative.
  """
  FUNDING_REQUEST

  """
  Grant: Request funding for a project or initiative.
  """
  GRANT

  """
  Unclassified expense
  """
  UNCLASSIFIED

  """
  Credit Card Charge: Payment done using an issued (virtual) credit card issued by your Fiscal Host.
  """
  CHARGE

  """
  Settlement: expense generated by Open Collective to collect money owed by Fiscal Hosts.
  """
  SETTLEMENT
}

input OrderReferenceInput {
  """
  The public id identifying the order (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The legacy public id identifying the order (ie: 4242)
  """
  legacyId: Int
}

input VirtualCardReferenceInput {
  id: String
}

input PaymentMethodReferenceInput {
  """
  The id assigned to the payment method
  """
  id: String
}

input PayoutMethodReferenceInput {
  """
  The id assigned to the payout method
  """
  id: String
}

"""
The user or system that paused the order
"""
enum OrderPausedBy {
  """
  Individual who administers the account for this contribution
  """
  USER

  """
  The host of the collective
  """
  HOST

  """
  The platform
  """
  PLATFORM

  """
  The collective
  """
  COLLECTIVE
}

"""
Account orders filter (INCOMING or OUTGOING)
"""
enum AccountOrdersFilter {
  INCOMING
  OUTGOING
}

input TierReferenceInput {
  """
  The id assigned to the Tier
  """
  id: String

  """
  The DB id assigned to the Tier
  """
  legacyId: Int

  """
  Pass this flag to reference the custom tier (/donate)
  """
  isCustom: Boolean
}

"""
Expected funds filter (ALL_EXPECTED_FUNDS, ONLY_PENDING, ONLY_MANUAL)
"""
enum ExpectedFundsFilter {
  ALL_EXPECTED_FUNDS
  ONLY_PENDING
  ONLY_MANUAL
}

"""
A collection of "Expenses"
"""
type ExpenseCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Expense]
  totalAmount: ExpenseCollectionTotalAmount
}

type ExpenseCollectionTotalAmount {
  amount(currency: Currency = USD): Amount
  amountsByCurrency: [Amount]
}

"""
Describes the role in which an account is involved in an expense. This is used to filter
"""
enum ExpenseDirection {
  """
  Submitted: The account is the one who submitted the expense and possibly the beneficiary.
  """
  SUBMITTED

  """
  Received: The account is the one who received the expense and the one who's paying for it.
  """
  RECEIVED
}

"""
Describes the values allowed to filter expenses, namely all the expense statuses and the special "READY_TO_PAY" value.
"""
enum ExpenseStatusFilter {
  DRAFT
  UNVERIFIED
  PENDING
  INCOMPLETE
  APPROVED
  REJECTED
  PROCESSING
  ERROR
  PAID
  SCHEDULED_FOR_PAYMENT
  SPAM
  CANCELED
  INVITE_DECLINED

  """
  Only expenses that are ready to be paid (must be approved, have the sufficiant balance and have the tax forms completed)
  """
  READY_TO_PAY

  """
  Only expenses that are on hold
  """
  ON_HOLD
}

enum PayoutMethodType {
  OTHER
  PAYPAL
  BANK_ACCOUNT
  ACCOUNT_BALANCE
  CREDIT_CARD
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
Defines role of the last comment author
"""
enum LastCommentBy {
  """
  Expense Submitter
  """
  USER

  """
  Fiscal Host Admin
  """
  HOST_ADMIN

  """
  Not a Fiscal Host Admin
  """
  NON_HOST_ADMIN

  """
  Collective Admin
  """
  COLLECTIVE_ADMIN
}

"""
A collection of "Conversations"
"""
type ConversationCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Conversation]
}

"""
A conversation thread
"""
type Conversation {
  id: String!
  slug: String!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  tags: [String]
  summary: String!
  account: Account
  fromAccount: Account

  """
  The root comment / starter for this conversation
  """
  body: Comment

  """
  List the comments for this conversation. Not backed by a loader, don't use this in lists.
  """
  comments(limit: Int! = 150, offset: Int! = 0): CommentCollection!
  followers(limit: Int! = 10, offset: Int! = 0): AccountCollection!
  stats: ConversationStats
}

"""
This represents an Comment
"""
type Comment {
  id: String
  createdAt: DateTime
  html: String
  fromAccount: Account
  account: Account

  """
  The type of this comment
  """
  type: CommentType!

  """
  Returns a map of reactions counts for this comment
  """
  reactions: JSON

  """
  Returns the list of reactions added to this comment by logged in user
  """
  userReactions: [String]
  conversation: Conversation
  expense: Expense
  hostApplication: HostApplication
  order: Order
  update: Update
}

"""
All supported comment contexts
"""
enum CommentType {
  """
  Default regular comment
  """
  COMMENT

  """
  Comment is visible only to host admins
  """
  PRIVATE_NOTE
}

type HostApplication {
  id: String!

  """
  The account who applied to this host
  """
  account: Account!

  """
  The host the collective applied to
  """
  host: Host!

  """
  The date on which the item was created
  """
  createdAt: DateTime!

  """
  The date on which the item was updated
  """
  updatedAt: DateTime!
  status: HostApplicationStatus
  message: String
  customData: JSON

  """
  Returns the list of comments for this host application, or `null` if user is not allowed to see them
  """
  comments(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: ASC }
  ): CommentCollection
}

enum HostApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

"""
A collection of "Comments"
"""
type CommentCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Comment]
}

"""
This represents an Update
"""
type Update {
  id: String!
  legacyId: Int
  slug: String!

  """
  Indicates whether or not the user is allowed to see the content of this update
  """
  userCanSeeUpdate: Boolean!

  """
  Indicates whether or not the user is allowed to publish this update
  """
  userCanPublishUpdate: Boolean!
  isPrivate: Boolean!
  isChangelog: Boolean!
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedAt: DateTime
  notificationAudience: UpdateAudience

  """
  Some stats about the target audience. Will be null if the update is already published or if you don't have enough permissions so see this information. Not backed by a loader, avoid using this field in lists.
  """
  audienceStats(
    """
    To override the default notificationAudience
    """
    audience: UpdateAudience
  ): UpdateAudienceStats
  makePublicOn: DateTime
  summary: String
  html: String
  tags: [String]
  fromAccount: Account
  account: Account

  """
  Returns a map of reactions counts for this update
  """
  reactions: JSON

  """
  Returns the list of reactions added to this update by logged in user
  """
  userReactions: [String]

  """
  List the comments for this update. Not backed by a loader, don't use this in lists.
  """
  comments(limit: Int! = 150, offset: Int! = 0): CommentCollection
}

"""
Defines targets for an update
"""
enum UpdateAudience {
  """
  Will be sent to collective admins and financial contributors
  """
  ALL

  """
  Will be sent to collective admins
  """
  COLLECTIVE_ADMINS

  """
  Will be sent to financial contributors
  """
  FINANCIAL_CONTRIBUTORS

  """
  Will be sent to no one
  """
  NO_ONE
}

"""
Stats about the potential audience of an update
"""
type UpdateAudienceStats {
  id: String!
  coreContributors: Int!
  individuals: Int!
  organizations: Int!
  collectives: Int!
  hosted: Int!

  """
  The total number of emails to send
  """
  total: Int!
}

type ConversationStats {
  id: String!

  """
  Total number of comments for this conversation
  """
  commentsCount: Int
}

"""
Statistics for a given tag
"""
type TagStat {
  """
  An unique identifier for this tag
  """
  id: String!

  """
  Name/Label of the tag
  """
  tag: String!

  """
  Number of entries for this tag
  """
  count: Int!

  """
  Total amount for this tag
  """
  amount: Amount
}

"""
A payout method
"""
type PayoutMethod {
  """
  Unique identifier for this payout method
  """
  id: String!

  """
  The type of this payout method (usually the payment provider)
  """
  type: PayoutMethodType

  """
  A friendly name for users to easily find their payout methods
  """
  name: String

  """
  Whether this payout method has been saved to be used for future payouts
  """
  isSaved: Boolean

  """
  The actual data for this payout method. Content depends on the type.
  """
  data: JSON

  """
  Whether this payout method can be edit or deleted
  """
  canBeEditedOrDeleted: Boolean
}

"""
PaymentMethod model
"""
type PaymentMethod {
  id: String
  legacyId: Int
  name: String
  service: PaymentMethodService
  type: PaymentMethodType

  """
  Defines the type of the payment method. Meant to be moved to "type" in the future.
  """
  providerType: PaymentMethodLegacyType @deprecated(reason: "2021-03-02: Please use service + type")

  """
  Returns the balance amount and the currency of this paymentMethod
  """
  balance: Amount!
  account: Account

  """
  For gift cards, this field will return to the source payment method
  """
  sourcePaymentMethod: PaymentMethod
  data: JSON
  limitedToHosts: [Host]
  expiryDate: DateTime
  createdAt: DateTime

  """
  For monthly gift cards, this field will return the monthly limit
  """
  monthlyLimit: Amount

  """
  Get all the orders associated with this payment method
  """
  orders(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Include orders from children events/projects
    """
    includeChildrenAccounts: Boolean! = false

    """
    Only return orders that were paused by these roles. status must be set to PAUSED.
    """
    pausedBy: [OrderPausedBy]

    """
    Only return orders that match these payment method services
    """
    paymentMethodService: [PaymentMethodService]

    """
    Only return orders that match these payment method types
    """
    paymentMethodType: [PaymentMethodType]

    """
    Whether to include incognito orders. Must be admin or root. Only with filter null or OUTGOING.
    """
    includeIncognito: Boolean = false

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their frequency (ONETIME, MONTHLY or YEARLY)
    """
    frequency: [ContributionFrequency]

    """
    Use this field to filter orders on their statuses
    """
    status: [OrderStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: DateTime

    """
    Only return orders that were created before this date
    """
    dateTo: DateTime

    """
    Only return pending orders that were expected after this date
    """
    expectedDateFrom: DateTime

    """
    Only return pending orders that were expected before this date
    """
    expectedDateTo: DateTime

    """
    Return orders that were charged after this date
    """
    chargedDateFrom: DateTime

    """
    Return orders that were charged before this date
    """
    chargedDateTo: DateTime

    """
    The term to search
    """
    searchTerm: String
    tierSlug: String @deprecated(reason: "2022-02-25: Should be replaced by a tier reference.")
    tier: [TierReferenceInput]

    """
    Only returns orders that have a subscription (monthly/yearly). Don't use together with frequency.
    """
    onlySubscriptions: Boolean

    """
    Same as onlySubscriptions, but returns only orders with active subscriptions
    """
    onlyActiveSubscriptions: Boolean
    expectedFundsFilter: ExpectedFundsFilter

    """
    Return only orders made from/to that opposite account (only works when orders are already filtered with a main account)
    """
    oppositeAccount: AccountReferenceInput

    """
    Return only orders made from/to these hosted accounts
    """
    hostedAccounts: [AccountReferenceInput]
  ): OrderCollection
}

enum PaymentMethodLegacyType {
  ALIPAY
  CREDIT_CARD
  GIFT_CARD
  PREPAID_BUDGET
  ACCOUNT_BALANCE
  PAYPAL
  BANK_TRANSFER
  ADDED_FUNDS
  CRYPTO
  PAYMENT_INTENT
  US_BANK_ACCOUNT
  SEPA_DEBIT
  BACS_DEBIT
  BANCONTACT
}

"""
This represents a Connected Account
"""
type ConnectedAccount {
  """
  Unique identifier for this connected account
  """
  id: String!

  """
  The internal database identifier of the Connected Account (ie: 580)
  """
  legacyId: Int @deprecated(reason: "2020-05-01: should only be used during the transition to GraphQL API v2.")

  """
  The date on which the ConnectedAccount was created
  """
  createdAt: DateTime!

  """
  The date on which the ConnectedAccount was last updated
  """
  updatedAt: DateTime!
  settings: JSON
  service: ConnectedAccountService!
}

"""
All supported services a user can connect with
"""
enum ConnectedAccountService {
  paypal
  stripe
  stripe_customer
  github
  transferwise
  plaid
  twitter
  privacy @deprecated(reason: "Not using this service anymore")
  thegivingblock
  meetup @deprecated(reason: "Not using this service anymore")
}

"""
A collection of "Application"
"""
type OAuthApplicationCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Application]
}

"""
Type for Geographic location
"""
type Location {
  """
  Unique identifier for this location
  """
  id: String

  """
  A short name for the location (eg. Open Collective Headquarters)
  """
  name: String

  """
  Postal address without country (eg. 12 opensource avenue, 7500 Paris)
  """
  address: String

  """
  Two letters country code (eg. FR, BE...etc)
  """
  country: String

  """
  Latitude
  """
  lat: Float

  """
  Longitude
  """
  long: Float

  """
  Structured JSON address
  """
  structured: JSON
}

"""
Stats for the Account
"""
type AccountStats {
  id: String

  """
  Amount of money in cents in the currency of the collective currently available to spend
  """
  balanceWithBlockedFunds: Amount! @deprecated(reason: "2022-12-13: Use balance + withBlockedFunds instead")

  """
  Amount of money in cents in the currency of the collective
  """
  balance(
    """
    Calculate amount before this date
    """
    dateTo: DateTime

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false

    """
    An optional currency. If not provided, will use the collective currency.
    """
    currency: Currency

    """
    Remove blocked funds from the balance
    """
    withBlockedFunds: Boolean = false
  ): Amount!

  """
  The consolidated amount of all the events and projects combined.
  """
  consolidatedBalance: Amount! @deprecated(reason: "2022-09-02: Use balance + includeChildren instead")

  """
  Average amount spent per month based on the last 90 days
  """
  monthlySpending: Amount!

  """
  Total amount spent
  """
  totalAmountSpent(
    """
    Return the net amount (with payment processor fees removed)
    """
    net: Boolean = false

    """
    Filter by kind
    """
    kind: [TransactionKind]

    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime

    """
    Calculate amount for the last x months. Cannot be used with startDate/endDate
    """
    periodInMonths: Int

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false

    """
    An optional currency. If not provided, will use the collective currency.
    """
    currency: Currency

    """
    Include transactions using Gift Cards (not working together with includeChildren)
    """
    includeGiftCards: Boolean = false
  ): Amount!

  """
  Total amount received
  """
  totalAmountReceived(
    """
    Return the net amount (with payment processor fees removed)
    """
    net: Boolean = false

    """
    Filter by kind
    """
    kind: [TransactionKind]

    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime

    """
    Calculate amount for the last x months. Cannot be used with startDate/endDate
    """
    periodInMonths: Int

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false

    """
    An optional currency. If not provided, will use the collective currency.
    """
    currency: Currency

    """
    Set this to true to use cached data
    """
    useCache: Boolean! = false
      @deprecated(reason: "2022-12-14: this is not used anymore as results should be fast by default")
  ): Amount!

  """
  Amount pledged time series
  """
  amountPledgedTimeSeries(
    """
    The start date of the time series
    """
    dateFrom: DateTime

    """
    The end date of the time series
    """
    dateTo: DateTime

    """
    The time unit of the time series (such as MONTH, YEAR, WEEK etc). If no value is provided this is calculated using the dateFrom and dateTo values.
    """
    timeUnit: TimeUnit

    """
    Include expected funds.
    """
    includeExpectedFunds: Boolean = false
  ): TimeSeriesAmount!

  """
  Total amount received time series
  """
  totalAmountReceivedTimeSeries(
    """
    The start date of the time series
    """
    dateFrom: DateTime

    """
    The end date of the time series
    """
    dateTo: DateTime

    """
    The time unit of the time series (such as MONTH, YEAR, WEEK etc). If no value is provided this is calculated using the dateFrom and dateTo values.
    """
    timeUnit: TimeUnit

    """
    Return the net amount (with payment processor fees removed)
    """
    net: Boolean = false

    """
    Filter by kind
    """
    kind: [TransactionKind]

    """
    Calculate amount for the last x months. Cannot be used with startDate/endDate
    """
    periodInMonths: Int

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false

    """
    An optional currency. If not provided, will use the collective currency.
    """
    currency: Currency
  ): TimeSeriesAmount!

  """
  Balance time series
  """
  balanceTimeSeries(
    """
    The start date of the time series
    """
    dateFrom: DateTime

    """
    The end date of the time series
    """
    dateTo: DateTime

    """
    The time unit of the time series (such as MONTH, YEAR, WEEK etc). If no value is provided this is calculated using the dateFrom and dateTo values.
    """
    timeUnit: TimeUnit

    """
    Return the net amount (with payment processor fees removed)
    """
    net: Boolean = false

    """
    Filter by kind
    """
    kind: [TransactionKind]

    """
    Calculate amount for the last x months. Cannot be used with startDate/endDate
    """
    periodInMonths: Int

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false

    """
    An optional currency. If not provided, will use the collective currency.
    """
    currency: Currency
  ): TimeSeriesAmount!

  """
  Total of paid expenses to the account, filter per expense type
  """
  totalPaidExpenses(
    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime

    """
    An optional currency. If not provided, will use the collective currency.
    """
    currency: Currency

    """
    Filter by ExpenseType
    """
    expenseType: [ExpenseType]
  ): Amount!
  yearlyBudget: Amount!
  yearlyBudgetManaged: Amount!
    @deprecated(reason: "2023-03-01: This field will be removed soon, please use totalMoneyManaged")

  """
  Total net amount received
  """
  totalNetAmountReceived(
    """
    Filter by kind
    """
    kind: [TransactionKind]

    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime

    """
    Calculate amount for the last x months. Cannot be used with startDate/endDate
    """
    periodInMonths: Int

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false
  ): Amount! @deprecated(reason: "2022-12-13: Use totalAmountReceived + net=true instead")

  """
  Total net amount received time series
  """
  totalNetAmountReceivedTimeSeries(
    """
    The start date of the time series
    """
    dateFrom: DateTime

    """
    The end date of the time series
    """
    dateTo: DateTime

    """
    The time unit of the time series (such as MONTH, YEAR, WEEK etc). If no value is provided this is calculated using the dateFrom and dateTo values.
    """
    timeUnit: TimeUnit

    """
    Filter by kind
    """
    kind: [TransactionKind]

    """
    Calculate amount for the last x months. Cannot be used with startDate/endDate
    """
    periodInMonths: Int

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false

    """
    An optional currency. If not provided, will use the collective currency.
    """
    currency: Currency
  ): TimeSeriesAmount! @deprecated(reason: "2022-12-13: Use totalAmountReceivedTimeSeries + net=true instead")
  activeRecurringContributions: JSON
    @deprecated(reason: "2022-10-21: Use activeRecurringContributionsV2 while we migrate to better semantics.")
  activeRecurringContributionsV2(
    """
    The frequency of the recurring contribution (MONTHLY or YEARLY)
    """
    frequency: ContributionFrequency! = MONTHLY
  ): Amount
    @deprecated(reason: "2024-03-04: Use activeRecurringContributionsBreakdown while we migrate to better semantics.")

  """
  Returns some statistics about active recurring contributions, broken down by frequency
  """
  activeRecurringContributionsBreakdown(
    """
    Return only the stats for this frequency
    """
    frequency: ContributionFrequency

    """
    Include contributions to children accounts (Projects and Events)
    """
    includeChildren: Boolean = false
  ): [AmountStats!]!

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(
    limit: Int! = 100
    truncate: Int = 7

    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false
  ): [AmountStats]

  """
  History of the expense tags used by this collective.
  """
  expensesTagsTimeSeries(
    """
    The start date of the time series
    """
    dateFrom: DateTime

    """
    The end date of the time series
    """
    dateTo: DateTime

    """
    The time unit of the time series (such as MONTH, YEAR, WEEK etc). If no value is provided this is calculated using the dateFrom and dateTo values.
    """
    timeUnit: TimeUnit

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false
  ): TimeSeriesAmount!
  contributionsCount(
    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false
  ): Int!
  contributorsCount(
    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false
  ): Int!

  """
  Return amount stats for contributions (default, and only for now: one-time vs recurring)
  """
  contributionsAmount(
    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false

    """
    Filter by kind
    """
    kind: [TransactionKind]
  ): [AmountStats]

  """
  Return amount time series for contributions (default, and only for now: one-time vs recurring)
  """
  contributionsAmountTimeSeries(
    """
    The start date of the time series
    """
    dateFrom: DateTime

    """
    The end date of the time series
    """
    dateTo: DateTime

    """
    The time unit of the time series (such as MONTH, YEAR, WEEK etc). If no value is provided this is calculated using the dateFrom and dateTo values.
    """
    timeUnit: TimeUnit

    """
    Include transactions from children (Projects and Events)
    """
    includeChildren: Boolean = false

    """
    Filter by kind
    """
    kind: [TransactionKind]
  ): TimeSeriesAmount!
}

"""
Amount time series
"""
type TimeSeriesAmount implements TimeSeries {
  """
  The start date of the time series
  """
  dateFrom: DateTime

  """
  The end date of the time series
  """
  dateTo: DateTime

  """
  The interval between two data points
  """
  timeUnit: TimeUnit!

  """
  Time series data points
  """
  nodes: [TimeSeriesAmountNode!]!
}

interface TimeSeries {
  """
  The start date of the time series
  """
  dateFrom: DateTime

  """
  The end date of the time series
  """
  dateTo: DateTime

  """
  The interval between two data points
  """
  timeUnit: TimeUnit!
}

enum TimeUnit {
  SECOND
  MINUTE
  HOUR
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

type TimeSeriesAmountNode {
  date: DateTime!
  amount: Amount!
  count: Int
  label: String
}

"""
Statistics with amounts
"""
type AmountStats {
  """
  Name/Label for the amount
  """
  label: String!

  """
  Total amount for this label
  """
  amount: Amount!

  """
  Number of entries for this label
  """
  count: Int
}

"""
A collection of "Updates"
"""
type UpdateCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Update!]
}

"""
Input to order updates chronologically
"""
input UpdateChronologicalOrderInput {
  """
  Field to chronologically order by.
  """
  field: UpdateDateTimeField! = CREATED_AT

  """
  Ordering direction.
  """
  direction: OrderDirection! = DESC
}

"""
All possible DateTime fields for an update
"""
enum UpdateDateTimeField {
  """
  The creation time
  """
  CREATED_AT

  """
  The creation time
  """
  PUBLISHED_AT
}

"""
Describes the features enabled and available for this account
"""
type CollectiveFeatures {
  """
  The id of the account
  """
  id: String!
  ALL: CollectiveFeatureStatus
  RECEIVE_FINANCIAL_CONTRIBUTIONS: CollectiveFeatureStatus
  RECURRING_CONTRIBUTIONS: CollectiveFeatureStatus
  TRANSACTIONS: CollectiveFeatureStatus
  EVENTS: CollectiveFeatureStatus
  PROJECTS: CollectiveFeatureStatus
  USE_EXPENSES: CollectiveFeatureStatus
  RECEIVE_EXPENSES: CollectiveFeatureStatus
  MULTI_CURRENCY_EXPENSES: CollectiveFeatureStatus
  RECEIVE_HOST_APPLICATIONS: CollectiveFeatureStatus
  COLLECTIVE_GOALS: CollectiveFeatureStatus
  TOP_FINANCIAL_CONTRIBUTORS: CollectiveFeatureStatus
  CONVERSATIONS: CollectiveFeatureStatus
  UPDATES: CollectiveFeatureStatus
  ABOUT: CollectiveFeatureStatus
  TEAM: CollectiveFeatureStatus
  ORDER: CollectiveFeatureStatus
  CONTACT_COLLECTIVE: CollectiveFeatureStatus
  CONTACT_FORM: CollectiveFeatureStatus
  CREATE_COLLECTIVE: CollectiveFeatureStatus
  TRANSFERWISE: CollectiveFeatureStatus
  PAYPAL_PAYOUTS: CollectiveFeatureStatus
  PAYPAL_DONATIONS: CollectiveFeatureStatus
  HOST_DASHBOARD: CollectiveFeatureStatus
  CONNECTED_ACCOUNTS: CollectiveFeatureStatus
  ALIPAY: CollectiveFeatureStatus
  STRIPE_PAYMENT_INTENT: CollectiveFeatureStatus
  USE_PAYMENT_METHODS: CollectiveFeatureStatus
  EMIT_GIFT_CARDS: CollectiveFeatureStatus
  EMAIL_NOTIFICATIONS_PANEL: CollectiveFeatureStatus
  VIRTUAL_CARDS: CollectiveFeatureStatus
  REQUEST_VIRTUAL_CARDS: CollectiveFeatureStatus
}

enum CollectiveFeatureStatus {
  """
  The feature is enabled and is actively used
  """
  ACTIVE

  """
  The feature is enabled, but there is no data for it
  """
  AVAILABLE

  """
  The feature is disabled, but can be enabled by an admin
  """
  DISABLED

  """
  The feature is disabled and cannot be activated for this account
  """
  UNSUPPORTED
}

"""
A collection of Virtual Cards
"""
type VirtualCardCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [VirtualCard]
}

"""
The status of a virtual card
"""
enum VirtualCardStatus {
  ACTIVE
  INACTIVE
  CANCELED
}

type Policies {
  id: String
  EXPENSE_POLICIES: EXPENSE_POLICIES
  EXPENSE_AUTHOR_CANNOT_APPROVE: EXPENSE_AUTHOR_CANNOT_APPROVE
  REQUIRE_2FA_FOR_ADMINS: Boolean
  COLLECTIVE_ADMINS_CAN_REFUND: Boolean
  COLLECTIVE_MINIMUM_ADMINS: COLLECTIVE_MINIMUM_ADMINS
  MAXIMUM_VIRTUAL_CARD_LIMIT_AMOUNT_FOR_INTERVAL: MAXIMUM_VIRTUAL_CARD_LIMIT_AMOUNT_FOR_INTERVAL
  EXPENSE_CATEGORIZATION: EXPENSE_CATEGORIZATION
  EXPENSE_PUBLIC_VENDORS: Boolean
  COLLECTIVE_ADMINS_CAN_SEE_PAYOUT_METHODS: Boolean

  """
  Contribution threshold to enforce contributor info. This resolver can be called from the collective or the host, when resolved through the collective the thresholds are returned in the collective currency
  """
  CONTRIBUTOR_INFO_THRESHOLDS: CONTRIBUTOR_INFO_THRESHOLDS
}

type EXPENSE_POLICIES {
  invoicePolicy: String
  receiptPolicy: String
  titlePolicy: String
}

type EXPENSE_AUTHOR_CANNOT_APPROVE {
  amountInCents: Int
  enabled: Boolean
  appliesToHostedCollectives: Boolean
  appliesToSingleAdminCollectives: Boolean
}

type COLLECTIVE_MINIMUM_ADMINS {
  numberOfAdmins: Int
  applies: PolicyApplication
  freeze: Boolean
}

"""
Defines how the policy is applied
"""
enum PolicyApplication {
  ALL_COLLECTIVES
  NEW_COLLECTIVES
}

type MAXIMUM_VIRTUAL_CARD_LIMIT_AMOUNT_FOR_INTERVAL {
  ALL_TIME: Amount
  DAILY: Amount
  MONTHLY: Amount
  PER_AUTHORIZATION: Amount
  WEEKLY: Amount
  YEARLY: Amount
}

type EXPENSE_CATEGORIZATION {
  requiredForExpenseSubmitters: Boolean
  requiredForCollectiveAdmins: Boolean
}

type CONTRIBUTOR_INFO_THRESHOLDS {
  legalName: Int
  address: Int
}

type ActivitySubscription {
  """
  Unique identifier for this notification setting
  """
  id: String!

  """
  The channel this setting is notifying through
  """
  channel: ActivityChannel!

  """
  The type of Activity this setting is notifying about
  """
  type: String!

  """
  Wheter this notification setting is active or not
  """
  active: Boolean!
  createdAt: DateTime!

  """
  If channel supports, this is the webhook URL we submit the notification to
  """
  webhookUrl: String

  """
  The account which this notification setting is applied to
  """
  account: Account

  """
  The user who defined the setting
  """
  individual: Individual!
}

"""
All supported Activity channels we can broadcast to
"""
enum ActivityChannel {
  slack
  webhook
  email
  twitter
}

"""
Fields for the user permissions on an account
"""
type AccountPermissions {
  id: String!

  """
  Whether the current user can add funds to this account
  """
  addFunds: Permission!

  """
  Whether the current user can contact this account
  """
  contact: Permission!

  """
  Whether the current user can download this account's payment receipts
  """
  canDownloadPaymentReceipts: Permission!
}

type Permission {
  allowed: Boolean!
  reason: String
  reasonDetails: JSON
}

"""
A collection of "HostApplication"
"""
type HostApplicationCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [HostApplication]
}

"""
An activity describing something that happened on the platform
"""
type Activity {
  """
  Unique identifier for this activity
  """
  id: String!

  """
  The type of the activity
  """
  type: ActivityType!

  """
  The date on which the ConnectedAccount was created
  """
  createdAt: DateTime!

  """
  The account that authored by this activity, if any
  """
  fromAccount: Account

  """
  The account targeted by this activity, if any
  """
  account: Account

  """
  The host under which this activity happened, if any
  """
  host: Host

  """
  The person who triggered the action, if any
  """
  individual: Individual

  """
  The expense related to this activity, if any
  """
  expense: Expense

  """
  The order related to this activity, if any
  """
  order: Order

  """
  The update related to this activity, if any
  """
  update: Update

  """
  The conversation related to this activity, if any
  """
  conversation: Conversation

  """
  The transaction related to this activity, if any
  """
  transaction: Transaction

  """
  Data attached to this activity (if any)
  """
  data: JSON!

  """
  Specifies whether this is a system generated activity
  """
  isSystem: Boolean!
}

enum ActivityType {
  ACTIVITY_ALL
  ACCOUNTING_CATEGORIES_EDITED
  CONNECTED_ACCOUNT_CREATED
  CONNECTED_ACCOUNT_ERROR
  COLLECTIVE_CREATED_GITHUB
  COLLECTIVE_APPLY
  COLLECTIVE_APPROVED
  COLLECTIVE_REJECTED
  COLLECTIVE_CREATED
  COLLECTIVE_EDITED
  COLLECTIVE_DELETED
  COLLECTIVE_UNHOSTED
  ORGANIZATION_COLLECTIVE_CREATED
  COLLECTIVE_FROZEN
  COLLECTIVE_UNFROZEN
  COLLECTIVE_CONVERSATION_CREATED
  UPDATE_COMMENT_CREATED
  EXPENSE_COMMENT_CREATED
  CONVERSATION_COMMENT_CREATED
  ORDER_COMMENT_CREATED
  COLLECTIVE_EXPENSE_CREATED
  COLLECTIVE_EXPENSE_DELETED
  COLLECTIVE_EXPENSE_UPDATED
  COLLECTIVE_EXPENSE_REJECTED
  COLLECTIVE_EXPENSE_APPROVED
  COLLECTIVE_EXPENSE_RE_APPROVAL_REQUESTED
  COLLECTIVE_EXPENSE_UNAPPROVED
  COLLECTIVE_EXPENSE_MOVED
  COLLECTIVE_EXPENSE_PAID
  COLLECTIVE_EXPENSE_MARKED_AS_UNPAID
  COLLECTIVE_EXPENSE_MARKED_AS_SPAM
  COLLECTIVE_EXPENSE_MARKED_AS_INCOMPLETE
  COLLECTIVE_EXPENSE_PROCESSING
  COLLECTIVE_EXPENSE_PUT_ON_HOLD
  COLLECTIVE_EXPENSE_RELEASED_FROM_HOLD
  COLLECTIVE_EXPENSE_SCHEDULED_FOR_PAYMENT
  COLLECTIVE_EXPENSE_UNSCHEDULED_FOR_PAYMENT
  COLLECTIVE_EXPENSE_ERROR
  COLLECTIVE_EXPENSE_INVITE_DRAFTED
  COLLECTIVE_EXPENSE_INVITE_DECLINED
  COLLECTIVE_EXPENSE_RECURRING_DRAFTED
  COLLECTIVE_EXPENSE_MISSING_RECEIPT
  TAXFORM_REQUEST
  TAXFORM_RECEIVED
  TAXFORM_INVALIDATED
  COLLECTIVE_VIRTUAL_CARD_ADDED
  COLLECTIVE_VIRTUAL_CARD_MISSING_RECEIPTS
  COLLECTIVE_VIRTUAL_CARD_RESUMED
  COLLECTIVE_VIRTUAL_CARD_SUSPENDED
  COLLECTIVE_VIRTUAL_CARD_SUSPENDED_DUE_TO_INACTIVITY
  COLLECTIVE_VIRTUAL_CARD_DELETED
  COLLECTIVE_VIRTUAL_CARD_REQUEST_APPROVED
  COLLECTIVE_VIRTUAL_CARD_REQUEST_REJECTED
  VIRTUAL_CARD_REQUESTED
  VIRTUAL_CARD_CHARGE_DECLINED
  VIRTUAL_CARD_PURCHASE
  COLLECTIVE_MEMBER_INVITED
  COLLECTIVE_MEMBER_CREATED
  COLLECTIVE_CORE_MEMBER_ADDED
  COLLECTIVE_CORE_MEMBER_INVITED
  COLLECTIVE_CORE_MEMBER_INVITATION_DECLINED
  COLLECTIVE_CORE_MEMBER_REMOVED
  COLLECTIVE_CORE_MEMBER_EDITED
  COLLECTIVE_TRANSACTION_CREATED
  TRANSACTIONS_IMPORT_CREATED
  TRANSACTIONS_IMPORT_ROW_UPDATED
  COLLECTIVE_UPDATE_CREATED
  COLLECTIVE_UPDATE_PUBLISHED
  COLLECTIVE_CONTACT
  HOST_APPLICATION_CONTACT
  HOST_APPLICATION_COMMENT_CREATED
  CONTRIBUTION_REJECTED
  SUBSCRIPTION_ACTIVATED
  SUBSCRIPTION_CANCELED
  SUBSCRIPTION_PAUSED
  SUBSCRIPTION_RESUMED
  SUBSCRIPTION_READY_TO_BE_RESUMED
  TICKET_CONFIRMED
  ORDER_CANCELED_ARCHIVED_COLLECTIVE
  ORDER_PENDING
  ORDER_PENDING_CONTRIBUTION_NEW
  ORDER_PENDING_CONTRIBUTION_REMINDER
  ORDER_PROCESSING
  ORDER_PROCESSED
  ORDER_PAYMENT_FAILED
  ORDER_REVIEW_OPENED
  ORDER_REVIEW_CLOSED
  ORDER_DISPUTE_CREATED
  ORDER_DISPUTE_CLOSED
  ORDER_UPDATED
  ADDED_FUNDS_EDITED
  VENDOR_CREATED
  VENDOR_EDITED
  VENDOR_DELETED
  ORDER_PENDING_CREATED
  ORDER_PENDING_FOLLOWUP
  ORDER_PENDING_RECEIVED
  ORDER_PENDING_EXPIRED
  ORDERS_SUSPICIOUS
  PAYMENT_FAILED
  PAYMENT_CREDITCARD_CONFIRMATION
  PAYMENT_CREDITCARD_EXPIRING
  USER_CREATED
  USER_NEW_TOKEN
  USER_SIGNIN
  USER_RESET_PASSWORD
  OAUTH_APPLICATION_AUTHORIZED
  TWO_FACTOR_METHOD_ADDED
  TWO_FACTOR_METHOD_DELETED
  TWO_FACTOR_CODE_REQUESTED
  USER_CHANGE_EMAIL
  USER_PAYMENT_METHOD_CREATED
  USER_PASSWORD_SET
  USER_CARD_CLAIMED
  USER_CARD_INVITED
  WEBHOOK_STRIPE_RECEIVED
  WEBHOOK_PAYPAL_RECEIVED
  COLLECTIVE_MONTHLY_REPORT
  ACTIVATED_COLLECTIVE_AS_HOST
  ACTIVATED_COLLECTIVE_AS_INDEPENDENT
  DEACTIVATED_COLLECTIVE_AS_HOST
  AGREEMENT_CREATED
  AGREEMENT_EDITED
  AGREEMENT_DELETED
  ADDED_FUND_TO_ORG
  COLLECTIVE_TRANSACTION_PAID
  COLLECTIVE_USER_ADDED
  COLLECTIVE_VIRTUAL_CARD_ASSIGNED
  COLLECTIVE_VIRTUAL_CARD_CREATED
  SUBSCRIPTION_CONFIRMED
  COLLECTIVE_COMMENT_CREATED
  ORDER_PENDING_CRYPTO
  BACKYOURSTACK_DISPATCH_CONFIRMED
}

enum ActivityClassType {
  COLLECTIVE
  EXPENSES
  CONTRIBUTIONS
  ACTIVITIES_UPDATES
  VIRTUAL_CARDS
  FUND_EVENTS
  REPORTS
}

"""
A collection of Transactions groups
"""
type TransactionGroupCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [TransactionGroup!]!
}

"""
Transaction group
"""
type TransactionGroup {
  id: String!
  totalAmount: Amount!
  host: Account

  """
  The account on the main side of the transaction (CREDIT -> recipient, DEBIT -> sender)
  """
  account: Account

  """
  The primary transaction in the group
  """
  primaryTransaction: Transaction

  """
  The transactions in the group
  """
  transactions: [Transaction]
  createdAt: DateTime
}

"""
EXPERIMENTAL (this may change or be deleted): Host transaction report
"""
type TransactionReports {
  """
  The start date of the time series
  """
  dateFrom: DateTime

  """
  The end date of the time series
  """
  dateTo: DateTime

  """
  The interval between two data points
  """
  timeUnit: TimeUnit!
  nodes: [TransactionReport!]
}

"""
EXPERIMENTAL (this may change or be deleted)
"""
type TransactionReport {
  date: DateTime
  startingBalance: Amount!
  endingBalance: Amount!
  totalChange: Amount!
  groups: [TransactionsAmountGroup]!
}

"""
EXPERIMENTAL (this may change or be deleted): Transaction amounts grouped by type, kind, isRefund, isHost, expenseType
"""
type TransactionsAmountGroup {
  netAmount: Amount
  amount: Amount
  platformFee: Amount
  paymentProcessorFee: Amount
  hostFee: Amount
  taxAmount: Amount
  type: TransactionType
  kind: TransactionKind
  isRefund: Boolean
  isHost: Boolean
  expenseType: ExpenseType
}

"""
A collection of webhooks
"""
type WebhookCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Webhook]
}

"""
An webhook attached to an account
"""
type Webhook {
  id: String!
  legacyId: Int!
  activityType: ActivityType
  webhookUrl: URL
  account: Account!
}

"""
A collection of "Accounting Categories"
"""
type AccountingCategoryCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int

  """
  The Accounting Categories
  """
  nodes: [AccountingCategory!]!
}

enum AccountingCategoryKind {
  ADDED_FUNDS
  CONTRIBUTION
  EXPENSE
}

"""
The name of the current plan and its characteristics.
"""
type HostPlan {
  """
  The public id identifying the account (ie: 5v08jk63-w4g9nbpz-j7qmyder-p7ozax5g)
  """
  id: String

  """
  The name of the plan
  """
  name: String

  """
  Number of collectives hosted
  """
  hostedCollectives: Int

  """
  Max number of collectives than can be hosted
  """
  hostedCollectivesLimit: Int

  """
  Whether this plan allows to use the added funds feature
  """
  addedFunds: Int

  """
  Amount limit for the added funds feature under this plan
  """
  addedFundsLimit: Int

  """
  Whether this plan allows to use the host dashboard
  """
  hostDashboard: Boolean

  """
  Whether this plan allows to use the manual payments feature
  """
  manualPayments: Boolean

  """
  Whether this plan allows to use the bank transfers feature
  """
  bankTransfers: Int

  """
  Amount limit for the bank transfers feature under this plan
  """
  bankTransfersLimit: Int

  """
  Whether this plan allows to use the transferwise payouts feature
  """
  transferwisePayouts: Int

  """
  Amount limit for the transferwise payouts feature under this plan
  """
  transferwisePayoutsLimit: Int

  """
  Ability to charge Host Fees.
  """
  hostFees: Boolean

  """
  Charge on revenues made through Host Fees.
  """
  hostFeeSharePercent: Float

  """
  Ability to collect Platform Tips.
  """
  platformTips: Boolean
}

"""
EXPERIMENTAL (this may change or be deleted): Host transaction report
"""
type HostTransactionReports {
  """
  The start date of the time series
  """
  dateFrom: DateTime

  """
  The end date of the time series
  """
  dateTo: DateTime

  """
  The interval between two data points
  """
  timeUnit: TimeUnit!
  nodes: [HostTransactionReportNode!]
}

type HostTransactionReportNode {
  date: DateTime!
  managedFunds: TransactionReport!
  operationalFunds: TransactionReport!
}

"""
Host metrics related to collected and pending fees/tips.
"""
type HostMetrics {
  """
  Amount collected in host fees for given period
  """
  hostFees: Amount

  """
  Amount collected in platform fees for given period
  """
  platformFees: Amount

  """
  Amount collected in platform fees requiring settlement
  """
  pendingPlatformFees: Amount

  """
  Amount collected in platform tips for given period
  """
  platformTips: Amount

  """
  Amount collected in platform tips requiring settlement
  """
  pendingPlatformTips: Amount

  """
  Amount in host fee shared with the platform
  """
  hostFeeShare: Amount

  """
  Amount in host fee shared  requiring settlement
  """
  pendingHostFeeShare: Amount

  """
  Amount in host fee shared not requiring settlement
  """
  settledHostFeeShare: Amount

  """
  Total amount managed on behalf of hosted collectives
  """
  totalMoneyManaged: Amount

  """
  Host fee sharing percent
  """
  hostFeeSharePercent: Float
}

"""
Host metrics time series
"""
type HostMetricsTimeSeries {
  """
  The start date of the time series
  """
  dateFrom: DateTime

  """
  The end date of the time series
  """
  dateTo: DateTime

  """
  The interval between two data points
  """
  timeUnit: TimeUnit!

  """
  History of the collected platform tips
  """
  platformTips: TimeSeriesAmount!

  """
  History of the host fees collected
  """
  hostFees: TimeSeriesAmount!

  """
  History of the share of host fees collected owed to Open Collective Inc.
  """
  hostFeeShare: TimeSeriesAmountWithSettlement!

  """
  History of the total money managed by this host
  """
  totalMoneyManaged: TimeSeriesAmount!

  """
  History of the total money received by this host
  """
  totalReceived: TimeSeriesAmountWithKind!

  """
  History of the total money spent by this host
  """
  totalSpent: TimeSeriesAmountWithKind!
}

"""
Amounts with settlements time series
"""
type TimeSeriesAmountWithSettlement implements TimeSeries {
  """
  The start date of the time series
  """
  dateFrom: DateTime

  """
  The end date of the time series
  """
  dateTo: DateTime

  """
  The interval between two data points
  """
  timeUnit: TimeUnit!

  """
  Time series data points
  """
  nodes: [TimeSeriesAmountWithSettlementNode!]!
}

type TimeSeriesAmountWithSettlementNode {
  date: DateTime!
  amount: Amount!
  settlementStatus: TransactionSettlementStatus!
}

enum TransactionSettlementStatus {
  OWED
  INVOICED
  SETTLED
}

"""
Amounts with settlements time series
"""
type TimeSeriesAmountWithKind implements TimeSeries {
  """
  The start date of the time series
  """
  dateFrom: DateTime

  """
  The end date of the time series
  """
  dateTo: DateTime

  """
  The interval between two data points
  """
  timeUnit: TimeUnit!

  """
  Time series data points
  """
  nodes: [TimeSeriesAmountWithKindNode!]!
}

type TimeSeriesAmountWithKindNode {
  date: DateTime!
  amount: Amount!
  kind: TransactionKind!
}

"""
EXPERIMENTAL (this may change or be deleted): Host expenses report
"""
type HostExpensesReports {
  """
  The start date of the time series
  """
  dateFrom: DateTime

  """
  The end date of the time series
  """
  dateTo: DateTime

  """
  The interval between two data points
  """
  timeUnit: TimeUnit!
  nodes: [HostExpensesReportNode!]
}

type HostExpensesReportNode {
  date: DateTime!
  isHost: Boolean!
  accountingCategory: AccountingCategory
  amount: Amount!
  count: Int!
}

"""
Stripe connected account properties
"""
type StripeConnectedAccount {
  username: String
  issuingBalance: Amount
}

"""
Input type for an amount with the value and currency
"""
input AmountInput {
  """
  The value in plain
  """
  value: Float

  """
  The currency string
  """
  currency: Currency

  """
  The value in cents
  """
  valueInCents: Int

  """
  If the amount was generated from a currency conversion, this field can be used to provide details about the conversion
  """
  exchangeRate: CurrencyExchangeRateInput
}

"""
Fields for a currency exchange rate
"""
input CurrencyExchangeRateInput {
  """
  Where does the FX rate comes from
  """
  source: CurrencyExchangeRateSourceType!
  fromCurrency: Currency!
  toCurrency: Currency!

  """
  Date of the FX rate
  """
  date: DateTime!

  """
  Exchange rate value as a float (e.g 1.15 or 0.86)
  """
  value: Float!
}

"""
Where does the FX rate come from
"""
enum CurrencyExchangeRateSourceType {
  """
  Open Collective internal system, relying on caching and 3rd party APIs
  """
  OPENCOLLECTIVE

  """
  PayPal API
  """
  PAYPAL

  """
  Wise API
  """
  WISE

  """
  User-provided exchange rate
  """
  USER
}

"""
Contribution statistics related to the given accounts
"""
type ContributionStats {
  """
  The total number of contributions
  """
  contributionsCount: Int!

  """
  Number of one time contributions
  """
  oneTimeContributionsCount: Int!

  """
  Number of recurring contributions
  """
  recurringContributionsCount: Int!

  """
  The daily average income
  """
  dailyAverageIncomeAmount: Amount!
}

"""
Expense statistics related to the given accounts
"""
type ExpenseStats {
  """
  The total number of expenses
  """
  expensesCount: Int!

  """
  The daily average paid in expenses
  """
  dailyAverageAmount: Amount!

  """
  Number of invoices
  """
  invoicesCount: Int!

  """
  Number of reimbursements
  """
  reimbursementsCount: Int!

  """
  Number of grants
  """
  grantsCount: Int!
}

"""
A collection of "Agreement"
"""
type AgreementCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Agreement!]
}

"""
An agreement
"""
type Agreement {
  id: String
  title: String!

  """
  Additional notes about the agreement for the host admins
  """
  notes: String

  """
  The time of creation of this agreement
  """
  createdAt: DateTime!
  createdBy: Account
  account: Account!
  host: Host!
  expiresAt: DateTime
  attachment: FileInfo
}

"""
A collection of Vendors
"""
type VendorCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Vendor!]
}

"""
A collection of hosted "Accounts"
"""
type HostedAccountCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Account]
  currencies: [String]
}

"""
Input type for an amount range with the value and currency
"""
input AmountRangeInput {
  """
  The minimum amount (inclusive)
  """
  gte: AmountInput

  """
  The maximum amount (inclusive)
  """
  lte: AmountInput
}

"""
A collection of "LegalDocument"
"""
type LegalDocumentCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [LegalDocument]
}

"""
A collection of "TransactionsImports"
"""
type TransactionsImportsCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [TransactionsImport!]
}

type TransactionsImport {
  """
  The public id of the import
  """
  id: String!

  """
  Account that holds the import
  """
  account: Account!

  """
  URL of the import (e.g. link to the CSV file)
  """
  file: FileInfo

  """
  Source of the import (e.g. "Bank of America", "Eventbrite", etc...)
  """
  source: NonEmptyString!

  """
  Name of the import (e.g. "Contributions May 2021", "Tickets for Mautic Conference 2024")
  """
  name: NonEmptyString!

  """
  Type of the import
  """
  type: TransactionsImportType!

  """
  Configuration for the CSV import
  """
  csvConfig: JSON

  """
  When the import was created
  """
  createdAt: DateTime!

  """
  When the import was last updated
  """
  updatedAt: DateTime!

  """
  When the import was last synced
  """
  lastSyncAt: DateTime

  """
  Whether the import is currently syncing
  """
  isSyncing: Boolean!

  """
  Cursor that defines where the last sync left off. Useful to know if there is new data to sync
  """
  lastSyncCursor: String

  """
  List of available accounts for the import
  """
  plaidAccounts: [PlaidAccount]

  """
  Assignments for the import, as a map of account id to legacy collective IDs. The `__default__` key can be use to set the default assignment.
  """
  assignments: [TransactionsImportAssignment!]!

  """
  Connected account linked to the import
  """
  connectedAccount: ConnectedAccount

  """
  List of rows in the import
  """
  rows(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter rows by status
    """
    status: TransactionsImportRowStatus

    """
    Search by text
    """
    searchTerm: String

    """
    Filter rows by plaid account id
    """
    accountId: [NonEmptyString]
  ): TransactionsImportRowCollection!
  stats: TransactionsImportStats
}

"""
A string that cannot be passed as an empty value
"""
scalar NonEmptyString

"""
Type of the import
"""
enum TransactionsImportType {
  CSV
  MANUAL
  PLAID
}

type PlaidAccount {
  accountId: String!
  mask: String!
  name: String!
  officialName: String!
  subtype: String!
  type: PlaidAccountType!
}

enum PlaidAccountType {
  """
  Investment
  """
  investment

  """
  Credit
  """
  credit

  """
  Depository
  """
  depository

  """
  Loan
  """
  loan

  """
  Brokerage
  """
  brokerage

  """
  Other
  """
  other
}

type TransactionsImportAssignment {
  importedAccountId: NonEmptyString!
  accounts: [Account!]!
}

"""
A collection of "TransactionsImportRow"
"""
type TransactionsImportRowCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [TransactionsImportRow!]
}

"""
A row in a transactions import
"""
type TransactionsImportRow {
  """
  The public id of the imported row
  """
  id: String!

  """
  The source id of the row
  """
  sourceId: NonEmptyString!

  """
  The status of the row
  """
  status: TransactionsImportRowStatus!

  """
  The description of the row
  """
  description: String!

  """
  The date of the row
  """
  date: DateTime!

  """
  The amount of the row
  """
  amount: Amount!

  """
  Optional note for the row
  """
  note: String

  """
  The expense associated with the row
  """
  expense: Expense

  """
  If an account ID is available in the imported row, it will be stored here. Returns the default account ID otherwise.
  """
  accountId: String

  """
  The raw data of the row
  """
  rawValue: JSONObject

  """
  The order associated with the row
  """
  order: Order
}

"""
The status of a row in a transactions import
"""
enum TransactionsImportRowStatus {
  """
  The row has not been processed yet
  """
  PENDING

  """
  The row has been linked to an existing expense or order
  """
  LINKED

  """
  The row has been ignored
  """
  IGNORED

  """
  The row is on hold
  """
  ON_HOLD
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type TransactionsImportStats {
  """
  Total number of rows in the import
  """
  total: Int!

  """
  Number of rows that have been ignored
  """
  ignored: Int!

  """
  Number of rows that have been converted to expenses
  """
  expenses: Int!

  """
  Number of rows that have been converted to orders
  """
  orders: Int!

  """
  Number of rows that have been processed (either dismissed or converted to expenses or orders)
  """
  processed: Int!

  """
  Number of rows that are on hold
  """
  onHold: Int!

  """
  Number of rows that are pending
  """
  pending: Int!

  """
  Number of rows that are invalid (e.g. linked but without an expense or order)
  """
  invalid: Int!
}

enum AccountingCategoryAppliesTo {
  HOST
  HOSTED_COLLECTIVES
}

type ExpenseValuesByRole {
  id: NonEmptyString!

  """
  The values provided by the expense submitter(s)
  """
  submitter: ExpenseValuesRoleDetails

  """
  The values provided by the account admin(s)
  """
  accountAdmin: ExpenseValuesRoleDetails

  """
  The values provided by the host admin(s)
  """
  hostAdmin: ExpenseValuesRoleDetails
}

type ExpenseValuesRoleDetails {
  accountingCategory: AccountingCategory
}

enum ExpenseStatus {
  DRAFT
  UNVERIFIED
  PENDING
  INCOMPLETE
  APPROVED
  REJECTED
  PROCESSING
  ERROR
  PAID
  SCHEDULED_FOR_PAYMENT
  SPAM
  CANCELED
  INVITE_DECLINED
}

"""
Fields for an expense's attached file
"""
type ExpenseAttachedFile {
  """
  Unique identifier for this file
  """
  id: String!
  url: URL

  """
  The file info associated with this item (if any)
  """
  info: FileInfo

  """
  The original filename
  """
  name: String @deprecated(reason: "2023-01-23: We're moving this field to \"file.name\"")
}

"""
Fields for an expense item
"""
type ExpenseItem {
  """
  Unique identifier for this expense item
  """
  id: String!

  """
  Amount of this item
  """
  amount: Int! @deprecated(reason: "Please use `amountV2`")

  """
  Amount of this item
  """
  amountV2: Amount!

  """
  If the item currency is different than the expense currency, this field will expose the average exchange rate for this date as recorded by Open Collective. Used to decide whether the value in `amountV2.exchangeRate` looks correct.
  """
  referenceExchangeRate: CurrencyExchangeRate

  """
  The date on which the item was created
  """
  createdAt: DateTime!

  """
  The date on which the item was last updated
  """
  updatedAt: DateTime!

  """
  The date on which the expense took place
  """
  incurredAt: DateTime!

  """
  A description for this item. Enforced for new items, but old expenses may not have one.
  """
  description: String
  url: URL

  """
  The file associated with this item (if any)
  """
  file: FileInfo
}

"""
Fields for a currency fx rate
"""
type CurrencyExchangeRate {
  """
  Exchange rate value as a scalar (e.g 1.15 or 0.86)
  """
  value: Float!

  """
  Where does the FX rate comes from
  """
  source: CurrencyExchangeRateSourceType!
  fromCurrency: Currency!
  toCurrency: Currency!

  """
  Date of the FX rate
  """
  date: DateTime!

  """
  Is the FX rate approximate or a fixed value?
  """
  isApproximate: Boolean!
}

"""
All supported expense types
"""
enum FeesPayer {
  """
  The collective will be responsible for paying the fees
  """
  COLLECTIVE

  """
  The payee will be responsible for paying the fees (they'll be deduced from the total amount)
  """
  PAYEE
}

"""
Fields for the user permissions on an expense
"""
type ExpensePermissions {
  id: String!

  """
  Whether the current user can edit the expense
  """
  canEdit: Boolean!

  """
  Whether the current user can edit the expense accounting category
  """
  canEditAccountingCategory: Boolean!

  """
  Tags permissions are a bit different, and can be edited by admins even if the expense has already been paid
  """
  canEditTags: Boolean!

  """
  Whether the current user can edit the expense
  """
  canDelete: Boolean!

  """
  Whether the current user can the the invoice info for this expense
  """
  canSeeInvoiceInfo: Boolean!

  """
  Whether the current user can trigger the payment for this expense
  """
  canPay: Boolean!

  """
  Whether the current user can approve this expense
  """
  canApprove: Boolean!

  """
  Whether the current user can unapprove this expense
  """
  canUnapprove: Boolean!

  """
  Whether the current user can reject this expense
  """
  canReject: Boolean!

  """
  Whether the user or the given draft key is allowed decline the expense invite
  """
  canDeclineExpenseInvite(
    """
    Key for draft expense
    """
    draftKey: String
  ): Boolean!

  """
  Whether the current user can mark this expense as spam
  """
  canMarkAsSpam: Boolean!

  """
  Whether the current user can mark this expense as unpaid
  """
  canMarkAsUnpaid: Boolean!

  """
  Whether the current user can mark this expense as incomplete
  """
  canMarkAsIncomplete: Boolean!

  """
  Whether the current user can comment and see comments for this expense
  """
  canComment: Boolean!

  """
  Whether the current user can unschedule this expense payment
  """
  canUnschedulePayment: Boolean!

  """
  Whether the current user can verify this draft expense
  """
  canVerifyDraftExpense: Boolean!
  canUsePrivateNote: Boolean!
  canHold: Boolean!
  canRelease: Boolean!
  canDownloadTaxForm: Boolean!

  """
  Whether the current user can see the private details of the payout method of this expense
  """
  canSeePayoutMethodPrivateDetails: Boolean!
  edit: Permission!

  """
  Whether the current user can edit the expense accounting category
  """
  editAccountingCategory: Boolean!
  editTags: Permission!
  delete: Permission!
  seeInvoiceInfo: Permission!
  pay: Permission!
  approve: Permission!
  unapprove: Permission!
  reject: Permission!
  markAsSpam: Permission!
  markAsUnpaid: Permission!
  comment: Permission!
  usePrivateNote: Permission!
  unschedulePayment: Permission!
  verifyDraftExpense: Permission!
  hold: Permission!
  release: Permission!
  downloadTaxForm: Permission!
}

"""
Fields for an expense quote
"""
type ExpenseQuote {
  """
  Amount of this item
  """
  sourceAmount: Amount!

  """
  Amount of payment processor fee
  """
  paymentProcessorFeeAmount: Amount!

  """
  The date on which the item was created
  """
  estimatedDeliveryAt: DateTime
}

type TransferWiseRequiredField {
  type: String
  title: String
  fields: [TransferWiseField]
}

type TransferWiseField {
  name: String
  group: [TransferWiseFieldGroup]
}

type TransferWiseFieldGroup {
  key: String
  name: String
  type: String
  required: Boolean
  refreshRequirementsOnChange: Boolean
  displayFormat: String
  example: String
  minLength: Int
  maxLength: Int
  validationRegexp: String
  validationAsync: String
  valuesAllowed: [TransferWiseFieldVatvkluesAllowed]
}

type TransferWiseFieldVatvkluesAllowed {
  key: String
  name: String
}

"""
A recurring expense object
"""
type RecurringExpense {
  """
  Unique identifier for this recurring expense
  """
  id: String!

  """
  The interval in which this recurring expense is created
  """
  interval: RecurringExpenseInterval!
  account: Account!
  fromAccount: Account!

  """
  The last time this recurring expense was paid for
  """
  lastDraftedAt: DateTime!

  """
  The time this expense will cease to be recurring
  """
  endsAt: DateTime

  """
  The last expense created by this recurring expense record paid for
  """
  lastExpenseCreated: Expense
}

"""
All supported intervals for recurring expenses
"""
enum RecurringExpenseInterval {
  day
  week
  month
  quarter
  year
}

type SecurityCheck {
  """
  The SecurityCheck scope
  """
  scope: SecurityCheckScope!

  """
  The SecurityCheck level
  """
  level: SecurityCheckLevel!

  """
  SecurityCheck description message
  """
  message: String!

  """
  SecurityCheck details
  """
  details: String
}

"""
All supported SecurityCheck scopes
"""
enum SecurityCheckScope {
  USER
  COLLECTIVE
  PAYEE
  PAYOUT_METHOD
}

"""
All supported SecurityCheck levels
"""
enum SecurityCheckLevel {
  PASS
  LOW
  MEDIUM
  HIGH
}

"""
All fields that can be locked on an expense draft
"""
enum ExpenseLockableFields {
  """
  Locks items' amount and currency, and it also blocks the hability to add new items.
  """
  AMOUNT

  """
  Locks the payee field, if the user is not on the platform it locks its email.
  """
  PAYEE

  """
  Locks the description field.
  """
  DESCRIPTION

  """
  Locks the type field.
  """
  TYPE
}

"""
Fields for the user permissions on an transaction
"""
type TransactionPermissions {
  id: String!

  """
  Whether the current user can edit the transaction
  """
  canRefund: Boolean!

  """
  Whether the current user can download this transaction's invoice
  """
  canDownloadInvoice: Boolean!

  """
  Whether the current user can reject the transaction
  """
  canReject: Boolean!
}

type OrderTax {
  type: TaxType!
  percentage: Int! @deprecated(reason: "Please use `rate` instead")

  """
  Percentage applied, between 0-1
  """
  rate: Float!
}

"""
Fields for the user permissions on an order
"""
type OrderPermissions {
  id: String!

  """
  Whether the current user can mark this order as expired
  """
  canMarkAsExpired: Boolean!

  """
  Whether the current user can mark this order as unpaid
  """
  canMarkAsPaid: Boolean!

  """
  Whether the current user can edit this pending order
  """
  canEdit: Boolean!

  """
  Whether the current user can comment on this order
  """
  canComment: Boolean!

  """
  Whether the current user can see private activities for this order
  """
  canSeePrivateActivities: Boolean!

  """
  Whether the current user can set tags on this order
  """
  canSetTags: Boolean!

  """
  Whether the current user can update the accounting category of this order
  """
  canUpdateAccountingCategory: Boolean!

  """
  If paused, whether the current user can resume this order
  """
  canResume: Boolean!
}

"""
A collection of "Activities"
"""
type ActivityCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Activity!]
}

type PendingOrderData {
  expectedAt: DateTime
  paymentMethod: String
  ponumber: String
  memo: String
  fromAccountInfo: PendingOrderFromAccountInfo
}

type PendingOrderFromAccountInfo {
  name: String
  email: String
}

enum TierType {
  TIER
  MEMBERSHIP
  DONATION
  TICKET
  SERVICE
  PRODUCT
}

enum TierInterval {
  month
  year
  flexible
}

enum TierFrequency {
  MONTHLY
  YEARLY
  ONETIME
  FLEXIBLE
}

enum TierAmountType {
  FIXED
  FLEXIBLE
}

"""
Stats about a tier
"""
type TierStats {
  id: String!

  """
  Total amount donated for this tier, in cents.
  """
  totalAmountReceived: Amount!

  """
  How much money is given for this tier for each tier.interval (monthly/yearly). For flexible tiers, this amount is a monthly average of contributions amount, taking into account both yearly and monthly subscriptions.
  """
  recurringAmount: Amount!
}

"""
A financial amount.
"""
type Amount {
  value: Float
  currency: Currency
  valueInCents: Float

  """
  If the amount was generated from a currency conversion, this field contains details about the conversion
  """
  exchangeRate: CurrencyExchangeRate
}

"""
This represents a Bot account
"""
type Bot implements Account {
  id: String!
  legacyId: Int!

  """
  The slug identifying the account (ie: babel)
  """
  slug: String!
  type: AccountType!

  """
  Public name
  """
  name: String

  """
  Private, legal name. Used for expense receipts, taxes, etc. Scope: "account".
  """
  legalName: String
  description: String
  longDescription: String
  tags: [String]
  website: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  twitterHandle: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  githubHandle: String @deprecated(reason: "2022-06-03: Please use repositoryUrl")
  repositoryUrl: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  socialLinks: [SocialLink!]!

  """
  The currency of the account
  """
  currency: Currency!
  expensePolicy: String @deprecated(reason: "2024-11-04: Please use policies.EXPENSE_POLICIES")

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Date of unhosting by a given Fiscal Host.
  """
  unhostedAt(
    """
    The host account this collective was hosted by
    """
    host: AccountReferenceInput!
  ): DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean!

  """
  Whether this account is frozen
  """
  isFrozen: Boolean!

  """
  Returns whether the account accepts financial contributions.
  """
  isActive: Boolean

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean!

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!
  parentAccount: Account @deprecated(reason: "2022-12-16: use parent on AccountWithParent instead")

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int! = 100
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
    includeInherited: Boolean = true
  ): MemberCollection!

  """
  [AUTHENTICATED] Returns the pending invitations
  """
  memberInvitations(
    """
    A reference to an account (usually Individual). Will return invitations sent to the account to join as a member
    """
    memberAccount: AccountReferenceInput

    """
    A reference to an account (usually Collective, Fund or Organization). Will return invitations sent to join this account as a member.
    """
    account: AccountReferenceInput

    """
    An array of Member roles to filter for
    """
    role: [MemberRole]
  ): [MemberInvitation]

  """
  The legal documents associated with this account
  """
  legalDocuments(
    """
    Filter by type
    """
    type: [LegalDocumentType]
  ): [LegalDocument]
  memberOf(
    limit: Int! = 150
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }

    """
    Order the query by requested role order
    """
    orderByRoles: Boolean
  ): MemberOfCollection!

  """
  Returns the emails of the account. Individuals only have one, but organizations can have multiple emails.
  """
  emails: [EmailAddress!]
  transactions(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The transaction type (DEBIT or CREDIT)
    """
    type: TransactionType

    """
    The payment method types. Can include `null` for transactions without a payment method
    """
    paymentMethodType: [PaymentMethodType]

    """
    The payment method services.
    """
    paymentMethodService: [PaymentMethodService]

    """
    Reference of the account(s) assigned to the main side of the transaction you want to EXCLUDE from the results
    """
    excludeAccount: [AccountReferenceInput]

    """
    Reference of the account assigned to the other side of the transaction (CREDIT -> sender, DEBIT -> recipient). Avoid, favor account instead.
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the host accounting the transaction
    """
    host: AccountReferenceInput

    """
    NOT IMPLEMENTED. Only return transactions that match these tags.
    """
    tags: [String] @deprecated(reason: "2020-08-09: Was never implemented.")

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return transactions where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transactions that were created before this date
    """
    dateTo: DateTime

    """
    Only return transactions that were cleared after this date
    """
    clearedFrom: DateTime

    """
    Only return transactions that were cleared before this date
    """
    clearedTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    If true, return transactions with debt attached, if false transactions without debt attached.
    """
    hasDebt: Boolean

    """
    Only return transactions with an Expense attached
    """
    hasExpense: Boolean

    """
    Only return transactions with this Expense attached
    """
    expense: ExpenseReferenceInput

    """
    Only return transactions that have an Expense of one of these expense types attached
    """
    expenseType: [ExpenseType]

    """
    Only return transactions with an Order attached
    """
    hasOrder: Boolean

    """
    Only return transactions for this order.
    """
    order: OrderReferenceInput

    """
    Used when filtering with the `host` argument to determine whether to include transactions on the fiscal host account (and children)
    """
    includeHost: Boolean! = true

    """
    Whether to include regular transactions from the account (turn false if you only want Incognito or Gift Card transactions)
    """
    includeRegularTransactions: Boolean! = true

    """
    If the account is a user and this field is true, contributions from the incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false

    """
    Whether to include transactions from children (Events and Projects)
    """
    includeChildrenTransactions: Boolean! = false

    """
    Whether to include transactions from Gift Cards issued by the account.
    """
    includeGiftCardTransactions: Boolean! = false

    """
    Whether to include debt transactions
    """
    includeDebts: Boolean! = false

    """
    To filter by transaction kind
    """
    kind: [TransactionKind]

    """
    The transactions group to filter by
    """
    group: [String]
    virtualCard: [VirtualCardReferenceInput]

    """
    Only return transactions that are refunds (or not refunds if false)
    """
    isRefund: Boolean

    """
    Only return transactions that are associated with these external merchant IDs
    """
    merchantId: [String]

    """
    Only return transactions that are associated with these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payment method
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): TransactionCollection!
  orders(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Include orders from children events/projects
    """
    includeChildrenAccounts: Boolean! = false

    """
    Only return orders that were paused by these roles. status must be set to PAUSED.
    """
    pausedBy: [OrderPausedBy]

    """
    Only return orders that were paid with this payment method. Must be an admin of the account owning the payment method.
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return orders that match these payment method services
    """
    paymentMethodService: [PaymentMethodService]

    """
    Only return orders that match these payment method types
    """
    paymentMethodType: [PaymentMethodType]

    """
    Whether to include incognito orders. Must be admin or root. Only with filter null or OUTGOING.
    """
    includeIncognito: Boolean = false

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their frequency (ONETIME, MONTHLY or YEARLY)
    """
    frequency: [ContributionFrequency]

    """
    Use this field to filter orders on their statuses
    """
    status: [OrderStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: DateTime

    """
    Only return orders that were created before this date
    """
    dateTo: DateTime

    """
    Only return pending orders that were expected after this date
    """
    expectedDateFrom: DateTime

    """
    Only return pending orders that were expected before this date
    """
    expectedDateTo: DateTime

    """
    Return orders that were charged after this date
    """
    chargedDateFrom: DateTime

    """
    Return orders that were charged before this date
    """
    chargedDateTo: DateTime

    """
    The term to search
    """
    searchTerm: String
    tierSlug: String @deprecated(reason: "2022-02-25: Should be replaced by a tier reference.")
    tier: [TierReferenceInput]

    """
    Only returns orders that have a subscription (monthly/yearly). Don't use together with frequency.
    """
    onlySubscriptions: Boolean

    """
    Same as onlySubscriptions, but returns only orders with active subscriptions
    """
    onlyActiveSubscriptions: Boolean
    expectedFundsFilter: ExpectedFundsFilter

    """
    Return only orders made from/to that opposite account (only works when orders are already filtered with a main account)
    """
    oppositeAccount: AccountReferenceInput

    """
    Return only orders made from/to these hosted accounts
    """
    hostedAccounts: [AccountReferenceInput]
  ): OrderCollection!
  expenses(
    direction: ExpenseDirection

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Reference of an account that is the payee of an expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of an account that is the payer of an expense
    """
    account: AccountReferenceInput

    """
    An alternative to filter by accounts, both cannot be used together
    """
    accounts: [AccountReferenceInput]

    """
    Return expenses only for this host
    """
    host: AccountReferenceInput

    """
    Return expenses only created by this INDIVIDUAL account
    """
    createdByAccount: AccountReferenceInput

    """
    Use this field to filter expenses on their statuses
    """
    status: [ExpenseStatusFilter]

    """
    Use this field to filter expenses on their type (RECEIPT/INVOICE)
    """
    type: ExpenseType
    types: [ExpenseType]

    """
    Only expenses that match these tags
    """
    tags: [String] @deprecated(reason: "2020-06-30: Please use tag (singular)")

    """
    Only expenses that match these tags
    """
    tag: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that use the given type as payout method
    """
    payoutMethodType: PayoutMethodType

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime

    """
    Only return expenses that were created after this date
    """
    dateTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    Whether to include expenses from children of the account (Events and Projects)
    """
    includeChildrenExpenses: Boolean! = false

    """
    Only return expenses that contains this custom data. Requires being an admin of the collective, payee or host.
    """
    customData: JSON

    """
    Filter expenses of type charges based on presence of receipts
    """
    chargeHasReceipts: Boolean

    """
    Filter expenses of type charges using these virtual cards
    """
    virtualCards: [VirtualCardReferenceInput]

    """
    Filter expenses by the last user-role who replied to them
    """
    lastCommentBy: [LastCommentBy]

    """
    Only return expenses that match these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): ExpenseCollection!
  settings: JSON!
  conversations(
    limit: Int! = 15
    offset: Int! = 0

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection!

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int! = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int! = 30): [TagStat]

  """
  The list of expense types supported by this account
  """
  supportedExpenseTypes: [ExpenseType!]!
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid. In most cases, admin only and scope: "expenses".
  """
  payoutMethods(
    """
    Whether to include archived payout methods
    """
    includeArchived: Boolean = false
  ): [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders. Admin or Host only. Scope: "orders".
  """
  paymentMethods(
    type: [PaymentMethodType]
    enumType: [PaymentMethodType] @deprecated(reason: "2021-08-20: use type instead from now")
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]

  """
  The list of payment methods for this account that are pending a client confirmation (3D Secure / SCA)
  """
  paymentMethodsWithPendingConfirmation: [PaymentMethod]

  """
  The list of connected accounts (Stripe, PayPal, etc ...). Admin only. Scope: "connectedAccounts".
  """
  connectedAccounts: [ConnectedAccount]

  """
  The list of applications created by this account. Admin only. Scope: "applications".
  """
  oAuthApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): OAuthApplicationCollection

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats

  """
  Whether this account can have changelog updates
  """
  canHaveChangelogUpdates: Boolean!

  """
  Updates published by the account. To see unpublished updates, you need to be an admin and have the scope "updates".
  """
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Only return published updates.
    """
    onlyPublishedUpdates: Boolean = false
    isDraft: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: UpdateChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!

  """
  Virtual Cards attached to the account. Admin only. Scope: "virtualCards".
  """
  virtualCards(
    limit: Int! = 100
    offset: Int! = 0
    state: String = null @deprecated(reason: "2023-11-06: Please use status.")
    status: [VirtualCardStatus]
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: DateTime = null
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): VirtualCardCollection

  """
  Virtual Cards Merchants used by the account. Admin only. Scope: "virtualCards".
  """
  virtualCardMerchants(limit: Int! = 100, offset: Int! = 0): AccountCollection
  childrenAccounts(
    limit: Int! = 100
    offset: Int! = 0
    isActive: Boolean
    accountType: [AccountType]
    searchTerm: String

    """
    Order of the results. Defaults to createdAt DESC.
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }
  ): AccountCollection!

  """
  Policies for the account. To see non-public policies you need to be admin and have the scope: "account".
  """
  policies: Policies!

  """
  List of activities that the logged-in user is subscribed for this collective
  """
  activitySubscriptions(channel: ActivityChannel): [ActivitySubscription]

  """
  Logged-in user permissions on an account
  """
  permissions: AccountPermissions!

  """
  Host application requests
  """
  hostApplicationRequests(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Filter applications by status
    """
    status: HostApplicationStatus
  ): HostApplicationCollection!
  feed(
    """
    Only returns activities before this date
    """
    dateTo: DateTime

    """
    Number of activities to retrieve
    """
    limit: Int

    """
    The classes of activity types to filter for
    """
    classes: [ActivityClassType]
  ): [Activity]

  """
  If created by duplication, the account from which this one was duplicated
  """
  duplicatedFromAccount: Account

  """
  If this account was duplicated, the accounts that were created from it
  """
  duplicatedAccounts(limit: Int! = 100, offset: Int! = 0): AccountCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  transactionGroups(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter transaction groups by the type of the primary transaction
    """
    type: TransactionType

    """
    Filter transaction groups by the kind of the primary transaction
    """
    kind: TransactionKind

    """
    Only return transaction groups that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transaction groups that were created before this date
    """
    dateTo: DateTime
  ): TransactionGroupCollection!

  """
  EXPERIMENTAL (this may change or be removed)
  """
  transactionReports(timeUnit: TimeUnit = MONTH, dateFrom: DateTime, dateTo: DateTime): TransactionReports
  webhooks(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    account: AccountReferenceInput!
  ): WebhookCollection!
}

"""
This represents a Collective account
"""
type Collective implements Account & AccountWithHost & AccountWithContributions {
  id: String!
  legacyId: Int!

  """
  The slug identifying the account (ie: babel)
  """
  slug: String!
  type: AccountType!

  """
  Public name
  """
  name: String

  """
  Private, legal name. Used for expense receipts, taxes, etc. Scope: "account".
  """
  legalName: String
  description: String
  longDescription: String
  tags: [String]
  website: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  twitterHandle: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  githubHandle: String @deprecated(reason: "2022-06-03: Please use repositoryUrl")
  repositoryUrl: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  socialLinks: [SocialLink!]!

  """
  The currency of the account
  """
  currency: Currency!
  expensePolicy: String @deprecated(reason: "2024-11-04: Please use policies.EXPENSE_POLICIES")

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Date of unhosting by a given Fiscal Host.
  """
  unhostedAt(
    """
    The host account this collective was hosted by
    """
    host: AccountReferenceInput!
  ): DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean!

  """
  Whether this account is frozen
  """
  isFrozen: Boolean!

  """
  Returns whether it's active: can accept financial contributions and pay expenses.
  """
  isActive: Boolean!

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean!

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!
  parentAccount: Account @deprecated(reason: "2022-12-16: use parent on AccountWithParent instead")

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int! = 100
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
    includeInherited: Boolean = true
  ): MemberCollection!

  """
  [AUTHENTICATED] Returns the pending invitations
  """
  memberInvitations(
    """
    A reference to an account (usually Individual). Will return invitations sent to the account to join as a member
    """
    memberAccount: AccountReferenceInput

    """
    A reference to an account (usually Collective, Fund or Organization). Will return invitations sent to join this account as a member.
    """
    account: AccountReferenceInput

    """
    An array of Member roles to filter for
    """
    role: [MemberRole]
  ): [MemberInvitation]

  """
  The legal documents associated with this account
  """
  legalDocuments(
    """
    Filter by type
    """
    type: [LegalDocumentType]
  ): [LegalDocument]
  memberOf(
    limit: Int! = 150
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }

    """
    Order the query by requested role order
    """
    orderByRoles: Boolean
  ): MemberOfCollection!

  """
  Returns the emails of the account. Individuals only have one, but organizations can have multiple emails.
  """
  emails: [EmailAddress!]
  transactions(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The transaction type (DEBIT or CREDIT)
    """
    type: TransactionType

    """
    The payment method types. Can include `null` for transactions without a payment method
    """
    paymentMethodType: [PaymentMethodType]

    """
    The payment method services.
    """
    paymentMethodService: [PaymentMethodService]

    """
    Reference of the account(s) assigned to the main side of the transaction you want to EXCLUDE from the results
    """
    excludeAccount: [AccountReferenceInput]

    """
    Reference of the account assigned to the other side of the transaction (CREDIT -> sender, DEBIT -> recipient). Avoid, favor account instead.
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the host accounting the transaction
    """
    host: AccountReferenceInput

    """
    NOT IMPLEMENTED. Only return transactions that match these tags.
    """
    tags: [String] @deprecated(reason: "2020-08-09: Was never implemented.")

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return transactions where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transactions that were created before this date
    """
    dateTo: DateTime

    """
    Only return transactions that were cleared after this date
    """
    clearedFrom: DateTime

    """
    Only return transactions that were cleared before this date
    """
    clearedTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    If true, return transactions with debt attached, if false transactions without debt attached.
    """
    hasDebt: Boolean

    """
    Only return transactions with an Expense attached
    """
    hasExpense: Boolean

    """
    Only return transactions with this Expense attached
    """
    expense: ExpenseReferenceInput

    """
    Only return transactions that have an Expense of one of these expense types attached
    """
    expenseType: [ExpenseType]

    """
    Only return transactions with an Order attached
    """
    hasOrder: Boolean

    """
    Only return transactions for this order.
    """
    order: OrderReferenceInput

    """
    Used when filtering with the `host` argument to determine whether to include transactions on the fiscal host account (and children)
    """
    includeHost: Boolean! = true

    """
    Whether to include regular transactions from the account (turn false if you only want Incognito or Gift Card transactions)
    """
    includeRegularTransactions: Boolean! = true

    """
    If the account is a user and this field is true, contributions from the incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false

    """
    Whether to include transactions from children (Events and Projects)
    """
    includeChildrenTransactions: Boolean! = false

    """
    Whether to include transactions from Gift Cards issued by the account.
    """
    includeGiftCardTransactions: Boolean! = false

    """
    Whether to include debt transactions
    """
    includeDebts: Boolean! = false

    """
    To filter by transaction kind
    """
    kind: [TransactionKind]

    """
    The transactions group to filter by
    """
    group: [String]
    virtualCard: [VirtualCardReferenceInput]

    """
    Only return transactions that are refunds (or not refunds if false)
    """
    isRefund: Boolean

    """
    Only return transactions that are associated with these external merchant IDs
    """
    merchantId: [String]

    """
    Only return transactions that are associated with these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payment method
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): TransactionCollection!
  orders(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Include orders from children events/projects
    """
    includeChildrenAccounts: Boolean! = false

    """
    Only return orders that were paused by these roles. status must be set to PAUSED.
    """
    pausedBy: [OrderPausedBy]

    """
    Only return orders that were paid with this payment method. Must be an admin of the account owning the payment method.
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return orders that match these payment method services
    """
    paymentMethodService: [PaymentMethodService]

    """
    Only return orders that match these payment method types
    """
    paymentMethodType: [PaymentMethodType]

    """
    Whether to include incognito orders. Must be admin or root. Only with filter null or OUTGOING.
    """
    includeIncognito: Boolean = false

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their frequency (ONETIME, MONTHLY or YEARLY)
    """
    frequency: [ContributionFrequency]

    """
    Use this field to filter orders on their statuses
    """
    status: [OrderStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: DateTime

    """
    Only return orders that were created before this date
    """
    dateTo: DateTime

    """
    Only return pending orders that were expected after this date
    """
    expectedDateFrom: DateTime

    """
    Only return pending orders that were expected before this date
    """
    expectedDateTo: DateTime

    """
    Return orders that were charged after this date
    """
    chargedDateFrom: DateTime

    """
    Return orders that were charged before this date
    """
    chargedDateTo: DateTime

    """
    The term to search
    """
    searchTerm: String
    tierSlug: String @deprecated(reason: "2022-02-25: Should be replaced by a tier reference.")
    tier: [TierReferenceInput]

    """
    Only returns orders that have a subscription (monthly/yearly). Don't use together with frequency.
    """
    onlySubscriptions: Boolean

    """
    Same as onlySubscriptions, but returns only orders with active subscriptions
    """
    onlyActiveSubscriptions: Boolean
    expectedFundsFilter: ExpectedFundsFilter

    """
    Return only orders made from/to that opposite account (only works when orders are already filtered with a main account)
    """
    oppositeAccount: AccountReferenceInput

    """
    Return only orders made from/to these hosted accounts
    """
    hostedAccounts: [AccountReferenceInput]
  ): OrderCollection!
  expenses(
    direction: ExpenseDirection

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Reference of an account that is the payee of an expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of an account that is the payer of an expense
    """
    account: AccountReferenceInput

    """
    An alternative to filter by accounts, both cannot be used together
    """
    accounts: [AccountReferenceInput]

    """
    Return expenses only for this host
    """
    host: AccountReferenceInput

    """
    Return expenses only created by this INDIVIDUAL account
    """
    createdByAccount: AccountReferenceInput

    """
    Use this field to filter expenses on their statuses
    """
    status: [ExpenseStatusFilter]

    """
    Use this field to filter expenses on their type (RECEIPT/INVOICE)
    """
    type: ExpenseType
    types: [ExpenseType]

    """
    Only expenses that match these tags
    """
    tags: [String] @deprecated(reason: "2020-06-30: Please use tag (singular)")

    """
    Only expenses that match these tags
    """
    tag: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that use the given type as payout method
    """
    payoutMethodType: PayoutMethodType

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime

    """
    Only return expenses that were created after this date
    """
    dateTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    Whether to include expenses from children of the account (Events and Projects)
    """
    includeChildrenExpenses: Boolean! = false

    """
    Only return expenses that contains this custom data. Requires being an admin of the collective, payee or host.
    """
    customData: JSON

    """
    Filter expenses of type charges based on presence of receipts
    """
    chargeHasReceipts: Boolean

    """
    Filter expenses of type charges using these virtual cards
    """
    virtualCards: [VirtualCardReferenceInput]

    """
    Filter expenses by the last user-role who replied to them
    """
    lastCommentBy: [LastCommentBy]

    """
    Only return expenses that match these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): ExpenseCollection!
  settings: JSON!
  conversations(
    limit: Int! = 15
    offset: Int! = 0

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection!

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int! = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int! = 30): [TagStat]

  """
  The list of expense types supported by this account
  """
  supportedExpenseTypes: [ExpenseType!]!
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid. In most cases, admin only and scope: "expenses".
  """
  payoutMethods(
    """
    Whether to include archived payout methods
    """
    includeArchived: Boolean = false
  ): [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders. Admin or Host only. Scope: "orders".
  """
  paymentMethods(
    type: [PaymentMethodType]
    enumType: [PaymentMethodType] @deprecated(reason: "2021-08-20: use type instead from now")
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]

  """
  The list of payment methods for this account that are pending a client confirmation (3D Secure / SCA)
  """
  paymentMethodsWithPendingConfirmation: [PaymentMethod]

  """
  The list of connected accounts (Stripe, PayPal, etc ...). Admin only. Scope: "connectedAccounts".
  """
  connectedAccounts: [ConnectedAccount]

  """
  The list of applications created by this account. Admin only. Scope: "applications".
  """
  oAuthApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): OAuthApplicationCollection

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats

  """
  Whether this account can have changelog updates
  """
  canHaveChangelogUpdates: Boolean!

  """
  Updates published by the account. To see unpublished updates, you need to be an admin and have the scope "updates".
  """
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Only return published updates.
    """
    onlyPublishedUpdates: Boolean = false
    isDraft: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: UpdateChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!

  """
  Virtual Cards attached to the account. Admin only. Scope: "virtualCards".
  """
  virtualCards(
    limit: Int! = 100
    offset: Int! = 0
    state: String = null @deprecated(reason: "2023-11-06: Please use status.")
    status: [VirtualCardStatus]
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: DateTime = null
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): VirtualCardCollection

  """
  Virtual Cards Merchants used by the account. Admin only. Scope: "virtualCards".
  """
  virtualCardMerchants(limit: Int! = 100, offset: Int! = 0): AccountCollection
  childrenAccounts(
    limit: Int! = 100
    offset: Int! = 0
    isActive: Boolean
    accountType: [AccountType]
    searchTerm: String

    """
    Order of the results. Defaults to createdAt DESC.
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }
  ): AccountCollection!

  """
  Policies for the account. To see non-public policies you need to be admin and have the scope: "account".
  """
  policies: Policies!

  """
  List of activities that the logged-in user is subscribed for this collective
  """
  activitySubscriptions(channel: ActivityChannel): [ActivitySubscription]

  """
  Logged-in user permissions on an account
  """
  permissions: AccountPermissions!

  """
  Host application requests
  """
  hostApplicationRequests(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Filter applications by status
    """
    status: HostApplicationStatus
  ): HostApplicationCollection!
  feed(
    """
    Only returns activities before this date
    """
    dateTo: DateTime

    """
    Number of activities to retrieve
    """
    limit: Int

    """
    The classes of activity types to filter for
    """
    classes: [ActivityClassType]
  ): [Activity]

  """
  If created by duplication, the account from which this one was duplicated
  """
  duplicatedFromAccount: Account

  """
  If this account was duplicated, the accounts that were created from it
  """
  duplicatedAccounts(limit: Int! = 100, offset: Int! = 0): AccountCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  transactionGroups(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter transaction groups by the type of the primary transaction
    """
    type: TransactionType

    """
    Filter transaction groups by the kind of the primary transaction
    """
    kind: TransactionKind

    """
    Only return transaction groups that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transaction groups that were created before this date
    """
    dateTo: DateTime
  ): TransactionGroupCollection!

  """
  EXPERIMENTAL (this may change or be removed)
  """
  transactionReports(timeUnit: TimeUnit = MONTH, dateFrom: DateTime, dateTo: DateTime): TransactionReports
  webhooks(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    account: AccountReferenceInput!
  ): WebhookCollection!

  """
  Returns the Fiscal Host
  """
  host: Host

  """
  Describe how the host charges the collective
  """
  hostFeesStructure: HostFeeStructure

  """
  Fees percentage that the host takes for this collective
  """
  hostFeePercent(paymentMethodService: PaymentMethodService, paymentMethodType: PaymentMethodType): Float

  """
  Returns the Fiscal Host application
  """
  hostApplication: HostApplication

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Float!

  """
  Date of approval by the Fiscal Host.
  """
  approvedAt: DateTime

  """
  Date when the collective was last unfrozen by current Fiscal Host
  """
  unfrozenAt: DateTime

  """
  Returns whether it's approved by the Fiscal Host
  """
  isApproved: Boolean!

  """
  Returns agreements this account has with its host, or null if not enough permissions.
  """
  hostAgreements(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 30

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): AgreementCollection
  summary(
    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime
  ): HostedAccountSummary

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers(
    """
    The number of results to fetch
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  activeContributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    dateFrom: DateTime
    dateTo: DateTime
    includeActiveRecurringContributions: Boolean
  ): AccountCollection!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!
  contributionPolicy: String

  """
  Returns true if the remote user can start the process to resume contributions for account
  """
  canStartResumeContributionsProcess: Boolean!

  """
  Returns true if the account has started the process to resume contributions
  """
  hasResumeContributionsProcessStarted: Boolean!
}

"""
An account that can be hosted by a Host
"""
interface AccountWithHost {
  """
  Returns the Fiscal Host
  """
  host: Host

  """
  Describe how the host charges the collective
  """
  hostFeesStructure: HostFeeStructure

  """
  Fees percentage that the host takes for this collective
  """
  hostFeePercent(paymentMethodService: PaymentMethodService, paymentMethodType: PaymentMethodType): Float

  """
  Returns the Fiscal Host application
  """
  hostApplication: HostApplication

  """
  Fees percentage that the platform takes for this collective
  """
  platformFeePercent: Float

  """
  Date of approval by the Fiscal Host.
  """
  approvedAt: DateTime

  """
  Date when the collective was last unfrozen by current Fiscal Host
  """
  unfrozenAt: DateTime

  """
  Returns whether it's approved by the Fiscal Host
  """
  isApproved: Boolean!

  """
  Returns whether it's active: can accept financial contributions and pay expenses.
  """
  isActive: Boolean!

  """
  Returns agreements this account has with its host, or null if not enough permissions.
  """
  hostAgreements(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 30

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): AgreementCollection
  summary(
    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime
  ): HostedAccountSummary
}

"""
Return a summary of transaction info about a given account within the context of its current fiscal host
"""
type HostedAccountSummary {
  expenseCount: Int
  expenseTotal: Amount
  expenseMaxValue: Amount
  expenseDistinctPayee: Int
  contributionCount: Int
  contributionTotal: Amount
  hostFeeTotal: Amount
  spentTotal: Amount
  receivedTotal: Amount

  """
  Average calculated over the number of months the collective was approved or the number of months since dateFrom, whichever is less
  """
  expenseAverageTotal(period: AveragePeriod = MONTH): Amount

  """
  Average calculated over the number of months the collective was approved or the number of months since dateFrom, whichever is less
  """
  expenseAverageCount(period: AveragePeriod = MONTH): Float

  """
  Average calculated over the number of months the collective was approved or the number of months since dateFrom, whichever is less
  """
  contributionAverageTotal(period: AveragePeriod = MONTH): Amount

  """
  Average calculated over the number of months/years the collective was approved or the number of months since dateFrom, whichever is less
  """
  contributionAverageCount(period: AveragePeriod = MONTH): Float
  spentTotalAverage(period: AveragePeriod = MONTH): Amount
  receivedTotalAverage(period: AveragePeriod = MONTH): Amount
  contributionRefundedTotal: Amount
}

"""
The period over which the average is calculated
"""
enum AveragePeriod {
  YEAR
  MONTH
}

"""
This represents a Credit transaction
"""
type Credit implements Transaction {
  id: String!
  legacyId: Int!
  uuid: String! @deprecated(reason: "2021-08-15: Use id instead.")
  group: String!
  type: TransactionType!
  kind: TransactionKind
  description(
    """
    Wether to generate the description dynamically.
    """
    dynamic: Boolean = false

    """
    Wether to generate the full description when using dynamic.
    """
    full: Boolean = false
  ): String
  amount: Amount!
  amountInHostCurrency: Amount!

  """
  Exchange rate between the currency of the transaction and the currency of the host (transaction.amount * transaction.hostCurrencyFxRate = transaction.amountInHostCurrency)
  """
  hostCurrencyFxRate: Float
  netAmount(
    """
    Fetch HOST_FEE transaction and integrate in calculation for retro-compatiblity.
    """
    fetchHostFee: Boolean = false

    """
    Fetch PAYMENT_PROCESSOR_FEE transaction for retro-compatiblity.
    """
    fetchPaymentProcessorFee: Boolean = false

    """
    Fetch TAX transaction for retro-compatiblity.
    """
    fetchTax: Boolean = false
  ): Amount!
  netAmountInHostCurrency(
    """
    Fetch HOST_FEE transaction and integrate in calculation for retro-compatiblity.
    """
    fetchHostFee: Boolean = false

    """
    Fetch PAYMENT_PROCESSOR_FEE transaction for retro-compatiblity.
    """
    fetchPaymentProcessorFee: Boolean = false

    """
    Fetch TAX transaction for retro-compatiblity.
    """
    fetchTax: Boolean = false
  ): Amount!
  taxAmount(
    """
    Fetch TAX transaction for retro-compatiblity.
    """
    fetchTax: Boolean = false
  ): Amount!

  """
  If a tax is set, this field will contain more info about the tax
  """
  taxInfo: TaxInfo
  platformFee: Amount!
  hostFee(
    """
    Fetch HOST_FEE transaction for retro-compatiblity.
    """
    fetchHostFee: Boolean = false
  ): Amount!

  """
  Payment Processor Fee (usually in host currency)
  """
  paymentProcessorFee(
    """
    Fetch PAYMENT_PROCESSOR_FEE transaction for retro-compatiblity.
    """
    fetchPaymentProcessorFee: Boolean = false
  ): Amount!
  paymentProcessorUrl: String
  host: Account

  """
  The account on the main side of the transaction (CREDIT -> recipient, DEBIT -> sender)
  """
  account: Account

  """
  The account on the opposite side of the transaction (CREDIT -> sender, DEBIT -> recipient)
  """
  oppositeAccount: Account
  fromAccount: Account
  toAccount: Account

  """
  Account that emitted the gift card used for this transaction (if any)
  """
  giftCardEmitterAccount: Account
  createdAt: DateTime
  updatedAt: DateTime
  clearedAt: DateTime
  expense: Expense
  order: Order
  isRefunded: Boolean
  isRefund: Boolean
  isDisputed: Boolean
  isInReview: Boolean
  paymentMethod: PaymentMethod
  payoutMethod: PayoutMethod

  """
  The permissions given to current logged in user for this transaction
  """
  permissions: TransactionPermissions!
  isOrderRejected: Boolean!
  refundTransaction: Transaction

  """
  The opposite transaction (CREDIT -> DEBIT, DEBIT -> CREDIT)
  """
  oppositeTransaction: Transaction
  relatedTransactions(
    """
    Filter by kind
    """
    kind: [TransactionKind]
  ): [Transaction]!

  """
  Merchant ID related to the Transaction (Stripe, PayPal, Wise, Privacy)
  """
  merchantId: String
  balanceInHostCurrency: Amount
  invoiceTemplate: String
}

"""
This represents a Debit transaction
"""
type Debit implements Transaction {
  id: String!
  legacyId: Int!
  uuid: String! @deprecated(reason: "2021-08-15: Use id instead.")
  group: String!
  type: TransactionType!
  kind: TransactionKind
  description(
    """
    Wether to generate the description dynamically.
    """
    dynamic: Boolean = false

    """
    Wether to generate the full description when using dynamic.
    """
    full: Boolean = false
  ): String
  amount: Amount!
  amountInHostCurrency: Amount!

  """
  Exchange rate between the currency of the transaction and the currency of the host (transaction.amount * transaction.hostCurrencyFxRate = transaction.amountInHostCurrency)
  """
  hostCurrencyFxRate: Float
  netAmount(
    """
    Fetch HOST_FEE transaction and integrate in calculation for retro-compatiblity.
    """
    fetchHostFee: Boolean = false

    """
    Fetch PAYMENT_PROCESSOR_FEE transaction for retro-compatiblity.
    """
    fetchPaymentProcessorFee: Boolean = false

    """
    Fetch TAX transaction for retro-compatiblity.
    """
    fetchTax: Boolean = false
  ): Amount!
  netAmountInHostCurrency(
    """
    Fetch HOST_FEE transaction and integrate in calculation for retro-compatiblity.
    """
    fetchHostFee: Boolean = false

    """
    Fetch PAYMENT_PROCESSOR_FEE transaction for retro-compatiblity.
    """
    fetchPaymentProcessorFee: Boolean = false

    """
    Fetch TAX transaction for retro-compatiblity.
    """
    fetchTax: Boolean = false
  ): Amount!
  taxAmount(
    """
    Fetch TAX transaction for retro-compatiblity.
    """
    fetchTax: Boolean = false
  ): Amount!

  """
  If a tax is set, this field will contain more info about the tax
  """
  taxInfo: TaxInfo
  platformFee: Amount!
  hostFee(
    """
    Fetch HOST_FEE transaction for retro-compatiblity.
    """
    fetchHostFee: Boolean = false
  ): Amount!

  """
  Payment Processor Fee (usually in host currency)
  """
  paymentProcessorFee(
    """
    Fetch PAYMENT_PROCESSOR_FEE transaction for retro-compatiblity.
    """
    fetchPaymentProcessorFee: Boolean = false
  ): Amount!
  paymentProcessorUrl: String
  host: Account

  """
  The account on the main side of the transaction (CREDIT -> recipient, DEBIT -> sender)
  """
  account: Account

  """
  The account on the opposite side of the transaction (CREDIT -> sender, DEBIT -> recipient)
  """
  oppositeAccount: Account
  fromAccount: Account
  toAccount: Account

  """
  Account that emitted the gift card used for this transaction (if any)
  """
  giftCardEmitterAccount: Account
  createdAt: DateTime
  updatedAt: DateTime
  clearedAt: DateTime
  expense: Expense
  order: Order
  isRefunded: Boolean
  isRefund: Boolean
  isDisputed: Boolean
  isInReview: Boolean
  paymentMethod: PaymentMethod
  payoutMethod: PayoutMethod

  """
  The permissions given to current logged in user for this transaction
  """
  permissions: TransactionPermissions!
  isOrderRejected: Boolean!
  refundTransaction: Transaction

  """
  The opposite transaction (CREDIT -> DEBIT, DEBIT -> CREDIT)
  """
  oppositeTransaction: Transaction
  relatedTransactions(
    """
    Filter by kind
    """
    kind: [TransactionKind]
  ): [Transaction]!

  """
  Merchant ID related to the Transaction (Stripe, PayPal, Wise, Privacy)
  """
  merchantId: String
  balanceInHostCurrency: Amount
  invoiceTemplate: String
}

"""
This represents an Event account
"""
type Event implements Account & AccountWithHost & AccountWithContributions & AccountWithParent {
  id: String!
  legacyId: Int!

  """
  The slug identifying the account (ie: babel)
  """
  slug: String!
  type: AccountType!

  """
  Public name
  """
  name: String

  """
  Private, legal name. Used for expense receipts, taxes, etc. Scope: "account".
  """
  legalName: String
  description: String
  longDescription: String
  tags: [String]
  website: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  twitterHandle: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  githubHandle: String @deprecated(reason: "2022-06-03: Please use repositoryUrl")
  repositoryUrl: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  socialLinks: [SocialLink!]!

  """
  The currency of the account
  """
  currency: Currency!
  expensePolicy: String @deprecated(reason: "2024-11-04: Please use policies.EXPENSE_POLICIES")

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Date of unhosting by a given Fiscal Host.
  """
  unhostedAt(
    """
    The host account this collective was hosted by
    """
    host: AccountReferenceInput!
  ): DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean!

  """
  Whether this account is frozen
  """
  isFrozen: Boolean!

  """
  Returns whether it's active: can accept financial contributions and pay expenses.
  """
  isActive: Boolean!

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean!

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!
  parentAccount: Account @deprecated(reason: "2022-12-16: use parent on AccountWithParent instead")

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int! = 100
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
    includeInherited: Boolean = true
  ): MemberCollection!

  """
  [AUTHENTICATED] Returns the pending invitations
  """
  memberInvitations(
    """
    A reference to an account (usually Individual). Will return invitations sent to the account to join as a member
    """
    memberAccount: AccountReferenceInput

    """
    A reference to an account (usually Collective, Fund or Organization). Will return invitations sent to join this account as a member.
    """
    account: AccountReferenceInput

    """
    An array of Member roles to filter for
    """
    role: [MemberRole]
  ): [MemberInvitation]

  """
  The legal documents associated with this account
  """
  legalDocuments(
    """
    Filter by type
    """
    type: [LegalDocumentType]
  ): [LegalDocument]
  memberOf(
    limit: Int! = 150
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }

    """
    Order the query by requested role order
    """
    orderByRoles: Boolean
  ): MemberOfCollection!

  """
  Returns the emails of the account. Individuals only have one, but organizations can have multiple emails.
  """
  emails: [EmailAddress!]
  transactions(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The transaction type (DEBIT or CREDIT)
    """
    type: TransactionType

    """
    The payment method types. Can include `null` for transactions without a payment method
    """
    paymentMethodType: [PaymentMethodType]

    """
    The payment method services.
    """
    paymentMethodService: [PaymentMethodService]

    """
    Reference of the account(s) assigned to the main side of the transaction you want to EXCLUDE from the results
    """
    excludeAccount: [AccountReferenceInput]

    """
    Reference of the account assigned to the other side of the transaction (CREDIT -> sender, DEBIT -> recipient). Avoid, favor account instead.
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the host accounting the transaction
    """
    host: AccountReferenceInput

    """
    NOT IMPLEMENTED. Only return transactions that match these tags.
    """
    tags: [String] @deprecated(reason: "2020-08-09: Was never implemented.")

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return transactions where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transactions that were created before this date
    """
    dateTo: DateTime

    """
    Only return transactions that were cleared after this date
    """
    clearedFrom: DateTime

    """
    Only return transactions that were cleared before this date
    """
    clearedTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    If true, return transactions with debt attached, if false transactions without debt attached.
    """
    hasDebt: Boolean

    """
    Only return transactions with an Expense attached
    """
    hasExpense: Boolean

    """
    Only return transactions with this Expense attached
    """
    expense: ExpenseReferenceInput

    """
    Only return transactions that have an Expense of one of these expense types attached
    """
    expenseType: [ExpenseType]

    """
    Only return transactions with an Order attached
    """
    hasOrder: Boolean

    """
    Only return transactions for this order.
    """
    order: OrderReferenceInput

    """
    Used when filtering with the `host` argument to determine whether to include transactions on the fiscal host account (and children)
    """
    includeHost: Boolean! = true

    """
    Whether to include regular transactions from the account (turn false if you only want Incognito or Gift Card transactions)
    """
    includeRegularTransactions: Boolean! = true

    """
    If the account is a user and this field is true, contributions from the incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false

    """
    Whether to include transactions from children (Events and Projects)
    """
    includeChildrenTransactions: Boolean! = false

    """
    Whether to include transactions from Gift Cards issued by the account.
    """
    includeGiftCardTransactions: Boolean! = false

    """
    Whether to include debt transactions
    """
    includeDebts: Boolean! = false

    """
    To filter by transaction kind
    """
    kind: [TransactionKind]

    """
    The transactions group to filter by
    """
    group: [String]
    virtualCard: [VirtualCardReferenceInput]

    """
    Only return transactions that are refunds (or not refunds if false)
    """
    isRefund: Boolean

    """
    Only return transactions that are associated with these external merchant IDs
    """
    merchantId: [String]

    """
    Only return transactions that are associated with these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payment method
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): TransactionCollection!
  orders(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Include orders from children events/projects
    """
    includeChildrenAccounts: Boolean! = false

    """
    Only return orders that were paused by these roles. status must be set to PAUSED.
    """
    pausedBy: [OrderPausedBy]

    """
    Only return orders that were paid with this payment method. Must be an admin of the account owning the payment method.
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return orders that match these payment method services
    """
    paymentMethodService: [PaymentMethodService]

    """
    Only return orders that match these payment method types
    """
    paymentMethodType: [PaymentMethodType]

    """
    Whether to include incognito orders. Must be admin or root. Only with filter null or OUTGOING.
    """
    includeIncognito: Boolean = false

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their frequency (ONETIME, MONTHLY or YEARLY)
    """
    frequency: [ContributionFrequency]

    """
    Use this field to filter orders on their statuses
    """
    status: [OrderStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: DateTime

    """
    Only return orders that were created before this date
    """
    dateTo: DateTime

    """
    Only return pending orders that were expected after this date
    """
    expectedDateFrom: DateTime

    """
    Only return pending orders that were expected before this date
    """
    expectedDateTo: DateTime

    """
    Return orders that were charged after this date
    """
    chargedDateFrom: DateTime

    """
    Return orders that were charged before this date
    """
    chargedDateTo: DateTime

    """
    The term to search
    """
    searchTerm: String
    tierSlug: String @deprecated(reason: "2022-02-25: Should be replaced by a tier reference.")
    tier: [TierReferenceInput]

    """
    Only returns orders that have a subscription (monthly/yearly). Don't use together with frequency.
    """
    onlySubscriptions: Boolean

    """
    Same as onlySubscriptions, but returns only orders with active subscriptions
    """
    onlyActiveSubscriptions: Boolean
    expectedFundsFilter: ExpectedFundsFilter

    """
    Return only orders made from/to that opposite account (only works when orders are already filtered with a main account)
    """
    oppositeAccount: AccountReferenceInput

    """
    Return only orders made from/to these hosted accounts
    """
    hostedAccounts: [AccountReferenceInput]
  ): OrderCollection!
  expenses(
    direction: ExpenseDirection

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Reference of an account that is the payee of an expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of an account that is the payer of an expense
    """
    account: AccountReferenceInput

    """
    An alternative to filter by accounts, both cannot be used together
    """
    accounts: [AccountReferenceInput]

    """
    Return expenses only for this host
    """
    host: AccountReferenceInput

    """
    Return expenses only created by this INDIVIDUAL account
    """
    createdByAccount: AccountReferenceInput

    """
    Use this field to filter expenses on their statuses
    """
    status: [ExpenseStatusFilter]

    """
    Use this field to filter expenses on their type (RECEIPT/INVOICE)
    """
    type: ExpenseType
    types: [ExpenseType]

    """
    Only expenses that match these tags
    """
    tags: [String] @deprecated(reason: "2020-06-30: Please use tag (singular)")

    """
    Only expenses that match these tags
    """
    tag: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that use the given type as payout method
    """
    payoutMethodType: PayoutMethodType

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime

    """
    Only return expenses that were created after this date
    """
    dateTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    Whether to include expenses from children of the account (Events and Projects)
    """
    includeChildrenExpenses: Boolean! = false

    """
    Only return expenses that contains this custom data. Requires being an admin of the collective, payee or host.
    """
    customData: JSON

    """
    Filter expenses of type charges based on presence of receipts
    """
    chargeHasReceipts: Boolean

    """
    Filter expenses of type charges using these virtual cards
    """
    virtualCards: [VirtualCardReferenceInput]

    """
    Filter expenses by the last user-role who replied to them
    """
    lastCommentBy: [LastCommentBy]

    """
    Only return expenses that match these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): ExpenseCollection!
  settings: JSON!
  conversations(
    limit: Int! = 15
    offset: Int! = 0

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection!

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int! = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int! = 30): [TagStat]

  """
  The list of expense types supported by this account
  """
  supportedExpenseTypes: [ExpenseType!]!
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid. In most cases, admin only and scope: "expenses".
  """
  payoutMethods(
    """
    Whether to include archived payout methods
    """
    includeArchived: Boolean = false
  ): [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders. Admin or Host only. Scope: "orders".
  """
  paymentMethods(
    type: [PaymentMethodType]
    enumType: [PaymentMethodType] @deprecated(reason: "2021-08-20: use type instead from now")
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]

  """
  The list of payment methods for this account that are pending a client confirmation (3D Secure / SCA)
  """
  paymentMethodsWithPendingConfirmation: [PaymentMethod]

  """
  The list of connected accounts (Stripe, PayPal, etc ...). Admin only. Scope: "connectedAccounts".
  """
  connectedAccounts: [ConnectedAccount]

  """
  The list of applications created by this account. Admin only. Scope: "applications".
  """
  oAuthApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): OAuthApplicationCollection

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats

  """
  Whether this account can have changelog updates
  """
  canHaveChangelogUpdates: Boolean!

  """
  Updates published by the account. To see unpublished updates, you need to be an admin and have the scope "updates".
  """
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Only return published updates.
    """
    onlyPublishedUpdates: Boolean = false
    isDraft: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: UpdateChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!

  """
  Virtual Cards attached to the account. Admin only. Scope: "virtualCards".
  """
  virtualCards(
    limit: Int! = 100
    offset: Int! = 0
    state: String = null @deprecated(reason: "2023-11-06: Please use status.")
    status: [VirtualCardStatus]
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: DateTime = null
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): VirtualCardCollection

  """
  Virtual Cards Merchants used by the account. Admin only. Scope: "virtualCards".
  """
  virtualCardMerchants(limit: Int! = 100, offset: Int! = 0): AccountCollection
  childrenAccounts(
    limit: Int! = 100
    offset: Int! = 0
    isActive: Boolean
    accountType: [AccountType]
    searchTerm: String

    """
    Order of the results. Defaults to createdAt DESC.
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }
  ): AccountCollection!

  """
  Policies for the account. To see non-public policies you need to be admin and have the scope: "account".
  """
  policies: Policies!

  """
  List of activities that the logged-in user is subscribed for this collective
  """
  activitySubscriptions(channel: ActivityChannel): [ActivitySubscription]

  """
  Logged-in user permissions on an account
  """
  permissions: AccountPermissions!

  """
  Host application requests
  """
  hostApplicationRequests(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Filter applications by status
    """
    status: HostApplicationStatus
  ): HostApplicationCollection!
  feed(
    """
    Only returns activities before this date
    """
    dateTo: DateTime

    """
    Number of activities to retrieve
    """
    limit: Int

    """
    The classes of activity types to filter for
    """
    classes: [ActivityClassType]
  ): [Activity]

  """
  If created by duplication, the account from which this one was duplicated
  """
  duplicatedFromAccount: Account

  """
  If this account was duplicated, the accounts that were created from it
  """
  duplicatedAccounts(limit: Int! = 100, offset: Int! = 0): AccountCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  transactionGroups(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter transaction groups by the type of the primary transaction
    """
    type: TransactionType

    """
    Filter transaction groups by the kind of the primary transaction
    """
    kind: TransactionKind

    """
    Only return transaction groups that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transaction groups that were created before this date
    """
    dateTo: DateTime
  ): TransactionGroupCollection!

  """
  EXPERIMENTAL (this may change or be removed)
  """
  transactionReports(timeUnit: TimeUnit = MONTH, dateFrom: DateTime, dateTo: DateTime): TransactionReports
  webhooks(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    account: AccountReferenceInput!
  ): WebhookCollection!

  """
  Returns the Fiscal Host
  """
  host: Host

  """
  Describe how the host charges the collective
  """
  hostFeesStructure: HostFeeStructure

  """
  Fees percentage that the host takes for this collective
  """
  hostFeePercent(paymentMethodService: PaymentMethodService, paymentMethodType: PaymentMethodType): Float

  """
  Returns the Fiscal Host application
  """
  hostApplication: HostApplication

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Float!

  """
  Date of approval by the Fiscal Host.
  """
  approvedAt: DateTime

  """
  Date when the collective was last unfrozen by current Fiscal Host
  """
  unfrozenAt: DateTime

  """
  Returns whether it's approved by the Fiscal Host
  """
  isApproved: Boolean!

  """
  Returns agreements this account has with its host, or null if not enough permissions.
  """
  hostAgreements(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 30

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): AgreementCollection
  summary(
    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime
  ): HostedAccountSummary

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers(
    """
    The number of results to fetch
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  activeContributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    dateFrom: DateTime
    dateTo: DateTime
    includeActiveRecurringContributions: Boolean
  ): AccountCollection!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!
  contributionPolicy: String

  """
  Returns true if the remote user can start the process to resume contributions for account
  """
  canStartResumeContributionsProcess: Boolean!

  """
  Returns true if the account has started the process to resume contributions
  """
  hasResumeContributionsProcessStarted: Boolean!

  """
  The Account parenting this account
  """
  parent: Account

  """
  The Event start date and time
  """
  startsAt: DateTime

  """
  The Event end date and time
  """
  endsAt: DateTime

  """
  Timezone of the Event (TZ database format, e.g. UTC or Europe/Berlin)
  """
  timezone: String
}

"""
An account that has a parent account
"""
interface AccountWithParent {
  """
  The Account parenting this account
  """
  parent: Account
}

"""
Exposes information about an uploaded file (image, pdf, etc.)
"""
interface FileInfo {
  """
  Unique identifier for the file
  """
  id: String!

  """
  URL to access the file
  """
  url: URL!

  """
  Name of the file
  """
  name: String

  """
  Mime type of the file
  """
  type: String!

  """
  Size of the file in bytes
  """
  size: Int
}

"""
Exposes information about an uploaded image file
"""
type ImageFileInfo implements FileInfo {
  """
  Unique identifier for the file
  """
  id: String!

  """
  URL to access the file
  """
  url: URL!

  """
  Name of the file
  """
  name: String

  """
  Mime type of the file
  """
  type: String!

  """
  Size of the file in bytes
  """
  size: Int

  """
  If the file is an image, this will be the width of the image in pixels
  """
  width: Int

  """
  If the file is an image, this will be the height of the image in pixels
  """
  height: Int

  """
  Blurhash of the image
  """
  blurHash: String
}

type GenericFileInfo implements FileInfo {
  """
  Unique identifier for the file
  """
  id: String!

  """
  URL to access the file
  """
  url: URL!

  """
  Name of the file
  """
  name: String

  """
  Mime type of the file
  """
  type: String!

  """
  Size of the file in bytes
  """
  size: Int
}

"""
This represents an Individual account
"""
type Individual implements Account {
  id: String!
  legacyId: Int!

  """
  The slug identifying the account (ie: babel)
  """
  slug: String!
  type: AccountType!

  """
  Public name
  """
  name: String

  """
  Private, legal name. Used for expense receipts, taxes, etc. Scope: "account".
  """
  legalName: String
  description: String
  longDescription: String
  tags: [String]
  website: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  twitterHandle: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  githubHandle: String @deprecated(reason: "2022-06-03: Please use repositoryUrl")
  repositoryUrl: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  socialLinks: [SocialLink!]!

  """
  The currency of the account
  """
  currency: Currency!
  expensePolicy: String @deprecated(reason: "2024-11-04: Please use policies.EXPENSE_POLICIES")

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Date of unhosting by a given Fiscal Host.
  """
  unhostedAt(
    """
    The host account this collective was hosted by
    """
    host: AccountReferenceInput!
  ): DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean!

  """
  Whether this account is frozen
  """
  isFrozen: Boolean!

  """
  Returns whether the account accepts financial contributions.
  """
  isActive: Boolean

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean!

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!
  parentAccount: Account @deprecated(reason: "2022-12-16: use parent on AccountWithParent instead")

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int! = 100
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
    includeInherited: Boolean = true
  ): MemberCollection!

  """
  [AUTHENTICATED] Returns the pending invitations
  """
  memberInvitations(
    """
    A reference to an account (usually Individual). Will return invitations sent to the account to join as a member
    """
    memberAccount: AccountReferenceInput

    """
    A reference to an account (usually Collective, Fund or Organization). Will return invitations sent to join this account as a member.
    """
    account: AccountReferenceInput

    """
    An array of Member roles to filter for
    """
    role: [MemberRole]
  ): [MemberInvitation]

  """
  The legal documents associated with this account
  """
  legalDocuments(
    """
    Filter by type
    """
    type: [LegalDocumentType]
  ): [LegalDocument]
  memberOf(
    limit: Int! = 150
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }

    """
    Order the query by requested role order
    """
    orderByRoles: Boolean
  ): MemberOfCollection!

  """
  Returns the emails of the account. Individuals only have one, but organizations can have multiple emails.
  """
  emails: [EmailAddress!]
  transactions(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The transaction type (DEBIT or CREDIT)
    """
    type: TransactionType

    """
    The payment method types. Can include `null` for transactions without a payment method
    """
    paymentMethodType: [PaymentMethodType]

    """
    The payment method services.
    """
    paymentMethodService: [PaymentMethodService]

    """
    Reference of the account(s) assigned to the main side of the transaction you want to EXCLUDE from the results
    """
    excludeAccount: [AccountReferenceInput]

    """
    Reference of the account assigned to the other side of the transaction (CREDIT -> sender, DEBIT -> recipient). Avoid, favor account instead.
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the host accounting the transaction
    """
    host: AccountReferenceInput

    """
    NOT IMPLEMENTED. Only return transactions that match these tags.
    """
    tags: [String] @deprecated(reason: "2020-08-09: Was never implemented.")

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return transactions where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transactions that were created before this date
    """
    dateTo: DateTime

    """
    Only return transactions that were cleared after this date
    """
    clearedFrom: DateTime

    """
    Only return transactions that were cleared before this date
    """
    clearedTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    If true, return transactions with debt attached, if false transactions without debt attached.
    """
    hasDebt: Boolean

    """
    Only return transactions with an Expense attached
    """
    hasExpense: Boolean

    """
    Only return transactions with this Expense attached
    """
    expense: ExpenseReferenceInput

    """
    Only return transactions that have an Expense of one of these expense types attached
    """
    expenseType: [ExpenseType]

    """
    Only return transactions with an Order attached
    """
    hasOrder: Boolean

    """
    Only return transactions for this order.
    """
    order: OrderReferenceInput

    """
    Used when filtering with the `host` argument to determine whether to include transactions on the fiscal host account (and children)
    """
    includeHost: Boolean! = true

    """
    Whether to include regular transactions from the account (turn false if you only want Incognito or Gift Card transactions)
    """
    includeRegularTransactions: Boolean! = true

    """
    If the account is a user and this field is true, contributions from the incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false

    """
    Whether to include transactions from children (Events and Projects)
    """
    includeChildrenTransactions: Boolean! = false

    """
    Whether to include transactions from Gift Cards issued by the account.
    """
    includeGiftCardTransactions: Boolean! = false

    """
    Whether to include debt transactions
    """
    includeDebts: Boolean! = false

    """
    To filter by transaction kind
    """
    kind: [TransactionKind]

    """
    The transactions group to filter by
    """
    group: [String]
    virtualCard: [VirtualCardReferenceInput]

    """
    Only return transactions that are refunds (or not refunds if false)
    """
    isRefund: Boolean

    """
    Only return transactions that are associated with these external merchant IDs
    """
    merchantId: [String]

    """
    Only return transactions that are associated with these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payment method
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): TransactionCollection!
  orders(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Include orders from children events/projects
    """
    includeChildrenAccounts: Boolean! = false

    """
    Only return orders that were paused by these roles. status must be set to PAUSED.
    """
    pausedBy: [OrderPausedBy]

    """
    Only return orders that were paid with this payment method. Must be an admin of the account owning the payment method.
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return orders that match these payment method services
    """
    paymentMethodService: [PaymentMethodService]

    """
    Only return orders that match these payment method types
    """
    paymentMethodType: [PaymentMethodType]

    """
    Whether to include incognito orders. Must be admin or root. Only with filter null or OUTGOING.
    """
    includeIncognito: Boolean = false

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their frequency (ONETIME, MONTHLY or YEARLY)
    """
    frequency: [ContributionFrequency]

    """
    Use this field to filter orders on their statuses
    """
    status: [OrderStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: DateTime

    """
    Only return orders that were created before this date
    """
    dateTo: DateTime

    """
    Only return pending orders that were expected after this date
    """
    expectedDateFrom: DateTime

    """
    Only return pending orders that were expected before this date
    """
    expectedDateTo: DateTime

    """
    Return orders that were charged after this date
    """
    chargedDateFrom: DateTime

    """
    Return orders that were charged before this date
    """
    chargedDateTo: DateTime

    """
    The term to search
    """
    searchTerm: String
    tierSlug: String @deprecated(reason: "2022-02-25: Should be replaced by a tier reference.")
    tier: [TierReferenceInput]

    """
    Only returns orders that have a subscription (monthly/yearly). Don't use together with frequency.
    """
    onlySubscriptions: Boolean

    """
    Same as onlySubscriptions, but returns only orders with active subscriptions
    """
    onlyActiveSubscriptions: Boolean
    expectedFundsFilter: ExpectedFundsFilter

    """
    Return only orders made from/to that opposite account (only works when orders are already filtered with a main account)
    """
    oppositeAccount: AccountReferenceInput

    """
    Return only orders made from/to these hosted accounts
    """
    hostedAccounts: [AccountReferenceInput]
  ): OrderCollection!
  expenses(
    direction: ExpenseDirection

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Reference of an account that is the payee of an expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of an account that is the payer of an expense
    """
    account: AccountReferenceInput

    """
    An alternative to filter by accounts, both cannot be used together
    """
    accounts: [AccountReferenceInput]

    """
    Return expenses only for this host
    """
    host: AccountReferenceInput

    """
    Return expenses only created by this INDIVIDUAL account
    """
    createdByAccount: AccountReferenceInput

    """
    Use this field to filter expenses on their statuses
    """
    status: [ExpenseStatusFilter]

    """
    Use this field to filter expenses on their type (RECEIPT/INVOICE)
    """
    type: ExpenseType
    types: [ExpenseType]

    """
    Only expenses that match these tags
    """
    tags: [String] @deprecated(reason: "2020-06-30: Please use tag (singular)")

    """
    Only expenses that match these tags
    """
    tag: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that use the given type as payout method
    """
    payoutMethodType: PayoutMethodType

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime

    """
    Only return expenses that were created after this date
    """
    dateTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    Whether to include expenses from children of the account (Events and Projects)
    """
    includeChildrenExpenses: Boolean! = false

    """
    Only return expenses that contains this custom data. Requires being an admin of the collective, payee or host.
    """
    customData: JSON

    """
    Filter expenses of type charges based on presence of receipts
    """
    chargeHasReceipts: Boolean

    """
    Filter expenses of type charges using these virtual cards
    """
    virtualCards: [VirtualCardReferenceInput]

    """
    Filter expenses by the last user-role who replied to them
    """
    lastCommentBy: [LastCommentBy]

    """
    Only return expenses that match these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): ExpenseCollection!
  settings: JSON!
  conversations(
    limit: Int! = 15
    offset: Int! = 0

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection!

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int! = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int! = 30): [TagStat]

  """
  The list of expense types supported by this account
  """
  supportedExpenseTypes: [ExpenseType!]!
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid. In most cases, admin only and scope: "expenses".
  """
  payoutMethods(
    """
    Whether to include archived payout methods
    """
    includeArchived: Boolean = false
  ): [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders. Admin or Host only. Scope: "orders".
  """
  paymentMethods(
    type: [PaymentMethodType]
    enumType: [PaymentMethodType] @deprecated(reason: "2021-08-20: use type instead from now")
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]

  """
  The list of payment methods for this account that are pending a client confirmation (3D Secure / SCA)
  """
  paymentMethodsWithPendingConfirmation: [PaymentMethod]

  """
  The list of connected accounts (Stripe, PayPal, etc ...). Admin only. Scope: "connectedAccounts".
  """
  connectedAccounts: [ConnectedAccount]

  """
  The list of applications created by this account. Admin only. Scope: "applications".
  """
  oAuthApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): OAuthApplicationCollection

  "\n          Address. This field is public for hosts, otherwise:\n            - Users can see their own address\n            - Hosts can see the address of users submitting expenses to their collectives\n        "
  location: Location
  categories: [String]!
  stats: AccountStats

  """
  Whether this account can have changelog updates
  """
  canHaveChangelogUpdates: Boolean!

  """
  Updates published by the account. To see unpublished updates, you need to be an admin and have the scope "updates".
  """
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Only return published updates.
    """
    onlyPublishedUpdates: Boolean = false
    isDraft: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: UpdateChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!

  """
  Virtual Cards attached to the account. Admin only. Scope: "virtualCards".
  """
  virtualCards(
    limit: Int! = 100
    offset: Int! = 0
    state: String = null @deprecated(reason: "2023-11-06: Please use status.")
    status: [VirtualCardStatus]
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: DateTime = null
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): VirtualCardCollection

  """
  Virtual Cards Merchants used by the account. Admin only. Scope: "virtualCards".
  """
  virtualCardMerchants(limit: Int! = 100, offset: Int! = 0): AccountCollection
  childrenAccounts(
    limit: Int! = 100
    offset: Int! = 0
    isActive: Boolean
    accountType: [AccountType]
    searchTerm: String

    """
    Order of the results. Defaults to createdAt DESC.
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }
  ): AccountCollection!

  """
  Policies for the account. To see non-public policies you need to be admin and have the scope: "account".
  """
  policies: Policies!

  """
  List of activities that the logged-in user is subscribed for this collective
  """
  activitySubscriptions(channel: ActivityChannel): [ActivitySubscription]

  """
  Logged-in user permissions on an account
  """
  permissions: AccountPermissions!

  """
  Host application requests
  """
  hostApplicationRequests(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Filter applications by status
    """
    status: HostApplicationStatus
  ): HostApplicationCollection!
  feed(
    """
    Only returns activities before this date
    """
    dateTo: DateTime

    """
    Number of activities to retrieve
    """
    limit: Int

    """
    The classes of activity types to filter for
    """
    classes: [ActivityClassType]
  ): [Activity]

  """
  If created by duplication, the account from which this one was duplicated
  """
  duplicatedFromAccount: Account

  """
  If this account was duplicated, the accounts that were created from it
  """
  duplicatedAccounts(limit: Int! = 100, offset: Int! = 0): AccountCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  transactionGroups(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter transaction groups by the type of the primary transaction
    """
    type: TransactionType

    """
    Filter transaction groups by the kind of the primary transaction
    """
    kind: TransactionKind

    """
    Only return transaction groups that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transaction groups that were created before this date
    """
    dateTo: DateTime
  ): TransactionGroupCollection!

  """
  EXPERIMENTAL (this may change or be removed)
  """
  transactionReports(timeUnit: TimeUnit = MONTH, dateFrom: DateTime, dateTo: DateTime): TransactionReports
  webhooks(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    account: AccountReferenceInput!
  ): WebhookCollection!

  """
  Email for the account. For authenticated user: scope: "email".
  """
  email: String
  isGuest: Boolean!
  isFollowingConversation(id: String!): Boolean!
  hasTwoFactorAuth: Boolean
  newsletterOptIn: Boolean

  """
  If the individual is a host account, this will return the matching Host object
  """
  host: Host
  hasSeenLatestChangelogEntry: Boolean
  oAuthAuthorizations(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): OAuthAuthorizationCollection

  """
  The list of personal tokens created by this account. Admin only. Scope: "applications".
  """
  personalTokens(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): PersonalTokenCollection

  """
  Has the account a password set? For authenticated user: scope: "account".
  """
  hasPassword: Boolean

  """
  User two factor methods
  """
  twoFactorMethods: [UserTwoFactorMethod]
  contributorProfiles(forAccount: AccountReferenceInput!): [ContributorProfile]!
}

"""
A collection of "OAuth Authorizations"
"""
type OAuthAuthorizationCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [OAuthAuthorization]
}

"""
A collection of "PersonalToken"
"""
type PersonalTokenCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [PersonalToken]
}

"""
A personal token
"""
type PersonalToken {
  """
  Unique identifier for this personal token
  """
  id: String!

  """
  A friendly name for users to easily find their personal tokens
  """
  name: String

  """
  The personal token
  """
  token: String

  """
  The date on which the personal token expires
  """
  expiresAt: DateTime

  """
  The scopes of the personal token
  """
  scope: [OAuthScope]

  """
  The account that owns this personal token
  """
  account: Individual!

  """
  The date on which the personal token was created
  """
  createdAt: DateTime

  """
  The date on which the personal token was last updated
  """
  updatedAt: DateTime

  """
  Whether this token is allowed to directly use operations that would normally require 2FA
  """
  preAuthorize2FA: Boolean!
}

"""
User two factor authentication method
"""
type UserTwoFactorMethod {
  id: String!
  method: TwoFactorMethod!
  name: String!
  createdAt: DateTime!
  description: String
  icon: String
}

"""
A two factor authentication method
"""
enum TwoFactorMethod {
  TOTP
  YUBIKEY_OTP
  WEBAUTHN
}

"""
This represents a profile that can be use to create a contribution
"""
type ContributorProfile {
  """
  The account that will be used to create the contribution
  """
  account: Account

  """
  The account that will receive the contribution
  """
  forAccount: Account

  """
  The total amount contributed to the host by this contributor
  """
  totalContributedToHost(
    """
    When true, the amount is converted to the currency of the collective
    """
    inCollectiveCurrency: Boolean = false

    """
    The date since when to calculate the total. Defaults to the start of the current year.
    """
    since: DateTime
  ): Amount
}

"""
This represents a Member relationship (ie: Organization backing a Collective)
"""
type Member {
  id: String!
  role: MemberRole!
  tier: Tier
  createdAt: DateTime!
  updatedAt: DateTime!
  since: DateTime!

  """
  Total amount donated
  """
  totalDonations: Amount!

  """
  Custom user message from member to the collective
  """
  publicMessage: String

  """
  Custom user description
  """
  description: String

  """
  If membership is inherited from parent collective
  """
  inherited: Boolean!

  """
  Whether the membership is active. Warning: this definition is subject to change.
  """
  isActive: Boolean!
  account: Account
}

"""
This represents a MemberOf relationship (ie: Collective backed by an Organization)
"""
type MemberOf {
  id: String!
  role: MemberRole!
  tier: Tier
  createdAt: DateTime!
  updatedAt: DateTime!
  since: DateTime!

  """
  Total amount donated
  """
  totalDonations: Amount!

  """
  Custom user message from member to the collective
  """
  publicMessage: String

  """
  Custom user description
  """
  description: String

  """
  If membership is inherited from parent collective
  """
  inherited: Boolean!

  """
  Whether the membership is active. Warning: this definition is subject to change.
  """
  isActive: Boolean!
  account: Account
}

"""
This represents an Organization account
"""
type Organization implements Account & AccountWithContributions {
  id: String!
  legacyId: Int!

  """
  The slug identifying the account (ie: babel)
  """
  slug: String!
  type: AccountType!

  """
  Public name
  """
  name: String

  """
  Private, legal name. Used for expense receipts, taxes, etc. Scope: "account".
  """
  legalName: String
  description: String
  longDescription: String
  tags: [String]
  website: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  twitterHandle: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  githubHandle: String @deprecated(reason: "2022-06-03: Please use repositoryUrl")
  repositoryUrl: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  socialLinks: [SocialLink!]!

  """
  The currency of the account
  """
  currency: Currency!
  expensePolicy: String @deprecated(reason: "2024-11-04: Please use policies.EXPENSE_POLICIES")

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Date of unhosting by a given Fiscal Host.
  """
  unhostedAt(
    """
    The host account this collective was hosted by
    """
    host: AccountReferenceInput!
  ): DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean!

  """
  Whether this account is frozen
  """
  isFrozen: Boolean!

  """
  Returns whether the account accepts financial contributions.
  """
  isActive: Boolean

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean!

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!
  parentAccount: Account @deprecated(reason: "2022-12-16: use parent on AccountWithParent instead")

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int! = 100
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
    includeInherited: Boolean = true
  ): MemberCollection!

  """
  [AUTHENTICATED] Returns the pending invitations
  """
  memberInvitations(
    """
    A reference to an account (usually Individual). Will return invitations sent to the account to join as a member
    """
    memberAccount: AccountReferenceInput

    """
    A reference to an account (usually Collective, Fund or Organization). Will return invitations sent to join this account as a member.
    """
    account: AccountReferenceInput

    """
    An array of Member roles to filter for
    """
    role: [MemberRole]
  ): [MemberInvitation]

  """
  The legal documents associated with this account
  """
  legalDocuments(
    """
    Filter by type
    """
    type: [LegalDocumentType]
  ): [LegalDocument]
  memberOf(
    limit: Int! = 150
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }

    """
    Order the query by requested role order
    """
    orderByRoles: Boolean
  ): MemberOfCollection!

  """
  Returns the emails of the account. Individuals only have one, but organizations can have multiple emails.
  """
  emails: [EmailAddress!]
  transactions(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The transaction type (DEBIT or CREDIT)
    """
    type: TransactionType

    """
    The payment method types. Can include `null` for transactions without a payment method
    """
    paymentMethodType: [PaymentMethodType]

    """
    The payment method services.
    """
    paymentMethodService: [PaymentMethodService]

    """
    Reference of the account(s) assigned to the main side of the transaction you want to EXCLUDE from the results
    """
    excludeAccount: [AccountReferenceInput]

    """
    Reference of the account assigned to the other side of the transaction (CREDIT -> sender, DEBIT -> recipient). Avoid, favor account instead.
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the host accounting the transaction
    """
    host: AccountReferenceInput

    """
    NOT IMPLEMENTED. Only return transactions that match these tags.
    """
    tags: [String] @deprecated(reason: "2020-08-09: Was never implemented.")

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return transactions where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transactions that were created before this date
    """
    dateTo: DateTime

    """
    Only return transactions that were cleared after this date
    """
    clearedFrom: DateTime

    """
    Only return transactions that were cleared before this date
    """
    clearedTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    If true, return transactions with debt attached, if false transactions without debt attached.
    """
    hasDebt: Boolean

    """
    Only return transactions with an Expense attached
    """
    hasExpense: Boolean

    """
    Only return transactions with this Expense attached
    """
    expense: ExpenseReferenceInput

    """
    Only return transactions that have an Expense of one of these expense types attached
    """
    expenseType: [ExpenseType]

    """
    Only return transactions with an Order attached
    """
    hasOrder: Boolean

    """
    Only return transactions for this order.
    """
    order: OrderReferenceInput

    """
    Used when filtering with the `host` argument to determine whether to include transactions on the fiscal host account (and children)
    """
    includeHost: Boolean! = true

    """
    Whether to include regular transactions from the account (turn false if you only want Incognito or Gift Card transactions)
    """
    includeRegularTransactions: Boolean! = true

    """
    If the account is a user and this field is true, contributions from the incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false

    """
    Whether to include transactions from children (Events and Projects)
    """
    includeChildrenTransactions: Boolean! = false

    """
    Whether to include transactions from Gift Cards issued by the account.
    """
    includeGiftCardTransactions: Boolean! = false

    """
    Whether to include debt transactions
    """
    includeDebts: Boolean! = false

    """
    To filter by transaction kind
    """
    kind: [TransactionKind]

    """
    The transactions group to filter by
    """
    group: [String]
    virtualCard: [VirtualCardReferenceInput]

    """
    Only return transactions that are refunds (or not refunds if false)
    """
    isRefund: Boolean

    """
    Only return transactions that are associated with these external merchant IDs
    """
    merchantId: [String]

    """
    Only return transactions that are associated with these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payment method
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): TransactionCollection!
  orders(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Include orders from children events/projects
    """
    includeChildrenAccounts: Boolean! = false

    """
    Only return orders that were paused by these roles. status must be set to PAUSED.
    """
    pausedBy: [OrderPausedBy]

    """
    Only return orders that were paid with this payment method. Must be an admin of the account owning the payment method.
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return orders that match these payment method services
    """
    paymentMethodService: [PaymentMethodService]

    """
    Only return orders that match these payment method types
    """
    paymentMethodType: [PaymentMethodType]

    """
    Whether to include incognito orders. Must be admin or root. Only with filter null or OUTGOING.
    """
    includeIncognito: Boolean = false

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their frequency (ONETIME, MONTHLY or YEARLY)
    """
    frequency: [ContributionFrequency]

    """
    Use this field to filter orders on their statuses
    """
    status: [OrderStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: DateTime

    """
    Only return orders that were created before this date
    """
    dateTo: DateTime

    """
    Only return pending orders that were expected after this date
    """
    expectedDateFrom: DateTime

    """
    Only return pending orders that were expected before this date
    """
    expectedDateTo: DateTime

    """
    Return orders that were charged after this date
    """
    chargedDateFrom: DateTime

    """
    Return orders that were charged before this date
    """
    chargedDateTo: DateTime

    """
    The term to search
    """
    searchTerm: String
    tierSlug: String @deprecated(reason: "2022-02-25: Should be replaced by a tier reference.")
    tier: [TierReferenceInput]

    """
    Only returns orders that have a subscription (monthly/yearly). Don't use together with frequency.
    """
    onlySubscriptions: Boolean

    """
    Same as onlySubscriptions, but returns only orders with active subscriptions
    """
    onlyActiveSubscriptions: Boolean
    expectedFundsFilter: ExpectedFundsFilter

    """
    Return only orders made from/to that opposite account (only works when orders are already filtered with a main account)
    """
    oppositeAccount: AccountReferenceInput

    """
    Return only orders made from/to these hosted accounts
    """
    hostedAccounts: [AccountReferenceInput]
  ): OrderCollection!
  expenses(
    direction: ExpenseDirection

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Reference of an account that is the payee of an expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of an account that is the payer of an expense
    """
    account: AccountReferenceInput

    """
    An alternative to filter by accounts, both cannot be used together
    """
    accounts: [AccountReferenceInput]

    """
    Return expenses only for this host
    """
    host: AccountReferenceInput

    """
    Return expenses only created by this INDIVIDUAL account
    """
    createdByAccount: AccountReferenceInput

    """
    Use this field to filter expenses on their statuses
    """
    status: [ExpenseStatusFilter]

    """
    Use this field to filter expenses on their type (RECEIPT/INVOICE)
    """
    type: ExpenseType
    types: [ExpenseType]

    """
    Only expenses that match these tags
    """
    tags: [String] @deprecated(reason: "2020-06-30: Please use tag (singular)")

    """
    Only expenses that match these tags
    """
    tag: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that use the given type as payout method
    """
    payoutMethodType: PayoutMethodType

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime

    """
    Only return expenses that were created after this date
    """
    dateTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    Whether to include expenses from children of the account (Events and Projects)
    """
    includeChildrenExpenses: Boolean! = false

    """
    Only return expenses that contains this custom data. Requires being an admin of the collective, payee or host.
    """
    customData: JSON

    """
    Filter expenses of type charges based on presence of receipts
    """
    chargeHasReceipts: Boolean

    """
    Filter expenses of type charges using these virtual cards
    """
    virtualCards: [VirtualCardReferenceInput]

    """
    Filter expenses by the last user-role who replied to them
    """
    lastCommentBy: [LastCommentBy]

    """
    Only return expenses that match these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): ExpenseCollection!
  settings: JSON!
  conversations(
    limit: Int! = 15
    offset: Int! = 0

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection!

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int! = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int! = 30): [TagStat]

  """
  The list of expense types supported by this account
  """
  supportedExpenseTypes: [ExpenseType!]!
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid. In most cases, admin only and scope: "expenses".
  """
  payoutMethods(
    """
    Whether to include archived payout methods
    """
    includeArchived: Boolean = false
  ): [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders. Admin or Host only. Scope: "orders".
  """
  paymentMethods(
    type: [PaymentMethodType]
    enumType: [PaymentMethodType] @deprecated(reason: "2021-08-20: use type instead from now")
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]

  """
  The list of payment methods for this account that are pending a client confirmation (3D Secure / SCA)
  """
  paymentMethodsWithPendingConfirmation: [PaymentMethod]

  """
  The list of connected accounts (Stripe, PayPal, etc ...). Admin only. Scope: "connectedAccounts".
  """
  connectedAccounts: [ConnectedAccount]

  """
  The list of applications created by this account. Admin only. Scope: "applications".
  """
  oAuthApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): OAuthApplicationCollection

  "\n          Address. This field is public for hosts, otherwise:\n            - Users can see the addresses of the collectives they're admin of; if they are not an admin they can only see the country that the org belong to.\n            - Hosts can see the address of organizations submitting expenses to their collectives.\n        "
  location: Location
  categories: [String]!
  stats: AccountStats

  """
  Whether this account can have changelog updates
  """
  canHaveChangelogUpdates: Boolean!

  """
  Updates published by the account. To see unpublished updates, you need to be an admin and have the scope "updates".
  """
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Only return published updates.
    """
    onlyPublishedUpdates: Boolean = false
    isDraft: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: UpdateChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!

  """
  Virtual Cards attached to the account. Admin only. Scope: "virtualCards".
  """
  virtualCards(
    limit: Int! = 100
    offset: Int! = 0
    state: String = null @deprecated(reason: "2023-11-06: Please use status.")
    status: [VirtualCardStatus]
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: DateTime = null
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): VirtualCardCollection

  """
  Virtual Cards Merchants used by the account. Admin only. Scope: "virtualCards".
  """
  virtualCardMerchants(limit: Int! = 100, offset: Int! = 0): AccountCollection
  childrenAccounts(
    limit: Int! = 100
    offset: Int! = 0
    isActive: Boolean
    accountType: [AccountType]
    searchTerm: String

    """
    Order of the results. Defaults to createdAt DESC.
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }
  ): AccountCollection!

  """
  Policies for the account. To see non-public policies you need to be admin and have the scope: "account".
  """
  policies: Policies!

  """
  List of activities that the logged-in user is subscribed for this collective
  """
  activitySubscriptions(channel: ActivityChannel): [ActivitySubscription]

  """
  Logged-in user permissions on an account
  """
  permissions: AccountPermissions!

  """
  Host application requests
  """
  hostApplicationRequests(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Filter applications by status
    """
    status: HostApplicationStatus
  ): HostApplicationCollection!
  feed(
    """
    Only returns activities before this date
    """
    dateTo: DateTime

    """
    Number of activities to retrieve
    """
    limit: Int

    """
    The classes of activity types to filter for
    """
    classes: [ActivityClassType]
  ): [Activity]

  """
  If created by duplication, the account from which this one was duplicated
  """
  duplicatedFromAccount: Account

  """
  If this account was duplicated, the accounts that were created from it
  """
  duplicatedAccounts(limit: Int! = 100, offset: Int! = 0): AccountCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  transactionGroups(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter transaction groups by the type of the primary transaction
    """
    type: TransactionType

    """
    Filter transaction groups by the kind of the primary transaction
    """
    kind: TransactionKind

    """
    Only return transaction groups that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transaction groups that were created before this date
    """
    dateTo: DateTime
  ): TransactionGroupCollection!

  """
  EXPERIMENTAL (this may change or be removed)
  """
  transactionReports(timeUnit: TimeUnit = MONTH, dateFrom: DateTime, dateTo: DateTime): TransactionReports
  webhooks(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    account: AccountReferenceInput!
  ): WebhookCollection!

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers(
    """
    The number of results to fetch
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  activeContributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    dateFrom: DateTime
    dateTo: DateTime
    includeActiveRecurringContributions: Boolean
  ): AccountCollection!

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Float!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!
  contributionPolicy: String

  """
  Returns true if the remote user can start the process to resume contributions for account
  """
  canStartResumeContributionsProcess: Boolean!

  """
  Returns true if the account has started the process to resume contributions
  """
  hasResumeContributionsProcessStarted: Boolean!
  email: String @deprecated(reason: "2022-07-18: This field is deprecated and will return null")

  """
  If the organization is a host account, this will return the matching Host object
  """
  host: Host
}

"""
TransferWise related properties for bank transfer.
"""
type TransferWise {
  """
  Unique identifier for this Wise object
  """
  id: String!
  requiredFields(
    """
    The 3 letter code identifying the currency you want to receive (ie: USD, EUR, BRL, GBP)
    """
    currency: String!

    """
    The account JSON object being validated
    """
    accountDetails: JSON
  ): [TransferWiseRequiredField]
  availableCurrencies(
    """
    Ignores blocked currencies, used to generate the bank information form for manual payments
    """
    ignoreBlockedCurrencies: Boolean
  ): [JSONObject]

  """
  Transferwise balances. Returns null if Transferwise account is not connected.
  """
  balances: [Amount]
  amountBatched: Amount
}

"""
This represents a Vendor account
"""
type Vendor implements Account & AccountWithContributions {
  id: String!
  legacyId: Int!

  """
  The slug identifying the account (ie: babel)
  """
  slug: String!
  type: AccountType!

  """
  Public name
  """
  name: String

  """
  Private, legal name. Used for expense receipts, taxes, etc. Scope: "account".
  """
  legalName: String
  description: String
  longDescription: String
  tags: [String]
  website: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  twitterHandle: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  githubHandle: String @deprecated(reason: "2022-06-03: Please use repositoryUrl")
  repositoryUrl: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  socialLinks: [SocialLink!]!

  """
  The currency of the account
  """
  currency: Currency!
  expensePolicy: String @deprecated(reason: "2024-11-04: Please use policies.EXPENSE_POLICIES")

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Date of unhosting by a given Fiscal Host.
  """
  unhostedAt(
    """
    The host account this collective was hosted by
    """
    host: AccountReferenceInput!
  ): DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean!

  """
  Whether this account is frozen
  """
  isFrozen: Boolean!

  """
  Returns whether the account accepts financial contributions.
  """
  isActive: Boolean

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean!

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!
  parentAccount: Account @deprecated(reason: "2022-12-16: use parent on AccountWithParent instead")

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int! = 100
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
    includeInherited: Boolean = true
  ): MemberCollection!

  """
  [AUTHENTICATED] Returns the pending invitations
  """
  memberInvitations(
    """
    A reference to an account (usually Individual). Will return invitations sent to the account to join as a member
    """
    memberAccount: AccountReferenceInput

    """
    A reference to an account (usually Collective, Fund or Organization). Will return invitations sent to join this account as a member.
    """
    account: AccountReferenceInput

    """
    An array of Member roles to filter for
    """
    role: [MemberRole]
  ): [MemberInvitation]

  """
  The legal documents associated with this account
  """
  legalDocuments(
    """
    Filter by type
    """
    type: [LegalDocumentType]
  ): [LegalDocument]
  memberOf(
    limit: Int! = 150
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }

    """
    Order the query by requested role order
    """
    orderByRoles: Boolean
  ): MemberOfCollection!

  """
  Returns the emails of the account. Individuals only have one, but organizations can have multiple emails.
  """
  emails: [EmailAddress!]
  transactions(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The transaction type (DEBIT or CREDIT)
    """
    type: TransactionType

    """
    The payment method types. Can include `null` for transactions without a payment method
    """
    paymentMethodType: [PaymentMethodType]

    """
    The payment method services.
    """
    paymentMethodService: [PaymentMethodService]

    """
    Reference of the account(s) assigned to the main side of the transaction you want to EXCLUDE from the results
    """
    excludeAccount: [AccountReferenceInput]

    """
    Reference of the account assigned to the other side of the transaction (CREDIT -> sender, DEBIT -> recipient). Avoid, favor account instead.
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the host accounting the transaction
    """
    host: AccountReferenceInput

    """
    NOT IMPLEMENTED. Only return transactions that match these tags.
    """
    tags: [String] @deprecated(reason: "2020-08-09: Was never implemented.")

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return transactions where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transactions that were created before this date
    """
    dateTo: DateTime

    """
    Only return transactions that were cleared after this date
    """
    clearedFrom: DateTime

    """
    Only return transactions that were cleared before this date
    """
    clearedTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    If true, return transactions with debt attached, if false transactions without debt attached.
    """
    hasDebt: Boolean

    """
    Only return transactions with an Expense attached
    """
    hasExpense: Boolean

    """
    Only return transactions with this Expense attached
    """
    expense: ExpenseReferenceInput

    """
    Only return transactions that have an Expense of one of these expense types attached
    """
    expenseType: [ExpenseType]

    """
    Only return transactions with an Order attached
    """
    hasOrder: Boolean

    """
    Only return transactions for this order.
    """
    order: OrderReferenceInput

    """
    Used when filtering with the `host` argument to determine whether to include transactions on the fiscal host account (and children)
    """
    includeHost: Boolean! = true

    """
    Whether to include regular transactions from the account (turn false if you only want Incognito or Gift Card transactions)
    """
    includeRegularTransactions: Boolean! = true

    """
    If the account is a user and this field is true, contributions from the incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false

    """
    Whether to include transactions from children (Events and Projects)
    """
    includeChildrenTransactions: Boolean! = false

    """
    Whether to include transactions from Gift Cards issued by the account.
    """
    includeGiftCardTransactions: Boolean! = false

    """
    Whether to include debt transactions
    """
    includeDebts: Boolean! = false

    """
    To filter by transaction kind
    """
    kind: [TransactionKind]

    """
    The transactions group to filter by
    """
    group: [String]
    virtualCard: [VirtualCardReferenceInput]

    """
    Only return transactions that are refunds (or not refunds if false)
    """
    isRefund: Boolean

    """
    Only return transactions that are associated with these external merchant IDs
    """
    merchantId: [String]

    """
    Only return transactions that are associated with these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payment method
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): TransactionCollection!
  orders(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Include orders from children events/projects
    """
    includeChildrenAccounts: Boolean! = false

    """
    Only return orders that were paused by these roles. status must be set to PAUSED.
    """
    pausedBy: [OrderPausedBy]

    """
    Only return orders that were paid with this payment method. Must be an admin of the account owning the payment method.
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return orders that match these payment method services
    """
    paymentMethodService: [PaymentMethodService]

    """
    Only return orders that match these payment method types
    """
    paymentMethodType: [PaymentMethodType]

    """
    Whether to include incognito orders. Must be admin or root. Only with filter null or OUTGOING.
    """
    includeIncognito: Boolean = false

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their frequency (ONETIME, MONTHLY or YEARLY)
    """
    frequency: [ContributionFrequency]

    """
    Use this field to filter orders on their statuses
    """
    status: [OrderStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: DateTime

    """
    Only return orders that were created before this date
    """
    dateTo: DateTime

    """
    Only return pending orders that were expected after this date
    """
    expectedDateFrom: DateTime

    """
    Only return pending orders that were expected before this date
    """
    expectedDateTo: DateTime

    """
    Return orders that were charged after this date
    """
    chargedDateFrom: DateTime

    """
    Return orders that were charged before this date
    """
    chargedDateTo: DateTime

    """
    The term to search
    """
    searchTerm: String
    tierSlug: String @deprecated(reason: "2022-02-25: Should be replaced by a tier reference.")
    tier: [TierReferenceInput]

    """
    Only returns orders that have a subscription (monthly/yearly). Don't use together with frequency.
    """
    onlySubscriptions: Boolean

    """
    Same as onlySubscriptions, but returns only orders with active subscriptions
    """
    onlyActiveSubscriptions: Boolean
    expectedFundsFilter: ExpectedFundsFilter

    """
    Return only orders made from/to that opposite account (only works when orders are already filtered with a main account)
    """
    oppositeAccount: AccountReferenceInput

    """
    Return only orders made from/to these hosted accounts
    """
    hostedAccounts: [AccountReferenceInput]
  ): OrderCollection!
  expenses(
    direction: ExpenseDirection

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Reference of an account that is the payee of an expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of an account that is the payer of an expense
    """
    account: AccountReferenceInput

    """
    An alternative to filter by accounts, both cannot be used together
    """
    accounts: [AccountReferenceInput]

    """
    Return expenses only for this host
    """
    host: AccountReferenceInput

    """
    Return expenses only created by this INDIVIDUAL account
    """
    createdByAccount: AccountReferenceInput

    """
    Use this field to filter expenses on their statuses
    """
    status: [ExpenseStatusFilter]

    """
    Use this field to filter expenses on their type (RECEIPT/INVOICE)
    """
    type: ExpenseType
    types: [ExpenseType]

    """
    Only expenses that match these tags
    """
    tags: [String] @deprecated(reason: "2020-06-30: Please use tag (singular)")

    """
    Only expenses that match these tags
    """
    tag: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that use the given type as payout method
    """
    payoutMethodType: PayoutMethodType

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime

    """
    Only return expenses that were created after this date
    """
    dateTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    Whether to include expenses from children of the account (Events and Projects)
    """
    includeChildrenExpenses: Boolean! = false

    """
    Only return expenses that contains this custom data. Requires being an admin of the collective, payee or host.
    """
    customData: JSON

    """
    Filter expenses of type charges based on presence of receipts
    """
    chargeHasReceipts: Boolean

    """
    Filter expenses of type charges using these virtual cards
    """
    virtualCards: [VirtualCardReferenceInput]

    """
    Filter expenses by the last user-role who replied to them
    """
    lastCommentBy: [LastCommentBy]

    """
    Only return expenses that match these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): ExpenseCollection!
  settings: JSON!
  conversations(
    limit: Int! = 15
    offset: Int! = 0

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection!

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int! = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int! = 30): [TagStat]

  """
  The list of expense types supported by this account
  """
  supportedExpenseTypes: [ExpenseType!]!
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid. In most cases, admin only and scope: "expenses".
  """
  payoutMethods(
    """
    Whether to include archived payout methods
    """
    includeArchived: Boolean = false
  ): [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders. Admin or Host only. Scope: "orders".
  """
  paymentMethods(
    type: [PaymentMethodType]
    enumType: [PaymentMethodType] @deprecated(reason: "2021-08-20: use type instead from now")
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]

  """
  The list of payment methods for this account that are pending a client confirmation (3D Secure / SCA)
  """
  paymentMethodsWithPendingConfirmation: [PaymentMethod]

  """
  The list of connected accounts (Stripe, PayPal, etc ...). Admin only. Scope: "connectedAccounts".
  """
  connectedAccounts: [ConnectedAccount]

  """
  The list of applications created by this account. Admin only. Scope: "applications".
  """
  oAuthApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): OAuthApplicationCollection

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats

  """
  Whether this account can have changelog updates
  """
  canHaveChangelogUpdates: Boolean!

  """
  Updates published by the account. To see unpublished updates, you need to be an admin and have the scope "updates".
  """
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Only return published updates.
    """
    onlyPublishedUpdates: Boolean = false
    isDraft: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: UpdateChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!

  """
  Virtual Cards attached to the account. Admin only. Scope: "virtualCards".
  """
  virtualCards(
    limit: Int! = 100
    offset: Int! = 0
    state: String = null @deprecated(reason: "2023-11-06: Please use status.")
    status: [VirtualCardStatus]
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: DateTime = null
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): VirtualCardCollection

  """
  Virtual Cards Merchants used by the account. Admin only. Scope: "virtualCards".
  """
  virtualCardMerchants(limit: Int! = 100, offset: Int! = 0): AccountCollection
  childrenAccounts(
    limit: Int! = 100
    offset: Int! = 0
    isActive: Boolean
    accountType: [AccountType]
    searchTerm: String

    """
    Order of the results. Defaults to createdAt DESC.
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }
  ): AccountCollection!

  """
  Policies for the account. To see non-public policies you need to be admin and have the scope: "account".
  """
  policies: Policies!

  """
  List of activities that the logged-in user is subscribed for this collective
  """
  activitySubscriptions(channel: ActivityChannel): [ActivitySubscription]

  """
  Logged-in user permissions on an account
  """
  permissions: AccountPermissions!

  """
  Host application requests
  """
  hostApplicationRequests(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Filter applications by status
    """
    status: HostApplicationStatus
  ): HostApplicationCollection!
  feed(
    """
    Only returns activities before this date
    """
    dateTo: DateTime

    """
    Number of activities to retrieve
    """
    limit: Int

    """
    The classes of activity types to filter for
    """
    classes: [ActivityClassType]
  ): [Activity]

  """
  If created by duplication, the account from which this one was duplicated
  """
  duplicatedFromAccount: Account

  """
  If this account was duplicated, the accounts that were created from it
  """
  duplicatedAccounts(limit: Int! = 100, offset: Int! = 0): AccountCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  transactionGroups(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter transaction groups by the type of the primary transaction
    """
    type: TransactionType

    """
    Filter transaction groups by the kind of the primary transaction
    """
    kind: TransactionKind

    """
    Only return transaction groups that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transaction groups that were created before this date
    """
    dateTo: DateTime
  ): TransactionGroupCollection!

  """
  EXPERIMENTAL (this may change or be removed)
  """
  transactionReports(timeUnit: TimeUnit = MONTH, dateFrom: DateTime, dateTo: DateTime): TransactionReports
  webhooks(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    account: AccountReferenceInput!
  ): WebhookCollection!

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers(
    """
    The number of results to fetch
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  activeContributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    dateFrom: DateTime
    dateTo: DateTime
    includeActiveRecurringContributions: Boolean
  ): AccountCollection!

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Float!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!
  contributionPolicy: String

  """
  Returns true if the remote user can start the process to resume contributions for account
  """
  canStartResumeContributionsProcess: Boolean!

  """
  Returns true if the account has started the process to resume contributions
  """
  hasResumeContributionsProcessStarted: Boolean!
  vendorInfo: VendorInfo

  """
  Returns whether this account has any payout methods saved
  """
  hasPayoutMethod: Boolean

  """
  The account who created this order
  """
  createdByAccount: Account
}

"""
Some context about the vendor
"""
type VendorInfo {
  contact: VendorContact
  taxFormUrl: String
  taxFormRequired: Boolean
  taxType: String
  taxId: String
  notes: String
}

"""
Some context about the vendor contact person
"""
type VendorContact {
  name: String
  email: String
}

"""
A Virtual Card used to pay expenses
"""
type VirtualCard {
  id: String
  account: Account
  host: Host
  assignee: Individual
  name: String
  last4: String
  data: JSONObject
  status: VirtualCardStatus
  privateData: JSONObject
  provider: String
  spendingLimitAmount: Int
  spendingLimitInterval: VirtualCardLimitInterval
  spendingLimitRenewsOn: DateTime
  remainingLimit: Int
  currency: Currency
  virtualCardRequest: VirtualCardRequest
  createdAt: DateTime
  updatedAt: DateTime
}

enum VirtualCardLimitInterval {
  PER_AUTHORIZATION
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  ALL_TIME
}

"""
A Virtual Card request
"""
type VirtualCardRequest {
  id: String!
  legacyId: Int
  purpose: String
  notes: String
  status: VirtualCardRequestStatus
  currency: Currency
  spendingLimitAmount: Amount
  spendingLimitInterval: VirtualCardLimitInterval
  assignee: Individual
  host: Host
  account: Account
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The status of a virtual card request
"""
enum VirtualCardRequestStatus {
  APPROVED
  REJECTED
  PENDING
}

"""
This is the root query
"""
type Query {
  account(
    """
    The public id identifying the Account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the Account (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the Account (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if the Account is not found
    """
    throwIfMissing: Boolean = true
  ): Account
  accounts(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Search accounts related to this term based on name, description, tags, slug, and location
    """
    searchTerm: String

    """
    Only accounts that match these tags
    """
    tag: [String]

    """
    Operator to use when searching with tags. Defaults to 'AND'
    """
    tagSearchOperator: TagSearchOperator! = AND

    """
    Included collectives which are archived
    """
    includeArchived: Boolean

    """
    Ignore individual accounts used to make contributions as guests
    """
    skipGuests: Boolean = true

    """
    Only return "active" accounts with Financial Contributions enabled if true.
    """
    isActive: Boolean

    """
    Whether to skip recent suspicious accounts (48h)
    """
    skipRecentAccounts: Boolean = false

    """
    Limit the search to collectives belonging to these countries
    """
    country: [CountryISO]

    """
    Host hosting the account
    """
    host: [AccountReferenceInput]

    """
    Parent Collective hosting the account
    """
    parent: [AccountReferenceInput]

    """
    Only return accounts that match these account types (COLLECTIVE, FUND, EVENT, PROJECT, ORGANIZATION or INDIVIDUAL)
    """
    type: [AccountType]

    """
    Only return Fiscal Hosts accounts if true
    """
    isHost: Boolean

    """
    Only accounts with custom contribution (/donate) enabled
    """
    hasCustomContributionsEnabled: Boolean

    """
    The order of results. Defaults to [RANK, DESC] (or [CREATED_AT, DESC] if `supportedPaymentMethodService` is provided)
    """
    orderBy: OrderByInput

    """
    Include vendors for this host
    """
    includeVendorsForHost: AccountReferenceInput

    """
    Filter by the balance of the account and its children accounts (events and projects)
    """
    consolidatedBalance: AmountRangeInput
  ): AccountCollection!
  activities(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The accounts associated with the Activity
    """
    account: [AccountReferenceInput!]!

    """
    If account is a parent, also include child accounts
    """
    includeChildrenAccounts: Boolean! = false

    """
    If account is a parent, use this option to exclude it from the results. Use in combination with includeChildrenAccounts.
    """
    excludeParentAccount: Boolean! = false

    """
    If account is a host, also include hosted accounts
    """
    includeHostedAccounts: Boolean! = false

    """
    Only return activities that were created after this date
    """
    dateFrom: DateTime = null

    """
    Only return activities that were created before this date
    """
    dateTo: DateTime = null

    """
    Only return activities that are of this class/type
    """
    type: [ActivityAndClassesType!] = null

    """
    If true, return the timeline of activities for this account
    """
    timeline: Boolean! = false
  ): ActivityCollection!
  application(
    """
    The public id identifying the application (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The legacy public id identifying the application (ie: 4242)
    """
    legacyId: Int

    """
    The clientId for the application.
    """
    clientId: String
  ): Application
  collective(
    """
    The public id identifying the Collective (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the Collective (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the Collective (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if the Collective is not found
    """
    throwIfMissing: Boolean = true
  ): Collective
  conversation(
    """
    The id identifying the conversation
    """
    id: String!
  ): Conversation

  """
  Get exchange rates from Open Collective
  """
  currencyExchangeRate(
    """
    Requests for currency exchange rates
    """
    requests: [CurrencyExchangeRateRequest!]!
  ): [CurrencyExchangeRate!]!
  event(
    """
    The public id identifying the Event (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the Event (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the Event (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if the Event is not found
    """
    throwIfMissing: Boolean = true
  ): Event
  expense(
    """
    Public expense identifier
    """
    id: String @deprecated(reason: "2020-02-28: Please use the `expense` field.")

    """
    Identifiers to retrieve the expense.
    """
    expense: ExpenseReferenceInput

    """
    Submit-on-behalf key to access drafted Expenses
    """
    draftKey: String
  ): Expense
  expenses(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Reference of an account that is the payee of an expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of an account that is the payer of an expense
    """
    account: AccountReferenceInput

    """
    An alternative to filter by accounts, both cannot be used together
    """
    accounts: [AccountReferenceInput]

    """
    Return expenses only for this host
    """
    host: AccountReferenceInput

    """
    Return expenses only created by this INDIVIDUAL account
    """
    createdByAccount: AccountReferenceInput

    """
    Use this field to filter expenses on their statuses
    """
    status: [ExpenseStatusFilter]

    """
    Use this field to filter expenses on their type (RECEIPT/INVOICE)
    """
    type: ExpenseType
    types: [ExpenseType]

    """
    Only expenses that match these tags
    """
    tags: [String] @deprecated(reason: "2020-06-30: Please use tag (singular)")

    """
    Only expenses that match these tags
    """
    tag: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that use the given type as payout method
    """
    payoutMethodType: PayoutMethodType

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime

    """
    Only return expenses that were created after this date
    """
    dateTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    Whether to include expenses from children of the account (Events and Projects)
    """
    includeChildrenExpenses: Boolean! = false

    """
    Only return expenses that contains this custom data. Requires being an admin of the collective, payee or host.
    """
    customData: JSON

    """
    Filter expenses of type charges based on presence of receipts
    """
    chargeHasReceipts: Boolean

    """
    Filter expenses of type charges using these virtual cards
    """
    virtualCards: [VirtualCardReferenceInput]

    """
    Filter expenses by the last user-role who replied to them
    """
    lastCommentBy: [LastCommentBy]

    """
    Only return expenses that match these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): ExpenseCollection!
  expenseTagStats(
    """
    Return tags which includes this search term.
    """
    tagSearchTerm: String

    """
    Return tags from expenses to accounts hosted by this account. Can not be used together with "account".
    """
    host: AccountReferenceInput

    """
    Return tags from expenses to this account. Can not be used together with "host".
    """
    account: AccountReferenceInput
    limit: Int! = 10
    offset: Int! = 0
  ): TagStatsCollection!
  fund(
    """
    The public id identifying the Fund (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the Fund (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the Fund (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if the Fund is not found
    """
    throwIfMissing: Boolean = true
  ): Fund
  host(
    """
    The public id identifying the Host (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the Host (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the Host (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if the Host is not found
    """
    throwIfMissing: Boolean = true
  ): Host
  hosts(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Search accounts related to this term based on name, description, tags, slug, and location
    """
    searchTerm: String

    """
    Only accounts that match these tags
    """
    tag: [String]

    """
    Operator to use when searching with tags. Defaults to 'AND'
    """
    tagSearchOperator: TagSearchOperator! = AND

    """
    Included collectives which are archived
    """
    includeArchived: Boolean

    """
    Ignore individual accounts used to make contributions as guests
    """
    skipGuests: Boolean = true

    """
    Only return "active" accounts with Financial Contributions enabled if true.
    """
    isActive: Boolean

    """
    Whether to skip recent suspicious accounts (48h)
    """
    skipRecentAccounts: Boolean = false

    """
    Limit the search to collectives belonging to these countries
    """
    country: [CountryISO]
    currency: String

    """
    Filter hosts by tags (multiple = OR)
    """
    tags: [String] @deprecated(reason: "2020-06-30: Please use tag (singular)")
  ): HostCollection
  individual(
    """
    The public id identifying the Individual (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the Individual (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the Individual (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if the Individual is not found
    """
    throwIfMissing: Boolean = true
  ): Individual

  """
  [AUTHENTICATED] Returns the pending invitations
  """
  memberInvitations(
    """
    A reference to an account (usually Individual). Will return invitations sent to the account to join as a member
    """
    memberAccount: AccountReferenceInput

    """
    A reference to an account (usually Collective, Fund or Organization). Will return invitations sent to join this account as a member.
    """
    account: AccountReferenceInput

    """
    An array of Member roles to filter for
    """
    role: [MemberRole]
  ): [MemberInvitation]
  order(
    """
    Identifiers to retrieve the Order
    """
    order: OrderReferenceInput!
  ): Order
  orders(
    """
    Return only orders made from/to account
    """
    account: AccountReferenceInput

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Include orders from children events/projects
    """
    includeChildrenAccounts: Boolean! = false

    """
    Only return orders that were paused by these roles. status must be set to PAUSED.
    """
    pausedBy: [OrderPausedBy]

    """
    Only return orders that were paid with this payment method. Must be an admin of the account owning the payment method.
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return orders that match these payment method services
    """
    paymentMethodService: [PaymentMethodService]

    """
    Only return orders that match these payment method types
    """
    paymentMethodType: [PaymentMethodType]

    """
    Whether to include incognito orders. Must be admin or root. Only with filter null or OUTGOING.
    """
    includeIncognito: Boolean = false

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their frequency (ONETIME, MONTHLY or YEARLY)
    """
    frequency: [ContributionFrequency]

    """
    Use this field to filter orders on their statuses
    """
    status: [OrderStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: DateTime

    """
    Only return orders that were created before this date
    """
    dateTo: DateTime

    """
    Only return pending orders that were expected after this date
    """
    expectedDateFrom: DateTime

    """
    Only return pending orders that were expected before this date
    """
    expectedDateTo: DateTime

    """
    Return orders that were charged after this date
    """
    chargedDateFrom: DateTime

    """
    Return orders that were charged before this date
    """
    chargedDateTo: DateTime

    """
    The term to search
    """
    searchTerm: String
    tierSlug: String @deprecated(reason: "2022-02-25: Should be replaced by a tier reference.")
    tier: [TierReferenceInput]

    """
    Only returns orders that have a subscription (monthly/yearly). Don't use together with frequency.
    """
    onlySubscriptions: Boolean

    """
    Same as onlySubscriptions, but returns only orders with active subscriptions
    """
    onlyActiveSubscriptions: Boolean
    expectedFundsFilter: ExpectedFundsFilter

    """
    Return only orders made from/to that opposite account (only works when orders are already filtered with a main account)
    """
    oppositeAccount: AccountReferenceInput

    """
    Return only orders made from/to these hosted accounts
    """
    hostedAccounts: [AccountReferenceInput]
  ): OrderCollection!
  organization(
    """
    The public id identifying the Organization (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the Organization (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the Organization (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if the Organization is not found
    """
    throwIfMissing: Boolean = true
  ): Organization
  project(
    """
    The public id identifying the Project (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The slug identifying the Project (ie: babel for https://opencollective.com/babel)
    """
    slug: String

    """
    The githubHandle attached to the Project (ie: babel for https://opencollective.com/babel)
    """
    githubHandle: String

    """
    If false, will return null instead of an error if the Project is not found
    """
    throwIfMissing: Boolean = true
  ): Project

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  search(
    """
    The search term to search for
    """
    searchTerm: String!

    """
    Limit the scope of the search to this account and its children
    """
    account: AccountReferenceInput

    """
    Limit the scope of the search to this host and its hosted accounts
    """
    host: AccountReferenceInput

    """
    The maximum amount of time in millisecond to wait for a single entity type query to complete (for SQL search)
    """
    timeout: Int! = 10000

    """
    The default limit for each entity type
    """
    defaultLimit: Int! = 10
  ): SearchResponse!
  tagStats(
    """
    Return tags from collectives which includes this search term. Using this argument will ignore tagSearchTerm. Skipping this argument will use a more efficient query.
    """
    searchTerm: String

    """
    Return tags which includes this search term. Using this argument will ignore searchTerm.
    """
    tagSearchTerm: String

    """
    Return tags from collectives hosted by this host.
    """
    host: AccountReferenceInput
    limit: Int! = 10
    offset: Int! = 0
  ): TagStatsCollection!
  tier(
    """
    Identifiers to retrieve the tier
    """
    tier: TierReferenceInput!

    """
    If true, an error will be returned if the tier is missing
    """
    throwIfMissing: Boolean! = true
  ): Tier

  """
  Fetch a single transaction
  """
  transaction(
    """
    The public id identifying the transaction (ie: rvelja97-pkzqbgq7-bbzyx6wd-50o8n4rm)
    """
    id: String @deprecated(reason: "2024-05-07: Please use the `transaction` field.")

    """
    Identifiers to retrieve the transaction.
    """
    transaction: TransactionReferenceInput
  ): Transaction
  transactions(
    """
    Reference of the account(s) assigned to the main side of the transaction (CREDIT -> recipient, DEBIT -> sender)
    """
    account: [AccountReferenceInput!]

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The transaction type (DEBIT or CREDIT)
    """
    type: TransactionType

    """
    The payment method types. Can include `null` for transactions without a payment method
    """
    paymentMethodType: [PaymentMethodType]

    """
    The payment method services.
    """
    paymentMethodService: [PaymentMethodService]

    """
    Reference of the account(s) assigned to the main side of the transaction you want to EXCLUDE from the results
    """
    excludeAccount: [AccountReferenceInput]

    """
    Reference of the account assigned to the other side of the transaction (CREDIT -> sender, DEBIT -> recipient). Avoid, favor account instead.
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the host accounting the transaction
    """
    host: AccountReferenceInput

    """
    NOT IMPLEMENTED. Only return transactions that match these tags.
    """
    tags: [String] @deprecated(reason: "2020-08-09: Was never implemented.")

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return transactions where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transactions that were created before this date
    """
    dateTo: DateTime

    """
    Only return transactions that were cleared after this date
    """
    clearedFrom: DateTime

    """
    Only return transactions that were cleared before this date
    """
    clearedTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    If true, return transactions with debt attached, if false transactions without debt attached.
    """
    hasDebt: Boolean

    """
    Only return transactions with an Expense attached
    """
    hasExpense: Boolean

    """
    Only return transactions with this Expense attached
    """
    expense: ExpenseReferenceInput

    """
    Only return transactions that have an Expense of one of these expense types attached
    """
    expenseType: [ExpenseType]

    """
    Only return transactions with an Order attached
    """
    hasOrder: Boolean

    """
    Only return transactions for this order.
    """
    order: OrderReferenceInput

    """
    Used when filtering with the `host` argument to determine whether to include transactions on the fiscal host account (and children)
    """
    includeHost: Boolean! = true

    """
    Whether to include regular transactions from the account (turn false if you only want Incognito or Gift Card transactions)
    """
    includeRegularTransactions: Boolean! = true

    """
    If the account is a user and this field is true, contributions from the incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false

    """
    Whether to include transactions from children (Events and Projects)
    """
    includeChildrenTransactions: Boolean! = false

    """
    Whether to include transactions from Gift Cards issued by the account.
    """
    includeGiftCardTransactions: Boolean! = false

    """
    Whether to include debt transactions
    """
    includeDebts: Boolean! = false

    """
    To filter by transaction kind
    """
    kind: [TransactionKind]

    """
    The transactions group to filter by
    """
    group: [String]
    virtualCard: [VirtualCardReferenceInput]

    """
    Only return transactions that are refunds (or not refunds if false)
    """
    isRefund: Boolean

    """
    Only return transactions that are associated with these external merchant IDs
    """
    merchantId: [String]

    """
    Only return transactions that are associated with these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payment method
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): TransactionCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  transactionGroup(
    """
    The public id identifying the transaction group (ie: rvelja97-pkzqbgq7-bbzyx6wd-50o8n4rm)
    """
    groupId: String!

    """
    Account associated to the transaction group
    """
    account: AccountReferenceInput!
  ): TransactionGroup

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  transactionGroups(
    """
    Reference of the account(s) assigned to the main side of the transaction group (CREDIT -> recipient, DEBIT -> sender)
    """
    account: AccountReferenceInput!

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter transaction groups by the type of the primary transaction
    """
    type: TransactionType

    """
    Filter transaction groups by the kind of the primary transaction
    """
    kind: TransactionKind

    """
    Only return transaction groups that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transaction groups that were created before this date
    """
    dateTo: DateTime
  ): TransactionGroupCollection!

  """
  Fetch a transactions import
  """
  transactionsImport(
    """
    The public id identifying the import (ie: rvelja97-pkzqbgq7-bbzyx6wd-50o8n4rm)
    """
    id: String!
  ): TransactionsImport
  update(
    """
    Public identifier
    """
    id: String

    """
    The update slug identifying the update
    """
    slug: String

    """
    When fetching by slug, an account must be provided
    """
    account: AccountReferenceInput
  ): Update

  """
  This query currently returns only published updates
  """
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Only return updates from accounts that have one of these tags
    """
    accountTag: [String]

    """
    Only return updates from accounts that match these types (COLLECTIVE, FUND, EVENT, PROJECT, ORGANIZATION or INDIVIDUAL)
    """
    accountType: [AccountType]

    """
    Host for the accounts for which to get updates
    """
    host: [AccountReferenceInput]
    onlyChangelogUpdates: Boolean
    orderBy: UpdateChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
  ): UpdateCollection!
  paypalPlan(
    """
    The account that serves as a payment target
    """
    account: AccountReferenceInput!

    """
    The contribution amount for 1 quantity, without platform contribution and taxes
    """
    amount: AmountInput!
    frequency: ContributionFrequency!

    """
    The order for which the plan is created, if any
    """
    order: OrderReferenceInput

    """
    The tier you are contributing to
    """
    tier: TierReferenceInput
  ): PaypalPlan!

  """
  Get a personal token by reference
  """
  personalToken(
    """
    The public id identifying the personal-token (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
    """
    id: String

    """
    The legacy public id identifying the personal-token (ie: 4242)
    """
    legacyId: Int
  ): PersonalToken
  virtualCard(
    """
    Identifiers to retrieve the virtual card
    """
    virtualCard: VirtualCardReferenceInput!

    """
    If true, an error will be returned if the virtual card is missing
    """
    throwIfMissing: Boolean! = true
  ): VirtualCard
  virtualCardRequest(
    """
    Identifiers to retrieve the virtual card request
    """
    virtualCardRequest: VirtualCardRequestReferenceInput!

    """
    If true, an error will be returned if the virtual card request is missing
    """
    throwIfMissing: Boolean! = true
  ): VirtualCardRequest
  virtualCardRequests(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Host for the accounts for which to get virtual card requests
    """
    host: AccountReferenceInput!
    status: [VirtualCardRequestStatus]
    collective: [AccountReferenceInput]
  ): VirtualCardRequestCollection!
  hostApplication(hostApplication: HostApplicationReferenceInput): HostApplication
  loggedInAccount: Individual
  me: Individual
}

"""
The operator to use when searching with tags
"""
enum TagSearchOperator {
  AND
  OR
}

"""
Two-letters country code following ISO3166_1
"""
enum CountryISO {
  """
  Andorra
  """
  AD

  """
  The United Arab Emirates
  """
  AE

  """
  Afghanistan
  """
  AF

  """
  Antigua and Barbuda
  """
  AG

  """
  Anguilla
  """
  AI

  """
  Albania
  """
  AL

  """
  Armenia
  """
  AM

  """
  Angola
  """
  AO

  """
  Antarctica
  """
  AQ

  """
  Argentina
  """
  AR

  """
  American Samoa
  """
  AS

  """
  Austria
  """
  AT

  """
  Australia
  """
  AU

  """
  Aruba
  """
  AW

  """
  Åland Islands
  """
  AX

  """
  Azerbaijan
  """
  AZ

  """
  Bosnia and Herzegovina
  """
  BA

  """
  Barbados
  """
  BB

  """
  Bangladesh
  """
  BD

  """
  Belgium
  """
  BE

  """
  Burkina
  """
  BF

  """
  Bulgaria
  """
  BG

  """
  Bahrain
  """
  BH

  """
  Burundi
  """
  BI

  """
  Benin
  """
  BJ

  """
  Saint Barthélemy
  """
  BL

  """
  Bermuda
  """
  BM

  """
  Brunei
  """
  BN

  """
  Bolivia
  """
  BO

  """
  Bonaire, Sint Eustatius and Saba
  """
  BQ

  """
  Brazil
  """
  BR

  """
  The Bahamas
  """
  BS

  """
  Bhutan
  """
  BT

  """
  Bouvet Island
  """
  BV

  """
  Botswana
  """
  BW

  """
  Belarus
  """
  BY

  """
  Belize
  """
  BZ

  """
  Canada
  """
  CA

  """
  Cocos Islands
  """
  CC

  """
  The Democratic Republic of the Congo
  """
  CD

  """
  The Central African Republic
  """
  CF

  """
  The Congo
  """
  CG

  """
  Switzerland
  """
  CH

  """
  Côte d'Ivoire
  """
  CI

  """
  Cook Islands
  """
  CK

  """
  Chile
  """
  CL

  """
  Cameroon
  """
  CM

  """
  China
  """
  CN

  """
  Colombia
  """
  CO

  """
  Costa Rica
  """
  CR

  """
  Cuba
  """
  CU

  """
  Cape Verde
  """
  CV

  """
  Curaçao
  """
  CW

  """
  Christmas Island
  """
  CX

  """
  Cyprus
  """
  CY

  """
  The Czech Republic
  """
  CZ

  """
  Germany
  """
  DE

  """
  Djibouti
  """
  DJ

  """
  Denmark
  """
  DK

  """
  Dominica
  """
  DM

  """
  The Dominican Republic
  """
  DO

  """
  Algeria
  """
  DZ

  """
  Ecuador
  """
  EC

  """
  Estonia
  """
  EE

  """
  Egypt
  """
  EG

  """
  Western Sahara
  """
  EH

  """
  Eritrea
  """
  ER

  """
  Spain
  """
  ES

  """
  Ethiopia
  """
  ET

  """
  Finland
  """
  FI

  """
  Fiji
  """
  FJ

  """
  Falkland Islands
  """
  FK

  """
  Micronesia
  """
  FM

  """
  Faroe Islands
  """
  FO

  """
  France
  """
  FR

  """
  Gabon
  """
  GA

  """
  The United Kingdom
  """
  GB

  """
  Grenada
  """
  GD

  """
  Georgia
  """
  GE

  """
  French Guiana
  """
  GF

  """
  Guernsey
  """
  GG

  """
  Ghana
  """
  GH

  """
  Gibraltar
  """
  GI

  """
  Greenland
  """
  GL

  """
  The Gambia
  """
  GM

  """
  Guinea
  """
  GN

  """
  Guadeloupe
  """
  GP

  """
  Equatorial Guinea
  """
  GQ

  """
  Greece
  """
  GR

  """
  South Georgia and The South Sandwich Islands
  """
  GS

  """
  Guatemala
  """
  GT

  """
  Guam
  """
  GU

  """
  Guinea-Bissau
  """
  GW

  """
  Guyana
  """
  GY

  """
  Hong Kong
  """
  HK

  """
  Heard Island and McDonald Islands
  """
  HM

  """
  Honduras
  """
  HN

  """
  Croatia
  """
  HR

  """
  Haiti
  """
  HT

  """
  Hungary
  """
  HU

  """
  Indonesia
  """
  ID

  """
  Ireland
  """
  IE

  """
  Israel
  """
  IL

  """
  Isle of Man
  """
  IM

  """
  India
  """
  IN

  """
  The British Indian Ocean Territory
  """
  IO

  """
  Iraq
  """
  IQ

  """
  Iran
  """
  IR

  """
  Iceland
  """
  IS

  """
  Italy
  """
  IT

  """
  Jersey
  """
  JE

  """
  Jamaica
  """
  JM

  """
  Jordan
  """
  JO

  """
  Japan
  """
  JP

  """
  Kenya
  """
  KE

  """
  Kyrgyzstan
  """
  KG

  """
  Cambodia
  """
  KH

  """
  Kiribati
  """
  KI

  """
  The Comoros
  """
  KM

  """
  Saint Kitts and Nevis
  """
  KN

  """
  The Democratic People's Republic of Korea
  """
  KP

  """
  The Republic of Korea
  """
  KR

  """
  Kuwait
  """
  KW

  """
  Cayman Islands
  """
  KY

  """
  Kazakhstan
  """
  KZ

  """
  Laos
  """
  LA

  """
  Lebanon
  """
  LB

  """
  Saint Lucia
  """
  LC

  """
  Liechtenstein
  """
  LI

  """
  Sri Lanka
  """
  LK

  """
  Liberia
  """
  LR

  """
  Lesotho
  """
  LS

  """
  Lithuania
  """
  LT

  """
  Luxembourg
  """
  LU

  """
  Latvia
  """
  LV

  """
  Libya
  """
  LY

  """
  Morocco
  """
  MA

  """
  Monaco
  """
  MC

  """
  Moldova
  """
  MD

  """
  Montenegro
  """
  ME

  """
  Saint Martin
  """
  MF

  """
  Madagascar
  """
  MG

  """
  The Marshall Islands
  """
  MH

  """
  Macedonia
  """
  MK

  """
  Mali
  """
  ML

  """
  Myanmar
  """
  MM

  """
  Mongolia
  """
  MN

  """
  Macao
  """
  MO

  """
  Northern Mariana Islands
  """
  MP

  """
  Martinique
  """
  MQ

  """
  Mauritania
  """
  MR

  """
  Montserrat
  """
  MS

  """
  Malta
  """
  MT

  """
  Mauritius
  """
  MU

  """
  Maldives
  """
  MV

  """
  Malawi
  """
  MW

  """
  Mexico
  """
  MX

  """
  Malaysia
  """
  MY

  """
  Mozambique
  """
  MZ

  """
  Namibia
  """
  NA

  """
  New Caledonia
  """
  NC

  """
  The Niger
  """
  NE

  """
  Norfolk Island
  """
  NF

  """
  Nigeria
  """
  NG

  """
  Nicaragua
  """
  NI

  """
  The Netherlands
  """
  NL

  """
  Norway
  """
  NO

  """
  Nepal
  """
  NP

  """
  Nauru
  """
  NR

  """
  Niue
  """
  NU

  """
  New Zealand
  """
  NZ

  """
  Oman
  """
  OM

  """
  Panama
  """
  PA

  """
  Peru
  """
  PE

  """
  French Polynesia
  """
  PF

  """
  Papua New Guinea
  """
  PG

  """
  The Philippines
  """
  PH

  """
  Pakistan
  """
  PK

  """
  Poland
  """
  PL

  """
  Saint Pierre and Miquelon
  """
  PM

  """
  Pitcairn
  """
  PN

  """
  Puerto Rico
  """
  PR

  """
  The Occupied Palestinian Territory
  """
  PS

  """
  Portugal
  """
  PT

  """
  Palau
  """
  PW

  """
  Paraguay
  """
  PY

  """
  Qatar
  """
  QA

  """
  Réunion
  """
  RE

  """
  Romania
  """
  RO

  """
  Serbia
  """
  RS

  """
  Russia
  """
  RU

  """
  Rwanda
  """
  RW

  """
  Saudi Arabia
  """
  SA

  """
  Solomon Islands
  """
  SB

  """
  Seychelles
  """
  SC

  """
  The Sudan
  """
  SD

  """
  Sweden
  """
  SE

  """
  Singapore
  """
  SG

  """
  Saint Helena
  """
  SH

  """
  Slovenia
  """
  SI

  """
  Svalbard and Jan Mayen
  """
  SJ

  """
  Slovakia
  """
  SK

  """
  Sierra Leone
  """
  SL

  """
  San Marino
  """
  SM

  """
  Senegal
  """
  SN

  """
  Somalia
  """
  SO

  """
  Suriname
  """
  SR

  """
  South Sudan
  """
  SS

  """
  Sao Tome and Principe
  """
  ST

  """
  El Salvador
  """
  SV

  """
  Sint Maarten
  """
  SX

  """
  Syria
  """
  SY

  """
  Swaziland
  """
  SZ

  """
  Turks and Caicos Islands
  """
  TC

  """
  Chad
  """
  TD

  """
  The French Southern Territories
  """
  TF

  """
  Togo
  """
  TG

  """
  Thailand
  """
  TH

  """
  Tajikistan
  """
  TJ

  """
  Tokelau
  """
  TK

  """
  Timor-Leste
  """
  TL

  """
  Turkmenistan
  """
  TM

  """
  Tunisia
  """
  TN

  """
  Tonga
  """
  TO

  """
  Turkey
  """
  TR

  """
  Trinidad and Tobago
  """
  TT

  """
  Tuvalu
  """
  TV

  """
  Taiwan
  """
  TW

  """
  Tanzania
  """
  TZ

  """
  Ukraine
  """
  UA

  """
  Uganda
  """
  UG

  """
  United States Minor Outlying Islands
  """
  UM

  """
  The United States
  """
  US

  """
  Uruguay
  """
  UY

  """
  Uzbekistan
  """
  UZ

  """
  The Holy See
  """
  VA

  """
  Saint Vincent and The Grenadines
  """
  VC

  """
  Venezuela
  """
  VE

  """
  British Virgin Islands
  """
  VG

  """
  US Virgin Islands
  """
  VI

  """
  Viet Nam
  """
  VN

  """
  Vanuatu
  """
  VU

  """
  Wallis and Futuna
  """
  WF

  """
  Samoa
  """
  WS

  """
  Yemen
  """
  YE

  """
  Mayotte
  """
  YT

  """
  South Africa
  """
  ZA

  """
  Zambia
  """
  ZM

  """
  Zimbabwe
  """
  ZW
}

enum ActivityAndClassesType {
  ACTIVITY_ALL
  ACCOUNTING_CATEGORIES_EDITED
  CONNECTED_ACCOUNT_CREATED
  CONNECTED_ACCOUNT_ERROR
  COLLECTIVE_CREATED_GITHUB
  COLLECTIVE_APPLY
  COLLECTIVE_APPROVED
  COLLECTIVE_REJECTED
  COLLECTIVE_CREATED
  COLLECTIVE_EDITED
  COLLECTIVE_DELETED
  COLLECTIVE_UNHOSTED
  ORGANIZATION_COLLECTIVE_CREATED
  COLLECTIVE_FROZEN
  COLLECTIVE_UNFROZEN
  COLLECTIVE_CONVERSATION_CREATED
  UPDATE_COMMENT_CREATED
  EXPENSE_COMMENT_CREATED
  CONVERSATION_COMMENT_CREATED
  ORDER_COMMENT_CREATED
  COLLECTIVE_EXPENSE_CREATED
  COLLECTIVE_EXPENSE_DELETED
  COLLECTIVE_EXPENSE_UPDATED
  COLLECTIVE_EXPENSE_REJECTED
  COLLECTIVE_EXPENSE_APPROVED
  COLLECTIVE_EXPENSE_RE_APPROVAL_REQUESTED
  COLLECTIVE_EXPENSE_UNAPPROVED
  COLLECTIVE_EXPENSE_MOVED
  COLLECTIVE_EXPENSE_PAID
  COLLECTIVE_EXPENSE_MARKED_AS_UNPAID
  COLLECTIVE_EXPENSE_MARKED_AS_SPAM
  COLLECTIVE_EXPENSE_MARKED_AS_INCOMPLETE
  COLLECTIVE_EXPENSE_PROCESSING
  COLLECTIVE_EXPENSE_PUT_ON_HOLD
  COLLECTIVE_EXPENSE_RELEASED_FROM_HOLD
  COLLECTIVE_EXPENSE_SCHEDULED_FOR_PAYMENT
  COLLECTIVE_EXPENSE_UNSCHEDULED_FOR_PAYMENT
  COLLECTIVE_EXPENSE_ERROR
  COLLECTIVE_EXPENSE_INVITE_DRAFTED
  COLLECTIVE_EXPENSE_INVITE_DECLINED
  COLLECTIVE_EXPENSE_RECURRING_DRAFTED
  COLLECTIVE_EXPENSE_MISSING_RECEIPT
  TAXFORM_REQUEST
  TAXFORM_RECEIVED
  TAXFORM_INVALIDATED
  COLLECTIVE_VIRTUAL_CARD_ADDED
  COLLECTIVE_VIRTUAL_CARD_MISSING_RECEIPTS
  COLLECTIVE_VIRTUAL_CARD_RESUMED
  COLLECTIVE_VIRTUAL_CARD_SUSPENDED
  COLLECTIVE_VIRTUAL_CARD_SUSPENDED_DUE_TO_INACTIVITY
  COLLECTIVE_VIRTUAL_CARD_DELETED
  COLLECTIVE_VIRTUAL_CARD_REQUEST_APPROVED
  COLLECTIVE_VIRTUAL_CARD_REQUEST_REJECTED
  VIRTUAL_CARD_REQUESTED
  VIRTUAL_CARD_CHARGE_DECLINED
  VIRTUAL_CARD_PURCHASE
  COLLECTIVE_MEMBER_INVITED
  COLLECTIVE_MEMBER_CREATED
  COLLECTIVE_CORE_MEMBER_ADDED
  COLLECTIVE_CORE_MEMBER_INVITED
  COLLECTIVE_CORE_MEMBER_INVITATION_DECLINED
  COLLECTIVE_CORE_MEMBER_REMOVED
  COLLECTIVE_CORE_MEMBER_EDITED
  COLLECTIVE_TRANSACTION_CREATED
  TRANSACTIONS_IMPORT_CREATED
  TRANSACTIONS_IMPORT_ROW_UPDATED
  COLLECTIVE_UPDATE_CREATED
  COLLECTIVE_UPDATE_PUBLISHED
  COLLECTIVE_CONTACT
  HOST_APPLICATION_CONTACT
  HOST_APPLICATION_COMMENT_CREATED
  CONTRIBUTION_REJECTED
  SUBSCRIPTION_ACTIVATED
  SUBSCRIPTION_CANCELED
  SUBSCRIPTION_PAUSED
  SUBSCRIPTION_RESUMED
  SUBSCRIPTION_READY_TO_BE_RESUMED
  TICKET_CONFIRMED
  ORDER_CANCELED_ARCHIVED_COLLECTIVE
  ORDER_PENDING
  ORDER_PENDING_CONTRIBUTION_NEW
  ORDER_PENDING_CONTRIBUTION_REMINDER
  ORDER_PROCESSING
  ORDER_PROCESSED
  ORDER_PAYMENT_FAILED
  ORDER_REVIEW_OPENED
  ORDER_REVIEW_CLOSED
  ORDER_DISPUTE_CREATED
  ORDER_DISPUTE_CLOSED
  ORDER_UPDATED
  ADDED_FUNDS_EDITED
  VENDOR_CREATED
  VENDOR_EDITED
  VENDOR_DELETED
  ORDER_PENDING_CREATED
  ORDER_PENDING_FOLLOWUP
  ORDER_PENDING_RECEIVED
  ORDER_PENDING_EXPIRED
  ORDERS_SUSPICIOUS
  PAYMENT_FAILED
  PAYMENT_CREDITCARD_CONFIRMATION
  PAYMENT_CREDITCARD_EXPIRING
  USER_CREATED
  USER_NEW_TOKEN
  USER_SIGNIN
  USER_RESET_PASSWORD
  OAUTH_APPLICATION_AUTHORIZED
  TWO_FACTOR_METHOD_ADDED
  TWO_FACTOR_METHOD_DELETED
  TWO_FACTOR_CODE_REQUESTED
  USER_CHANGE_EMAIL
  USER_PAYMENT_METHOD_CREATED
  USER_PASSWORD_SET
  USER_CARD_CLAIMED
  USER_CARD_INVITED
  WEBHOOK_STRIPE_RECEIVED
  WEBHOOK_PAYPAL_RECEIVED
  COLLECTIVE_MONTHLY_REPORT
  ACTIVATED_COLLECTIVE_AS_HOST
  ACTIVATED_COLLECTIVE_AS_INDEPENDENT
  DEACTIVATED_COLLECTIVE_AS_HOST
  AGREEMENT_CREATED
  AGREEMENT_EDITED
  AGREEMENT_DELETED
  ADDED_FUND_TO_ORG
  COLLECTIVE_TRANSACTION_PAID
  COLLECTIVE_USER_ADDED
  COLLECTIVE_VIRTUAL_CARD_ASSIGNED
  COLLECTIVE_VIRTUAL_CARD_CREATED
  SUBSCRIPTION_CONFIRMED
  COLLECTIVE_COMMENT_CREATED
  ORDER_PENDING_CRYPTO
  BACKYOURSTACK_DISPATCH_CONFIRMED
  COLLECTIVE
  EXPENSES
  CONTRIBUTIONS
  ACTIVITIES_UPDATES
  VIRTUAL_CARDS
  FUND_EVENTS
  REPORTS
}

"""
Request for a currency exchange rate
"""
input CurrencyExchangeRateRequest {
  """
  Currency to convert from
  """
  fromCurrency: Currency!

  """
  Currency to convert to
  """
  toCurrency: Currency!

  """
  Date of the exchange rate. Defaults to now.
  """
  date: DateTime
}

"""
A collection of "Tags"
"""
type TagStatsCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [TagStat]
}

"""
This represents an Project account
"""
type Fund implements Account & AccountWithHost & AccountWithContributions {
  id: String!
  legacyId: Int!

  """
  The slug identifying the account (ie: babel)
  """
  slug: String!
  type: AccountType!

  """
  Public name
  """
  name: String

  """
  Private, legal name. Used for expense receipts, taxes, etc. Scope: "account".
  """
  legalName: String
  description: String
  longDescription: String
  tags: [String]
  website: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  twitterHandle: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  githubHandle: String @deprecated(reason: "2022-06-03: Please use repositoryUrl")
  repositoryUrl: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  socialLinks: [SocialLink!]!

  """
  The currency of the account
  """
  currency: Currency!
  expensePolicy: String @deprecated(reason: "2024-11-04: Please use policies.EXPENSE_POLICIES")

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Date of unhosting by a given Fiscal Host.
  """
  unhostedAt(
    """
    The host account this collective was hosted by
    """
    host: AccountReferenceInput!
  ): DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean!

  """
  Whether this account is frozen
  """
  isFrozen: Boolean!

  """
  Returns whether it's active: can accept financial contributions and pay expenses.
  """
  isActive: Boolean!

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean!

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!
  parentAccount: Account @deprecated(reason: "2022-12-16: use parent on AccountWithParent instead")

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int! = 100
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
    includeInherited: Boolean = true
  ): MemberCollection!

  """
  [AUTHENTICATED] Returns the pending invitations
  """
  memberInvitations(
    """
    A reference to an account (usually Individual). Will return invitations sent to the account to join as a member
    """
    memberAccount: AccountReferenceInput

    """
    A reference to an account (usually Collective, Fund or Organization). Will return invitations sent to join this account as a member.
    """
    account: AccountReferenceInput

    """
    An array of Member roles to filter for
    """
    role: [MemberRole]
  ): [MemberInvitation]

  """
  The legal documents associated with this account
  """
  legalDocuments(
    """
    Filter by type
    """
    type: [LegalDocumentType]
  ): [LegalDocument]
  memberOf(
    limit: Int! = 150
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }

    """
    Order the query by requested role order
    """
    orderByRoles: Boolean
  ): MemberOfCollection!

  """
  Returns the emails of the account. Individuals only have one, but organizations can have multiple emails.
  """
  emails: [EmailAddress!]
  transactions(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The transaction type (DEBIT or CREDIT)
    """
    type: TransactionType

    """
    The payment method types. Can include `null` for transactions without a payment method
    """
    paymentMethodType: [PaymentMethodType]

    """
    The payment method services.
    """
    paymentMethodService: [PaymentMethodService]

    """
    Reference of the account(s) assigned to the main side of the transaction you want to EXCLUDE from the results
    """
    excludeAccount: [AccountReferenceInput]

    """
    Reference of the account assigned to the other side of the transaction (CREDIT -> sender, DEBIT -> recipient). Avoid, favor account instead.
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the host accounting the transaction
    """
    host: AccountReferenceInput

    """
    NOT IMPLEMENTED. Only return transactions that match these tags.
    """
    tags: [String] @deprecated(reason: "2020-08-09: Was never implemented.")

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return transactions where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transactions that were created before this date
    """
    dateTo: DateTime

    """
    Only return transactions that were cleared after this date
    """
    clearedFrom: DateTime

    """
    Only return transactions that were cleared before this date
    """
    clearedTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    If true, return transactions with debt attached, if false transactions without debt attached.
    """
    hasDebt: Boolean

    """
    Only return transactions with an Expense attached
    """
    hasExpense: Boolean

    """
    Only return transactions with this Expense attached
    """
    expense: ExpenseReferenceInput

    """
    Only return transactions that have an Expense of one of these expense types attached
    """
    expenseType: [ExpenseType]

    """
    Only return transactions with an Order attached
    """
    hasOrder: Boolean

    """
    Only return transactions for this order.
    """
    order: OrderReferenceInput

    """
    Used when filtering with the `host` argument to determine whether to include transactions on the fiscal host account (and children)
    """
    includeHost: Boolean! = true

    """
    Whether to include regular transactions from the account (turn false if you only want Incognito or Gift Card transactions)
    """
    includeRegularTransactions: Boolean! = true

    """
    If the account is a user and this field is true, contributions from the incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false

    """
    Whether to include transactions from children (Events and Projects)
    """
    includeChildrenTransactions: Boolean! = false

    """
    Whether to include transactions from Gift Cards issued by the account.
    """
    includeGiftCardTransactions: Boolean! = false

    """
    Whether to include debt transactions
    """
    includeDebts: Boolean! = false

    """
    To filter by transaction kind
    """
    kind: [TransactionKind]

    """
    The transactions group to filter by
    """
    group: [String]
    virtualCard: [VirtualCardReferenceInput]

    """
    Only return transactions that are refunds (or not refunds if false)
    """
    isRefund: Boolean

    """
    Only return transactions that are associated with these external merchant IDs
    """
    merchantId: [String]

    """
    Only return transactions that are associated with these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payment method
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): TransactionCollection!
  orders(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Include orders from children events/projects
    """
    includeChildrenAccounts: Boolean! = false

    """
    Only return orders that were paused by these roles. status must be set to PAUSED.
    """
    pausedBy: [OrderPausedBy]

    """
    Only return orders that were paid with this payment method. Must be an admin of the account owning the payment method.
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return orders that match these payment method services
    """
    paymentMethodService: [PaymentMethodService]

    """
    Only return orders that match these payment method types
    """
    paymentMethodType: [PaymentMethodType]

    """
    Whether to include incognito orders. Must be admin or root. Only with filter null or OUTGOING.
    """
    includeIncognito: Boolean = false

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their frequency (ONETIME, MONTHLY or YEARLY)
    """
    frequency: [ContributionFrequency]

    """
    Use this field to filter orders on their statuses
    """
    status: [OrderStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: DateTime

    """
    Only return orders that were created before this date
    """
    dateTo: DateTime

    """
    Only return pending orders that were expected after this date
    """
    expectedDateFrom: DateTime

    """
    Only return pending orders that were expected before this date
    """
    expectedDateTo: DateTime

    """
    Return orders that were charged after this date
    """
    chargedDateFrom: DateTime

    """
    Return orders that were charged before this date
    """
    chargedDateTo: DateTime

    """
    The term to search
    """
    searchTerm: String
    tierSlug: String @deprecated(reason: "2022-02-25: Should be replaced by a tier reference.")
    tier: [TierReferenceInput]

    """
    Only returns orders that have a subscription (monthly/yearly). Don't use together with frequency.
    """
    onlySubscriptions: Boolean

    """
    Same as onlySubscriptions, but returns only orders with active subscriptions
    """
    onlyActiveSubscriptions: Boolean
    expectedFundsFilter: ExpectedFundsFilter

    """
    Return only orders made from/to that opposite account (only works when orders are already filtered with a main account)
    """
    oppositeAccount: AccountReferenceInput

    """
    Return only orders made from/to these hosted accounts
    """
    hostedAccounts: [AccountReferenceInput]
  ): OrderCollection!
  expenses(
    direction: ExpenseDirection

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Reference of an account that is the payee of an expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of an account that is the payer of an expense
    """
    account: AccountReferenceInput

    """
    An alternative to filter by accounts, both cannot be used together
    """
    accounts: [AccountReferenceInput]

    """
    Return expenses only for this host
    """
    host: AccountReferenceInput

    """
    Return expenses only created by this INDIVIDUAL account
    """
    createdByAccount: AccountReferenceInput

    """
    Use this field to filter expenses on their statuses
    """
    status: [ExpenseStatusFilter]

    """
    Use this field to filter expenses on their type (RECEIPT/INVOICE)
    """
    type: ExpenseType
    types: [ExpenseType]

    """
    Only expenses that match these tags
    """
    tags: [String] @deprecated(reason: "2020-06-30: Please use tag (singular)")

    """
    Only expenses that match these tags
    """
    tag: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that use the given type as payout method
    """
    payoutMethodType: PayoutMethodType

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime

    """
    Only return expenses that were created after this date
    """
    dateTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    Whether to include expenses from children of the account (Events and Projects)
    """
    includeChildrenExpenses: Boolean! = false

    """
    Only return expenses that contains this custom data. Requires being an admin of the collective, payee or host.
    """
    customData: JSON

    """
    Filter expenses of type charges based on presence of receipts
    """
    chargeHasReceipts: Boolean

    """
    Filter expenses of type charges using these virtual cards
    """
    virtualCards: [VirtualCardReferenceInput]

    """
    Filter expenses by the last user-role who replied to them
    """
    lastCommentBy: [LastCommentBy]

    """
    Only return expenses that match these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): ExpenseCollection!
  settings: JSON!
  conversations(
    limit: Int! = 15
    offset: Int! = 0

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection!

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int! = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int! = 30): [TagStat]

  """
  The list of expense types supported by this account
  """
  supportedExpenseTypes: [ExpenseType!]!
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid. In most cases, admin only and scope: "expenses".
  """
  payoutMethods(
    """
    Whether to include archived payout methods
    """
    includeArchived: Boolean = false
  ): [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders. Admin or Host only. Scope: "orders".
  """
  paymentMethods(
    type: [PaymentMethodType]
    enumType: [PaymentMethodType] @deprecated(reason: "2021-08-20: use type instead from now")
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]

  """
  The list of payment methods for this account that are pending a client confirmation (3D Secure / SCA)
  """
  paymentMethodsWithPendingConfirmation: [PaymentMethod]

  """
  The list of connected accounts (Stripe, PayPal, etc ...). Admin only. Scope: "connectedAccounts".
  """
  connectedAccounts: [ConnectedAccount]

  """
  The list of applications created by this account. Admin only. Scope: "applications".
  """
  oAuthApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): OAuthApplicationCollection

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats

  """
  Whether this account can have changelog updates
  """
  canHaveChangelogUpdates: Boolean!

  """
  Updates published by the account. To see unpublished updates, you need to be an admin and have the scope "updates".
  """
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Only return published updates.
    """
    onlyPublishedUpdates: Boolean = false
    isDraft: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: UpdateChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!

  """
  Virtual Cards attached to the account. Admin only. Scope: "virtualCards".
  """
  virtualCards(
    limit: Int! = 100
    offset: Int! = 0
    state: String = null @deprecated(reason: "2023-11-06: Please use status.")
    status: [VirtualCardStatus]
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: DateTime = null
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): VirtualCardCollection

  """
  Virtual Cards Merchants used by the account. Admin only. Scope: "virtualCards".
  """
  virtualCardMerchants(limit: Int! = 100, offset: Int! = 0): AccountCollection
  childrenAccounts(
    limit: Int! = 100
    offset: Int! = 0
    isActive: Boolean
    accountType: [AccountType]
    searchTerm: String

    """
    Order of the results. Defaults to createdAt DESC.
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }
  ): AccountCollection!

  """
  Policies for the account. To see non-public policies you need to be admin and have the scope: "account".
  """
  policies: Policies!

  """
  List of activities that the logged-in user is subscribed for this collective
  """
  activitySubscriptions(channel: ActivityChannel): [ActivitySubscription]

  """
  Logged-in user permissions on an account
  """
  permissions: AccountPermissions!

  """
  Host application requests
  """
  hostApplicationRequests(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Filter applications by status
    """
    status: HostApplicationStatus
  ): HostApplicationCollection!
  feed(
    """
    Only returns activities before this date
    """
    dateTo: DateTime

    """
    Number of activities to retrieve
    """
    limit: Int

    """
    The classes of activity types to filter for
    """
    classes: [ActivityClassType]
  ): [Activity]

  """
  If created by duplication, the account from which this one was duplicated
  """
  duplicatedFromAccount: Account

  """
  If this account was duplicated, the accounts that were created from it
  """
  duplicatedAccounts(limit: Int! = 100, offset: Int! = 0): AccountCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  transactionGroups(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter transaction groups by the type of the primary transaction
    """
    type: TransactionType

    """
    Filter transaction groups by the kind of the primary transaction
    """
    kind: TransactionKind

    """
    Only return transaction groups that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transaction groups that were created before this date
    """
    dateTo: DateTime
  ): TransactionGroupCollection!

  """
  EXPERIMENTAL (this may change or be removed)
  """
  transactionReports(timeUnit: TimeUnit = MONTH, dateFrom: DateTime, dateTo: DateTime): TransactionReports
  webhooks(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    account: AccountReferenceInput!
  ): WebhookCollection!

  """
  Returns the Fiscal Host
  """
  host: Host

  """
  Describe how the host charges the collective
  """
  hostFeesStructure: HostFeeStructure

  """
  Fees percentage that the host takes for this collective
  """
  hostFeePercent(paymentMethodService: PaymentMethodService, paymentMethodType: PaymentMethodType): Float

  """
  Returns the Fiscal Host application
  """
  hostApplication: HostApplication

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Float!

  """
  Date of approval by the Fiscal Host.
  """
  approvedAt: DateTime

  """
  Date when the collective was last unfrozen by current Fiscal Host
  """
  unfrozenAt: DateTime

  """
  Returns whether it's approved by the Fiscal Host
  """
  isApproved: Boolean!

  """
  Returns agreements this account has with its host, or null if not enough permissions.
  """
  hostAgreements(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 30

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): AgreementCollection
  summary(
    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime
  ): HostedAccountSummary

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers(
    """
    The number of results to fetch
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  activeContributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    dateFrom: DateTime
    dateTo: DateTime
    includeActiveRecurringContributions: Boolean
  ): AccountCollection!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!
  contributionPolicy: String

  """
  Returns true if the remote user can start the process to resume contributions for account
  """
  canStartResumeContributionsProcess: Boolean!

  """
  Returns true if the account has started the process to resume contributions
  """
  hasResumeContributionsProcessStarted: Boolean!
}

"""
A collection of "Hosts"
"""
type HostCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [Host]
}

"""
This represents an Project account
"""
type Project implements Account & AccountWithHost & AccountWithContributions & AccountWithParent {
  id: String!
  legacyId: Int!

  """
  The slug identifying the account (ie: babel)
  """
  slug: String!
  type: AccountType!

  """
  Public name
  """
  name: String

  """
  Private, legal name. Used for expense receipts, taxes, etc. Scope: "account".
  """
  legalName: String
  description: String
  longDescription: String
  tags: [String]
  website: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  twitterHandle: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  githubHandle: String @deprecated(reason: "2022-06-03: Please use repositoryUrl")
  repositoryUrl: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  socialLinks: [SocialLink!]!

  """
  The currency of the account
  """
  currency: Currency!
  expensePolicy: String @deprecated(reason: "2024-11-04: Please use policies.EXPENSE_POLICIES")

  """
  Defines if the contributors wants to be incognito (name not displayed)
  """
  isIncognito: Boolean!
  imageUrl(height: Int, format: ImageFormat): String
  backgroundImageUrl(height: Int, format: ImageFormat): String

  """
  The time of creation
  """
  createdAt: DateTime
  updatedAt: DateTime

  """
  Date of unhosting by a given Fiscal Host.
  """
  unhostedAt(
    """
    The host account this collective was hosted by
    """
    host: AccountReferenceInput!
  ): DateTime

  """
  Returns whether this account is archived
  """
  isArchived: Boolean!

  """
  Whether this account is frozen
  """
  isFrozen: Boolean!

  """
  Returns whether it's active: can accept financial contributions and pay expenses.
  """
  isActive: Boolean!

  """
  Returns whether the account is setup to Host collectives.
  """
  isHost: Boolean!

  """
  Returns true if the remote user is an admin of this account
  """
  isAdmin: Boolean!
  parentAccount: Account @deprecated(reason: "2022-12-16: use parent on AccountWithParent instead")

  """
  Get all members (admins, members, backers, followers)
  """
  members(
    limit: Int! = 100
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]

    """
    Admin only. To filter on the email address of a member, useful to check if a member exists.
    """
    email: EmailAddress

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: ASC }
    includeInherited: Boolean = true
  ): MemberCollection!

  """
  [AUTHENTICATED] Returns the pending invitations
  """
  memberInvitations(
    """
    A reference to an account (usually Individual). Will return invitations sent to the account to join as a member
    """
    memberAccount: AccountReferenceInput

    """
    A reference to an account (usually Collective, Fund or Organization). Will return invitations sent to join this account as a member.
    """
    account: AccountReferenceInput

    """
    An array of Member roles to filter for
    """
    role: [MemberRole]
  ): [MemberInvitation]

  """
  The legal documents associated with this account
  """
  legalDocuments(
    """
    Filter by type
    """
    type: [LegalDocumentType]
  ): [LegalDocument]
  memberOf(
    limit: Int! = 150
    offset: Int! = 0
    role: [MemberRole]
    accountType: [AccountType]
    account: AccountReferenceInput

    """
    Filter on whether the account is a host or not
    """
    isHostAccount: Boolean

    """
    Filter on (un)approved collectives
    """
    isApproved: Boolean

    """
    Filter on archived collectives
    """
    isArchived: Boolean

    """
    Whether incognito profiles should be included in the result. Only works if requesting user is an admin of the account.
    """
    includeIncognito: Boolean = true

    """
    A term to search membership. Searches in collective tags, name, slug, members description and role.
    """
    searchTerm: String

    """
    Filters on the Host fees structure applied to this account
    """
    hostFeesStructure: HostFeeStructure

    """
    Order of the results
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }

    """
    Order the query by requested role order
    """
    orderByRoles: Boolean
  ): MemberOfCollection!

  """
  Returns the emails of the account. Individuals only have one, but organizations can have multiple emails.
  """
  emails: [EmailAddress!]
  transactions(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    The transaction type (DEBIT or CREDIT)
    """
    type: TransactionType

    """
    The payment method types. Can include `null` for transactions without a payment method
    """
    paymentMethodType: [PaymentMethodType]

    """
    The payment method services.
    """
    paymentMethodService: [PaymentMethodService]

    """
    Reference of the account(s) assigned to the main side of the transaction you want to EXCLUDE from the results
    """
    excludeAccount: [AccountReferenceInput]

    """
    Reference of the account assigned to the other side of the transaction (CREDIT -> sender, DEBIT -> recipient). Avoid, favor account instead.
    """
    fromAccount: AccountReferenceInput

    """
    Reference of the host accounting the transaction
    """
    host: AccountReferenceInput

    """
    NOT IMPLEMENTED. Only return transactions that match these tags.
    """
    tags: [String] @deprecated(reason: "2020-08-09: Was never implemented.")

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return transactions where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int @deprecated(reason: "2020-08-09: GraphQL v2 should not expose amounts as integer.")

    """
    Only return transactions that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transactions that were created before this date
    """
    dateTo: DateTime

    """
    Only return transactions that were cleared after this date
    """
    clearedFrom: DateTime

    """
    Only return transactions that were cleared before this date
    """
    clearedTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    If true, return transactions with debt attached, if false transactions without debt attached.
    """
    hasDebt: Boolean

    """
    Only return transactions with an Expense attached
    """
    hasExpense: Boolean

    """
    Only return transactions with this Expense attached
    """
    expense: ExpenseReferenceInput

    """
    Only return transactions that have an Expense of one of these expense types attached
    """
    expenseType: [ExpenseType]

    """
    Only return transactions with an Order attached
    """
    hasOrder: Boolean

    """
    Only return transactions for this order.
    """
    order: OrderReferenceInput

    """
    Used when filtering with the `host` argument to determine whether to include transactions on the fiscal host account (and children)
    """
    includeHost: Boolean! = true

    """
    Whether to include regular transactions from the account (turn false if you only want Incognito or Gift Card transactions)
    """
    includeRegularTransactions: Boolean! = true

    """
    If the account is a user and this field is true, contributions from the incognito profile will be included too (admins only)
    """
    includeIncognitoTransactions: Boolean! = false

    """
    Whether to include transactions from children (Events and Projects)
    """
    includeChildrenTransactions: Boolean! = false

    """
    Whether to include transactions from Gift Cards issued by the account.
    """
    includeGiftCardTransactions: Boolean! = false

    """
    Whether to include debt transactions
    """
    includeDebts: Boolean! = false

    """
    To filter by transaction kind
    """
    kind: [TransactionKind]

    """
    The transactions group to filter by
    """
    group: [String]
    virtualCard: [VirtualCardReferenceInput]

    """
    Only return transactions that are refunds (or not refunds if false)
    """
    isRefund: Boolean

    """
    Only return transactions that are associated with these external merchant IDs
    """
    merchantId: [String]

    """
    Only return transactions that are associated with these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payment method
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): TransactionCollection!
  orders(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    If account is a host, also include hosted accounts orders
    """
    includeHostedAccounts: Boolean

    """
    Include orders from children events/projects
    """
    includeChildrenAccounts: Boolean! = false

    """
    Only return orders that were paused by these roles. status must be set to PAUSED.
    """
    pausedBy: [OrderPausedBy]

    """
    Only return orders that were paid with this payment method. Must be an admin of the account owning the payment method.
    """
    paymentMethod: [PaymentMethodReferenceInput]

    """
    Only return orders that match these payment method services
    """
    paymentMethodService: [PaymentMethodService]

    """
    Only return orders that match these payment method types
    """
    paymentMethodType: [PaymentMethodType]

    """
    Whether to include incognito orders. Must be admin or root. Only with filter null or OUTGOING.
    """
    includeIncognito: Boolean = false

    """
    Account orders filter (INCOMING or OUTGOING)
    """
    filter: AccountOrdersFilter

    """
    Use this field to filter orders on their frequency (ONETIME, MONTHLY or YEARLY)
    """
    frequency: [ContributionFrequency]

    """
    Use this field to filter orders on their statuses
    """
    status: [OrderStatus]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return orders where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return orders where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return orders that were created after this date
    """
    dateFrom: DateTime

    """
    Only return orders that were created before this date
    """
    dateTo: DateTime

    """
    Only return pending orders that were expected after this date
    """
    expectedDateFrom: DateTime

    """
    Only return pending orders that were expected before this date
    """
    expectedDateTo: DateTime

    """
    Return orders that were charged after this date
    """
    chargedDateFrom: DateTime

    """
    Return orders that were charged before this date
    """
    chargedDateTo: DateTime

    """
    The term to search
    """
    searchTerm: String
    tierSlug: String @deprecated(reason: "2022-02-25: Should be replaced by a tier reference.")
    tier: [TierReferenceInput]

    """
    Only returns orders that have a subscription (monthly/yearly). Don't use together with frequency.
    """
    onlySubscriptions: Boolean

    """
    Same as onlySubscriptions, but returns only orders with active subscriptions
    """
    onlyActiveSubscriptions: Boolean
    expectedFundsFilter: ExpectedFundsFilter

    """
    Return only orders made from/to that opposite account (only works when orders are already filtered with a main account)
    """
    oppositeAccount: AccountReferenceInput

    """
    Return only orders made from/to these hosted accounts
    """
    hostedAccounts: [AccountReferenceInput]
  ): OrderCollection!
  expenses(
    direction: ExpenseDirection

    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Reference of an account that is the payee of an expense
    """
    fromAccount: AccountReferenceInput

    """
    Reference of an account that is the payer of an expense
    """
    account: AccountReferenceInput

    """
    An alternative to filter by accounts, both cannot be used together
    """
    accounts: [AccountReferenceInput]

    """
    Return expenses only for this host
    """
    host: AccountReferenceInput

    """
    Return expenses only created by this INDIVIDUAL account
    """
    createdByAccount: AccountReferenceInput

    """
    Use this field to filter expenses on their statuses
    """
    status: [ExpenseStatusFilter]

    """
    Use this field to filter expenses on their type (RECEIPT/INVOICE)
    """
    type: ExpenseType
    types: [ExpenseType]

    """
    Only expenses that match these tags
    """
    tags: [String] @deprecated(reason: "2020-06-30: Please use tag (singular)")

    """
    Only expenses that match these tags
    """
    tag: [String]

    """
    The order of results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Only return expenses where the amount is greater than or equal to this value (in cents)
    """
    minAmount: Int

    """
    Only return expenses where the amount is lower than or equal to this value (in cents)
    """
    maxAmount: Int

    """
    Only return expenses that use the given type as payout method
    """
    payoutMethodType: PayoutMethodType

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime

    """
    Only return expenses that were created after this date
    """
    dateTo: DateTime

    """
    The term to search
    """
    searchTerm: String

    """
    Whether to include expenses from children of the account (Events and Projects)
    """
    includeChildrenExpenses: Boolean! = false

    """
    Only return expenses that contains this custom data. Requires being an admin of the collective, payee or host.
    """
    customData: JSON

    """
    Filter expenses of type charges based on presence of receipts
    """
    chargeHasReceipts: Boolean

    """
    Filter expenses of type charges using these virtual cards
    """
    virtualCards: [VirtualCardReferenceInput]

    """
    Filter expenses by the last user-role who replied to them
    """
    lastCommentBy: [LastCommentBy]

    """
    Only return expenses that match these accounting categories
    """
    accountingCategory: [String]

    """
    Only return transactions that are associated with this payout method
    """
    payoutMethod: PayoutMethodReferenceInput
  ): ExpenseCollection!
  settings: JSON!
  conversations(
    limit: Int! = 15
    offset: Int! = 0

    """
    Only return conversations matching this tag
    """
    tag: String
  ): ConversationCollection!

  """
  Returns conversation's tags for collective sorted by popularity
  """
  conversationsTags(limit: Int! = 30): [TagStat]

  """
  Returns expense tags for collective sorted by popularity
  """
  expensesTags(limit: Int! = 30): [TagStat]

  """
  The list of expense types supported by this account
  """
  supportedExpenseTypes: [ExpenseType!]!
  transferwise: TransferWise

  """
  The list of payout methods that this collective can use to get paid. In most cases, admin only and scope: "expenses".
  """
  payoutMethods(
    """
    Whether to include archived payout methods
    """
    includeArchived: Boolean = false
  ): [PayoutMethod]

  """
  The list of payment methods that this collective can use to pay for Orders. Admin or Host only. Scope: "orders".
  """
  paymentMethods(
    type: [PaymentMethodType]
    enumType: [PaymentMethodType] @deprecated(reason: "2021-08-20: use type instead from now")
    service: [PaymentMethodService]

    """
    Whether to include expired payment methods. Payment methods expired since more than 6 months will never be returned.
    """
    includeExpired: Boolean
  ): [PaymentMethod]

  """
  The list of payment methods for this account that are pending a client confirmation (3D Secure / SCA)
  """
  paymentMethodsWithPendingConfirmation: [PaymentMethod]

  """
  The list of connected accounts (Stripe, PayPal, etc ...). Admin only. Scope: "connectedAccounts".
  """
  connectedAccounts: [ConnectedAccount]

  """
  The list of applications created by this account. Admin only. Scope: "applications".
  """
  oAuthApplications(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): OAuthApplicationCollection

  """
  The address associated to this account. This field is always public for collectives and events.
  """
  location: Location
  categories: [String]!
  stats: AccountStats

  """
  Whether this account can have changelog updates
  """
  canHaveChangelogUpdates: Boolean!

  """
  Updates published by the account. To see unpublished updates, you need to be an admin and have the scope "updates".
  """
  updates(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Only return published updates.
    """
    onlyPublishedUpdates: Boolean = false
    isDraft: Boolean
    onlyChangelogUpdates: Boolean
    orderBy: UpdateChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }
    searchTerm: String
  ): UpdateCollection!

  """
  Describes the features enabled and available for this account
  """
  features: CollectiveFeatures!

  """
  Virtual Cards attached to the account. Admin only. Scope: "virtualCards".
  """
  virtualCards(
    limit: Int! = 100
    offset: Int! = 0
    state: String = null @deprecated(reason: "2023-11-06: Please use status.")
    status: [VirtualCardStatus]
    merchantAccount: AccountReferenceInput = null

    """
    Only return expenses that were created after this date
    """
    dateFrom: DateTime = null

    """
    Only return expenses that were created before this date
    """
    dateTo: DateTime = null
    orderBy: ChronologicalOrderInput = { field: CREATED_AT, direction: DESC }
  ): VirtualCardCollection

  """
  Virtual Cards Merchants used by the account. Admin only. Scope: "virtualCards".
  """
  virtualCardMerchants(limit: Int! = 100, offset: Int! = 0): AccountCollection
  childrenAccounts(
    limit: Int! = 100
    offset: Int! = 0
    isActive: Boolean
    accountType: [AccountType]
    searchTerm: String

    """
    Order of the results. Defaults to createdAt DESC.
    """
    orderBy: OrderByInput! = { field: CREATED_AT, direction: DESC }
  ): AccountCollection!

  """
  Policies for the account. To see non-public policies you need to be admin and have the scope: "account".
  """
  policies: Policies!

  """
  List of activities that the logged-in user is subscribed for this collective
  """
  activitySubscriptions(channel: ActivityChannel): [ActivitySubscription]

  """
  Logged-in user permissions on an account
  """
  permissions: AccountPermissions!

  """
  Host application requests
  """
  hostApplicationRequests(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Order of the results
    """
    orderBy: ChronologicalOrderInput! = { field: CREATED_AT, direction: DESC }

    """
    Filter applications by status
    """
    status: HostApplicationStatus
  ): HostApplicationCollection!
  feed(
    """
    Only returns activities before this date
    """
    dateTo: DateTime

    """
    Number of activities to retrieve
    """
    limit: Int

    """
    The classes of activity types to filter for
    """
    classes: [ActivityClassType]
  ): [Activity]

  """
  If created by duplication, the account from which this one was duplicated
  """
  duplicatedFromAccount: Account

  """
  If this account was duplicated, the accounts that were created from it
  """
  duplicatedAccounts(limit: Int! = 100, offset: Int! = 0): AccountCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  transactionGroups(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0

    """
    Filter transaction groups by the type of the primary transaction
    """
    type: TransactionType

    """
    Filter transaction groups by the kind of the primary transaction
    """
    kind: TransactionKind

    """
    Only return transaction groups that were created after this date
    """
    dateFrom: DateTime

    """
    Only return transaction groups that were created before this date
    """
    dateTo: DateTime
  ): TransactionGroupCollection!

  """
  EXPERIMENTAL (this may change or be removed)
  """
  transactionReports(timeUnit: TimeUnit = MONTH, dateFrom: DateTime, dateTo: DateTime): TransactionReports
  webhooks(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    account: AccountReferenceInput!
  ): WebhookCollection!

  """
  Returns the Fiscal Host
  """
  host: Host

  """
  Describe how the host charges the collective
  """
  hostFeesStructure: HostFeeStructure

  """
  Fees percentage that the host takes for this collective
  """
  hostFeePercent(paymentMethodService: PaymentMethodService, paymentMethodType: PaymentMethodType): Float

  """
  Returns the Fiscal Host application
  """
  hostApplication: HostApplication

  """
  How much platform fees are charged for this account
  """
  platformFeePercent: Float!

  """
  Date of approval by the Fiscal Host.
  """
  approvedAt: DateTime

  """
  Date when the collective was last unfrozen by current Fiscal Host
  """
  unfrozenAt: DateTime

  """
  Returns whether it's approved by the Fiscal Host
  """
  isApproved: Boolean!

  """
  Returns agreements this account has with its host, or null if not enough permissions.
  """
  hostAgreements(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 30

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): AgreementCollection
  summary(
    """
    Calculate amount after this date
    """
    dateFrom: DateTime

    """
    Calculate amount before this date
    """
    dateTo: DateTime
  ): HostedAccountSummary

  """
  Number of unique financial contributors.
  """
  totalFinancialContributors(
    """
    Type of account (COLLECTIVE/EVENT/ORGANIZATION/INDIVIDUAL)
    """
    accountType: AccountType
  ): Int!
  tiers(
    """
    The number of results to fetch
    """
    limit: Int! = 100

    """
    The offset to use to fetch
    """
    offset: Int! = 0
  ): TierCollection!

  """
  All the persons and entities that contribute to this account
  """
  contributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    roles: [MemberRole]
  ): ContributorCollection!

  """
  [!] Warning: this query is currently in beta and the API might change
  """
  activeContributors(
    """
    The number of results to fetch (default 10, max 1000)
    """
    limit: Int! = 10

    """
    The offset to use to fetch
    """
    offset: Int! = 0
    dateFrom: DateTime
    dateTo: DateTime
    includeActiveRecurringContributions: Boolean
  ): AccountCollection!

  """
  Returns true if a custom contribution to Open Collective can be submitted for contributions made to this account
  """
  platformContributionAvailable: Boolean!
  contributionPolicy: String

  """
  Returns true if the remote user can start the process to resume contributions for account
  """
  canStartResumeContributionsProcess: Boolean!

  """
  Returns true if the account has started the process to resume contributions
  """
  hasResumeContributionsProcessStarted: Boolean!

  """
  The Account parenting this account
  """
  parent: Account
}

type SearchResponse {
  """
  Search results
  """
  results: SearchResults!
}

"""
Search results for all types
"""
type SearchResults {
  """
  Search results for Accounts
  """
  accounts(
    """
    Type of account
    """
    type: AccountType

    """
    Whether the account is a host or not
    """
    isHost: Boolean

    """
    Tags to filter the accounts
    """
    tags: [String]
  ): SearchResultsAccounts

  """
  Search results for Comments
  """
  comments: SearchResultsComments

  """
  Search results for Expenses
  """
  expenses: SearchResultsExpenses

  """
  Search results for HostApplications
  """
  hostApplications: SearchResultsHostApplications

  """
  Search results for Orders
  """
  orders: SearchResultsOrders

  """
  Search results for Tiers
  """
  tiers: SearchResultsTiers

  """
  Search results for Transactions
  """
  transactions: SearchResultsTransactions

  """
  Search results for Updates
  """
  updates: SearchResultsUpdates
}

type SearchResultsAccounts {
  collection: AccountCollection!
  maxScore: Float!

  """
  Details about the matches typed as: { [id]: { score: number, fields: { [field]: [highlight] } } }
  """
  highlights: JSONObject
}

type SearchResultsComments {
  collection: CommentCollection!
  maxScore: Float!

  """
  Details about the matches typed as: { [id]: { score: number, fields: { [field]: [highlight] } } }
  """
  highlights: JSONObject
}

type SearchResultsExpenses {
  collection: ExpenseCollection!
  maxScore: Float!

  """
  Details about the matches typed as: { [id]: { score: number, fields: { [field]: [highlight] } } }
  """
  highlights: JSONObject
}

type SearchResultsHostApplications {
  collection: HostApplicationCollection!
  maxScore: Float!

  """
  Details about the matches typed as: { [id]: { score: number, fields: { [field]: [highlight] } } }
  """
  highlights: JSONObject
}

type SearchResultsOrders {
  collection: OrderCollection!
  maxScore: Float!

  """
  Details about the matches typed as: { [id]: { score: number, fields: { [field]: [highlight] } } }
  """
  highlights: JSONObject
}

type SearchResultsTiers {
  collection: TierCollection!
  maxScore: Float!

  """
  Details about the matches typed as: { [id]: { score: number, fields: { [field]: [highlight] } } }
  """
  highlights: JSONObject
}

type SearchResultsTransactions {
  collection: TransactionCollection!
  maxScore: Float!

  """
  Details about the matches typed as: { [id]: { score: number, fields: { [field]: [highlight] } } }
  """
  highlights: JSONObject
}

type SearchResultsUpdates {
  collection: UpdateCollection!
  maxScore: Float!

  """
  Details about the matches typed as: { [id]: { score: number, fields: { [field]: [highlight] } } }
  """
  highlights: JSONObject
}

input TransactionReferenceInput {
  """
  The public id identifying the transaction (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the transaction (ie: 580)
  """
  legacyId: Int
}

"""
A PayPal plan to associate with a contribution
"""
type PaypalPlan {
  id: String!
}

input VirtualCardRequestReferenceInput {
  id: String
  legacyId: Int
}

"""
A collection of "VirtualCardRequest"
"""
type VirtualCardRequestCollection implements Collection {
  offset: Int
  limit: Int
  totalCount: Int
  nodes: [VirtualCardRequest!]
}

input HostApplicationReferenceInput {
  """
  The public id identifying the host application (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String
}

"""
This is the root mutation
"""
type Mutation {
  """
  Create a Collective. Scope: "account".
  """
  createCollective(
    """
    Information about the collective to create (name, slug, description, tags, ...)
    """
    collective: CollectiveCreateInput!

    """
    Reference to the host to apply on creation.
    """
    host: AccountReferenceInput

    """
    User information to create along with the collective
    """
    user: IndividualCreateInput

    """
    A message to attach for the host to review the application
    """
    message: String

    """
    Further information about collective applying to host
    """
    applicationData: JSON

    """
    Additional data for the collective creation. This argument has no effect in production
    """
    testPayload: JSON

    """
    Create a Collective without a default admin (authenticated user or user)
    """
    skipDefaultAdmin: Boolean = false

    """
    List of members to invite on Collective creation.
    """
    inviteMembers: [InviteMemberInput]

    """
    Marks the collective as approved directly. Only available in test/CI environments.
    """
    skipApprovalTestOnly: Boolean = false
  ): Collective

  """
  Create an Event. Scope: "account".
  """
  createEvent(
    """
    Information about the Event to create (name, slug, description, tags, settings)
    """
    event: EventCreateInput!

    """
    Reference to the parent Account creating the Event.
    """
    account: AccountReferenceInput!
  ): Event

  """
  Create a Fund. Scope: "account".
  """
  createFund(
    """
    Information about the collective to create (name, slug, description, tags, ...)
    """
    fund: FundCreateInput!

    """
    Reference to the host to apply on creation.
    """
    host: AccountReferenceInput
  ): Fund

  """
  Create an Organization. Scope: "account".
  """
  createOrganization(
    """
    Information about the organization to create (name, slug, description, website, ...)
    """
    organization: OrganizationCreateInput!

    """
    List of members to invite on Organization creation.
    """
    inviteMembers: [InviteMemberInput]
  ): Organization

  """
  Create a Project. Scope: "account".
  """
  createProject(
    """
    Information about the Project to create (name, slug, description, tags, settings)
    """
    project: ProjectCreateInput!

    """
    Reference to the parent Account creating the Project.
    """
    parent: AccountReferenceInput

    """
    Set to true to disable contributions to this project. Host admins will still be able to add funds.
    """
    disableContributions: Boolean! = false

    """
    Set to true to disable expenses for this project.
    """
    disableExpenses: Boolean! = false
  ): Project

  """
  Duplicate an account. Scope: "account".
  """
  duplicateAccount(
    """
    Account to duplicate
    """
    account: AccountReferenceInput!

    """
    The new slug for the duplicated account. Defaults to an autogenerated slug
    """
    newSlug: String

    """
    The new name for the duplicated account. Defaults to the same as the original account
    """
    newName: String

    """
    Use this if you want to rename the original account
    """
    oldName: String

    """
    Which data should be copied when duplicating the account
    """
    include: DuplicateAccountDataTypeInput

    """
    Whether to mark both accounts as connected
    """
    connect: Boolean! = false
  ): Account!

  """
  Edit the settings for the given account. Scope: "account" or "host".
  """
  editAccountSetting(
    """
    Account where the settings will be updated
    """
    account: AccountReferenceInput!

    """
    The key that you want to edit in settings
    """
    key: AccountSettingsKey!

    """
    The value to set for this key
    """
    value: JSON!
  ): Account!

  """
  An endpoint for hosts to edit the fees structure of their hosted accounts. Scope: "host".
  """
  editAccountFeeStructure(
    """
    Account where the settings will be updated
    """
    account: AccountReferenceInput!

    """
    The host fee percent to apply to this account
    """
    hostFeePercent: Float!

    """
    If using a custom fee, set this to true
    """
    isCustomFee: Boolean!
  ): Account!

  """
  An endpoint for hosts to edit the freeze status of their hosted accounts. Scope: "host".
  """
  editAccountFreezeStatus(
    """
    Account to freeze
    """
    account: AccountReferenceInput!
    action: AccountFreezeAction!

    """
    Message to send by email to the admins of the account
    """
    message: String @deprecated(reason: "2024-08-23: Use messageForAccountAdmins instead")

    """
    Message to send by email to the admins of the account
    """
    messageForAccountAdmins: String

    """
    Message to send by email to the contributors when pausing their contributions (with PayPal) or unpausing
    """
    messageForContributors: String

    """
    Whether to pause recurring contributions
    """
    pauseExistingRecurringContributions: Boolean! = false
  ): Account!

  """
  Create WebAuthn public key registration request options
  """
  createWebAuthnRegistrationOptions(
    """
    Account that will create a WebAuthn registration
    """
    account: AccountReferenceInput!
  ): JSON!

  """
  Add 2FA to the Individual if it does not have it. Scope: "account".
  """
  addTwoFactorAuthTokenToIndividual(
    """
    Individual that will have 2FA added to it
    """
    account: AccountReferenceInput!

    """
    The two factor method to add, defaults to TOTP
    """
    type: TwoFactorMethod

    """
    The generated secret to save to the Individual
    """
    token: String!
  ): AddTwoFactorAuthTokenToIndividualResponse!

  """
  Remove 2FA from the Individual if it has been enabled. Scope: "account".
  """
  removeTwoFactorAuthTokenFromIndividual(
    """
    Method to remove from this account
    """
    userTwoFactorMethod: UserTwoFactorMethodReferenceInput

    """
    Account that will have 2FA removed from it
    """
    account: AccountReferenceInput!

    """
    The two factor method to remove. Removes all if empty
    """
    type: TwoFactorMethod
      @deprecated(reason: "2023-08-01: Use the two factor method reference to specify method to remove")

    """
    The 6-digit 2FA code
    """
    code: String @deprecated(reason: "2023-08-01: 2FA code to validate this action must be set via 2FA header")
  ): Individual!

  """
  Edit 2FA method
  """
  editTwoFactorAuthenticationMethod(
    """
    Method to edit
    """
    userTwoFactorMethod: UserTwoFactorMethodReferenceInput!

    """
    New name for the method
    """
    name: String
  ): Individual!

  """
  Edit key properties of an account. Scope: "account".
  """
  editAccount(
    """
    Account to edit.
    """
    account: AccountUpdateInput!
  ): Host!

  """
  Adds or removes a policy on a given account. Scope: "account".
  """
  setPolicies(
    """
    Account where the policies are being set
    """
    account: AccountReferenceInput!

    """
    The policy to be added
    """
    policies: PoliciesInput!
  ): Account!

  """
  Adds or removes a policy on a given account. Scope: "account".
  """
  deleteAccount(
    """
    Reference to the Account to be deleted.
    """
    account: AccountReferenceInput!
  ): Account

  """
  Send a message to an account. Scope: "account"
  """
  sendMessage(
    """
    Reference to the Account to send message to.
    """
    account: AccountReferenceInput!

    """
    Message to send to the account.
    """
    message: NonEmptyString!
    subject: String
  ): SendMessageResult

  """
  Regenerate two factor authentication recovery codes
  """
  regenerateRecoveryCodes: [String!]

  """
  Edit an accounting category. Returns the account with the updated categories.
  """
  editAccountingCategories(
    """
    The host to edit accounting categories for
    """
    account: AccountReferenceInput!

    """
    The list of categories to edit
    """
    categories: [AccountingCategoryInput!]!
  ): Account!

  """
  Add funds to the given account. Scope: "host".
  """
  addFunds(
    """
    The account that will be used as the source of the funds
    """
    fromAccount: AccountReferenceInput!

    """
    The account that will receive the funds
    """
    account: AccountReferenceInput!

    """
    The tier to which the funds will be added
    """
    tier: TierReferenceInput

    """
    The total amount of the order, including fees and taxes
    """
    amount: AmountInput!

    """
    The payment processor fee amount
    """
    paymentProcessorFee: AmountInput

    """
    The host fee percent to apply to the order, as a float between 0 and 100
    """
    hostFeePercent: Float

    """
    A short description of the contribution
    """
    description: String!

    """
    A private note for the host
    """
    memo: String

    """
    The date at which the order was processed
    """
    processedAt: DateTime

    """
    The invoice template to use for this order
    """
    invoiceTemplate: String

    """
    The tax to apply to the order
    """
    tax: TaxInput

    """
    The accounting category of this order
    """
    accountingCategory: AccountingCategoryReferenceInput

    """
    The transaction import row to associate with this order
    """
    transactionsImportRow: TransactionsImportRowReferenceInput
  ): Order!

  """
  Add funds to the given account. Scope: "host".
  """
  editAddedFunds(
    """
    The order to edit
    """
    order: OrderReferenceInput!

    """
    The account that will be used as the source of the funds
    """
    fromAccount: AccountReferenceInput!

    """
    The account that will receive the funds
    """
    account: AccountReferenceInput!

    """
    The tier to which the funds will be added
    """
    tier: TierReferenceInput

    """
    The total amount of the order, including fees and taxes
    """
    amount: AmountInput!

    """
    The payment processor fee amount
    """
    paymentProcessorFee: AmountInput

    """
    The host fee percent to apply to the order, as a float between 0 and 100
    """
    hostFeePercent: Float

    """
    A short description of the contribution
    """
    description: String!

    """
    A private note for the host
    """
    memo: String

    """
    The date at which the order was processed
    """
    processedAt: DateTime

    """
    The invoice template to use for this order
    """
    invoiceTemplate: String

    """
    The tax to apply to the order
    """
    tax: TaxInput

    """
    The accounting category of this order
    """
    accountingCategory: AccountingCategoryReferenceInput
  ): Order!
  createApplication(application: ApplicationCreateInput!): Application
  updateApplication(application: ApplicationUpdateInput!): Application
  deleteApplication(application: ApplicationReferenceInput!): Application

  """
  Edit a comment. Scope: "conversations", "expenses" or "updates".
  """
  editComment(comment: CommentUpdateInput!): Comment
  deleteComment(id: String!): Comment

  """
  Create a comment. Scope: "conversations", "expenses" or "updates".
  """
  createComment(comment: CommentCreateInput!): Comment

  """
  Connect external account to Open Collective Account. Scope: "connectedAccounts".
  """
  createConnectedAccount(
    """
    Connected Account data
    """
    connectedAccount: ConnectedAccountCreateInput!

    """
    Account where the external account will be connected
    """
    account: AccountReferenceInput!
  ): ConnectedAccount

  """
  Delete ConnectedAccount. Scope: "connectedAccounts".
  """
  deleteConnectedAccount(
    """
    ConnectedAccount reference containing either id or legacyId
    """
    connectedAccount: ConnectedAccountReferenceInput!
  ): ConnectedAccount

  """
  Create a conversation. Scope: "conversations".
  """
  createConversation(
    """
    Conversation's title
    """
    title: String!

    """
    The body of the conversation initial comment
    """
    html: String!

    """
    ID of the Collective where the conversation will be created
    """
    CollectiveId: String @deprecated(reason: "2023-07-18: Please use `account` instead")

    """
    Account where the conversation will be created
    """
    account: AccountReferenceInput

    """
    A list of tags for this conversation
    """
    tags: [String]
  ): Conversation

  """
  Edit a conversation. Scope: "conversations".
  """
  editConversation(
    """
    Conversation's id
    """
    id: String!

    """
    Conversation's title
    """
    title: String!

    """
    A list of tags for this conversation
    """
    tags: [String]
  ): Conversation

  """
  Returns true if user is following, false otherwise. Must be authenticated. Scope: "conversations".
  """
  followConversation(
    """
    Conversation's id
    """
    id: String!

    """
    Set this to false to unfollow the conversation
    """
    isActive: Boolean = true
  ): Boolean

  """
  Add an emoji reaction. Scope: "conversations", "expenses" or "updates".
  """
  addEmojiReaction(
    """
    The emoji associated with the reaction
    """
    emoji: String!

    """
    A unique identifier for the comment id associated with this reaction
    """
    comment: CommentReferenceInput

    """
    A unique identifier for the update id associated with this reaction
    """
    update: UpdateReferenceInput
  ): EmojiReactionResponse!

  """
  Remove an emoji reaction. Scope: "conversations", "expenses" or "updates".
  """
  removeEmojiReaction(
    comment: CommentReferenceInput
    update: UpdateReferenceInput
    emoji: String!
  ): EmojiReactionResponse!

  """
  Submit an expense to a collective. Scope: "expenses".
  """
  createExpense(
    """
    Expense data
    """
    expense: ExpenseCreateInput!

    """
    Account where the expense will be created
    """
    account: AccountReferenceInput!

    """
    Recurring Expense information
    """
    recurring: RecurringExpenseInput

    """
    If the expense was imported, this is the reference to the row
    """
    transactionsImportRow: TransactionsImportRowReferenceInput

    """
    A optional private comment to add to the created expense
    """
    privateComment: String
  ): Expense!

  """
  To update an existing expense
  """
  editExpense(
    """
    Expense data
    """
    expense: ExpenseUpdateInput!

    """
    Expense draft key if invited to submit expense. Scope: "expenses".
    """
    draftKey: String
  ): Expense!

  """
  Delete an expense. Only work if the expense is rejected - please check permissions.canDelete. Scope: "expenses".
  """
  deleteExpense(
    """
    Reference of the expense to delete
    """
    expense: ExpenseReferenceInput!
  ): Expense!

  """
  Process the expense with the given action. Scope: "expenses".
  """
  processExpense(
    """
    Reference of the expense to process
    """
    expense: ExpenseReferenceInput!

    """
    Expense draft key if its action by invited user without account
    """
    draftKey: String

    """
    The action to trigger
    """
    action: ExpenseProcessAction!

    """
    Message to be attached to the action activity.
    """
    message: String

    """
    If action is related to a payment, this object used for the payment parameters
    """
    paymentParams: ProcessExpensePaymentParams
  ): Expense!

  """
  Persist an Expense as a draft and invite someone to edit and submit it. Scope: "expenses".
  """
  draftExpenseAndInviteUser(
    """
    Expense data
    """
    expense: ExpenseInviteDraftInput!

    """
    Account where the expense will be created
    """
    account: AccountReferenceInput!

    """
    Skip sending the invite email
    """
    skipInvite: Boolean! = false

    """
    Fields that the user should not be able to edit when submitting the draft
    """
    lockedFields: [ExpenseLockableFields]
  ): Expense!

  """
  To re-send the invitation to complete a draft expense. Scope: "expenses".
  """
  resendDraftExpenseInvite(
    """
    Reference of the expense to process
    """
    expense: ExpenseReferenceInput!
  ): Expense!

  """
  Sends an email for guest to confirm their emails and create their Open Collective account
  """
  sendGuestConfirmationEmail(
    """
    The email to validate
    """
    email: EmailAddress!
  ): Boolean!

  """
  Mark an account as confirmed
  """
  confirmGuestAccount(
    """
    The email to confirm
    """
    email: EmailAddress!

    """
    The key that you want to edit in settings
    """
    emailConfirmationToken: String!
  ): ConfirmGuestAccountResponse!

  """
  Apply to an host with a collective. Scope: "account".
  """
  applyToHost(
    """
    Account applying to the host.
    """
    collective: AccountReferenceInput!

    """
    Host to apply to.
    """
    host: AccountReferenceInput!

    """
    A message to attach for the host to review the application
    """
    message: String

    """
    Further information about collective applying to host
    """
    applicationData: JSON

    """
    A list of members to invite when applying to the host
    """
    inviteMembers: [InviteMemberInput]
  ): Account!

  """
  Reply to a host application. Scope: "host".
  """
  processHostApplication(
    """
    The account that applied to the host
    """
    account: AccountReferenceInput @deprecated(reason: "2024-07-24: Please use hostApplication")

    """
    The host application
    """
    hostApplication: HostApplicationReferenceInput

    """
    The host concerned by the application
    """
    host: AccountReferenceInput @deprecated(reason: "2024-07-24: Please use hostApplication")

    """
    What to do with the application
    """
    action: ProcessHostApplicationAction!

    """
    A message to attach as a reason for the action
    """
    message: String
  ): ProcessHostApplicationResponse!

  """
  Removes the host for an account
  """
  removeHost(
    """
    The account to unhost
    """
    account: AccountReferenceInput!

    """
    An optional HTML message to provide additional context to the action
    """
    message: String

    """
    An optional HTML message to provide additional context for contributors
    """
    messageForContributors: String

    """
    If true, contributions will be paused rather than canceled
    """
    pauseContributions: Boolean! = true
  ): Account!

  """
  Update the time which the user viewed the changelog updates. Scope: "account".
  """
  setChangelogViewDate(changelogViewDate: DateTime!): Individual!

  """
  Update newsletter opt-in preference. Scope: "account".
  """
  setNewsletterOptIn(newsletterOptIn: Boolean!): Individual!

  """
  Set password to Individual. Scope: "account". 2FA.
  """
  setPassword(
    """
    The password to set.
    """
    password: String!

    """
    The current password (if any) to confirm password change.
    """
    currentPassword: String
  ): SetPasswordResponse!

  """
  Confirm email for Individual. Scope: "account".
  """
  confirmEmail(
    """
    The token to confirm the email.
    """
    token: NonEmptyString!
  ): IndividualConfirmEmailResponse!

  """
  Submit a legal document
  """
  submitLegalDocument(
    """
    The account the legal document is for
    """
    account: AccountReferenceInput!

    """
    The type of legal document
    """
    type: LegalDocumentType!

    """
    The form data for the legal document. Will be validated against the schema for the document type and encrypted.
    """
    formData: JSON!
  ): LegalDocument!

  """
  Edit the status of a legal document
  """
  editLegalDocumentStatus(
    """
    The ID of the legal document
    """
    id: String!

    """
    The new status of the legal document
    """
    status: LegalDocumentRequestStatus!

    """
    The host of the legal document
    """
    host: AccountReferenceInput!

    """
    A message to explain the change in status. Will be sent to the legal document submitter
    """
    message: String

    """
    The new document link for the legal document. Must pass status=RECEIVED.
    """
    file: Upload
  ): LegalDocument!

  """
  Invite a new member to the Collective. Scope: "account".
  """
  inviteMember(
    """
    Reference to an account for the invitee
    """
    memberAccount: AccountReferenceInput!

    """
    Reference to an account for the inviting Collective
    """
    account: AccountReferenceInput!

    """
    Role of the invitee
    """
    role: MemberRole!
    description: String
    since: DateTime
  ): MemberInvitation!

  """
  Edit an existing member invitation of the Collective. Scope: "account".
  """
  editMemberInvitation(
    """
    Reference to an account for the member to edit.
    """
    memberAccount: AccountReferenceInput!

    """
    Reference to an account for the Collective
    """
    account: AccountReferenceInput!

    """
    Role of member
    """
    role: MemberRole
    description: String
    since: DateTime
  ): MemberInvitation

  """
  Endpoint to accept or reject an invitation to become a member. Scope: "account".
  """
  replyToMemberInvitation(
    """
    Reference to the invitation
    """
    invitation: MemberInvitationReferenceInput!

    """
    Whether this invitation should be accepted or declined
    """
    accept: Boolean!
  ): Boolean!

  """
  Follows a given Collective. Scope: "account"
  """
  followAccount(
    """
    user will follow this account
    """
    account: AccountReferenceInput!
  ): FollowAccountResult!

  """
  Unfollows a given Collective. Scope: "account"
  """
  unfollowAccount(
    """
    account to unfollow
    """
    account: AccountReferenceInput!
  ): UnfollowAccountResult!

  """
  Edit the public message for the given Member of a Collective. Scope: "account".
  """
  editPublicMessage(
    """
    Reference to an account for the donating Collective
    """
    fromAccount: AccountReferenceInput!

    """
    Reference to an account for the receiving Collective
    """
    toAccount: AccountReferenceInput!

    """
    New public message
    """
    message: String
  ): Member!

  """
  [Root only] Create a member entry directly. For non-root users, use `inviteMember`
  """
  createMember(
    """
    Reference to an account for the member
    """
    memberAccount: AccountReferenceInput!

    """
    memberAccount will become a member of this account
    """
    account: AccountReferenceInput!

    """
    Role of the member
    """
    role: MemberRole!
    description: String
    since: DateTime
  ): Member!

  """
  Edit an existing member of the Collective. Scope: "account".
  """
  editMember(
    """
    Reference to an account for the member to edit.
    """
    memberAccount: AccountReferenceInput!

    """
    Reference to an account for the Collective
    """
    account: AccountReferenceInput!

    """
    Role of member
    """
    role: MemberRole
    description: String
    since: DateTime
  ): Member!

  """
  Remove a member from the Collective. Scope: "account".
  """
  removeMember(
    """
    Reference to an account of member to remove
    """
    memberAccount: AccountReferenceInput!

    """
    Reference to the Collective account
    """
    account: AccountReferenceInput!

    """
    Role of member
    """
    role: MemberRole!
    isInvitation: Boolean
  ): Boolean

  """
  Revoke an OAuth authorization. Scope: "account".
  """
  revokeOAuthAuthorization(
    """
    Reference of the OAuth Authorization
    """
    oAuthAuthorization: OAuthAuthorizationReferenceInput!
  ): OAuthAuthorization!

  """
  To submit a new order. Scope: "orders".
  """
  createOrder(order: OrderCreateInput!): OrderWithPayment!

  """
  Cancel an order. Scope: "orders".
  """
  cancelOrder(
    """
    Object matching the OrderReferenceInput (id)
    """
    order: OrderReferenceInput!

    """
    Reason for cancelling subscription
    """
    reason: String

    """
    Category for cancelling subscription
    """
    reasonCode: String
  ): Order

  """
  Update an Order's amount, tier, or payment method. Scope: "orders".
  """
  updateOrder(
    """
    Reference to the Order to update
    """
    order: OrderReferenceInput!

    """
    Reference to a Payment Method to update the order with
    """
    paymentMethod: PaymentMethodReferenceInput

    """
    To update the order with a PayPal subscription
    """
    paypalSubscriptionId: String

    """
    Reference to a Tier to update the order with
    """
    tier: TierReferenceInput

    """
    An Amount to update the order to
    """
    amount: AmountInput
  ): Order

  """
  Update the accounting category of an order. Scope: "orders".
  """
  updateOrderAccountingCategory(
    """
    Reference to the Order to update
    """
    order: OrderReferenceInput!

    """
    Reference to the Accounting Category to update the order with
    """
    accountingCategory: AccountingCategoryReferenceInput
  ): Order!

  """
  Confirm an order (strong customer authentication). Scope: "orders".
  """
  confirmOrder(
    order: OrderReferenceInput!

    """
    If the order was made as a guest, you can use this field to authenticate
    """
    guestToken: String
  ): OrderWithPayment!

  """
  A mutation for the host to approve or reject an order. Scope: "orders".
  """
  processPendingOrder(
    """
    The order to process
    """
    order: OrderUpdateInput!

    """
    The action to take on the order
    """
    action: ProcessOrderAction!
  ): Order!

  """
  [Root only] A mutation to move orders from one account to another
  """
  moveOrders(
    """
    The orders to move
    """
    orders: [OrderReferenceInput!]!

    """
    The account to move the orders to. Set to null to keep existing
    """
    fromAccount: AccountReferenceInput

    """
    The tier to move the orders to. Set to null to keep existing. Pass { id: "custom" } to reference the custom tier (/donate)
    """
    tier: TierReferenceInput

    """
    If true, the orders will be moved to the incognito account of "fromAccount"
    """
    makeIncognito: Boolean
  ): [Order]!

  """
  Creates a Stripe payment intent
  """
  createPaymentIntent(paymentIntent: PaymentIntentInput!, guestInfo: GuestInfoInput): PaymentIntent!

  """
  To submit a new order. Scope: "orders".
  """
  createPendingOrder(order: PendingOrderCreateInput!): Order!

  """
  To edit a pending order. Scope: "orders".
  """
  editPendingOrder(order: PendingOrderEditInput!): Order!

  """
  Starts or resumes the process of notifying contributors for their PAUSED contributions
  """
  startResumeOrdersProcess(
    """
    The account to start/resume the process for
    """
    account: AccountReferenceInput!

    """
    An optional message to send to contributors
    """
    message: String
  ): Account!

  """
  Add a new payment method to be used with an Order. Scope: "orders".
  """
  addCreditCard(
    """
    The credit card info
    """
    creditCardInfo: CreditCardCreateInput!

    """
    Name associated to this credit card
    """
    name: String!

    """
    Whether this credit card should be saved for future payments
    """
    isSavedForLater: Boolean = true

    """
    Account to add the credit card to
    """
    account: AccountReferenceInput!
  ): CreditCardWithStripeError!

  """
  Confirm a credit card is ready for use after strong customer authentication. Scope: "orders".
  """
  confirmCreditCard(paymentMethod: PaymentMethodReferenceInput!): CreditCardWithStripeError!

  """
  Creates a Stripe setup intent
  """
  createSetupIntent(host: AccountReferenceInput!, account: AccountReferenceInput!): SetupIntent!

  """
  Adds a Stripe payment method
  """
  addStripePaymentMethodFromSetupIntent(setupIntent: SetupIntentInput!, account: AccountReferenceInput!): PaymentMethod!

  """
  Remove a payment method
  """
  removePaymentMethod(
    paymentMethod: PaymentMethodReferenceInput!

    """
    Whether to cancel active subscriptions using this payment method
    """
    cancelActiveSubscriptions: Boolean
  ): PaymentMethod!

  """
  Create a new Payout Method to get paid through the platform. Scope: "expenses".
  """
  createPayoutMethod(
    """
    Payout Method data
    """
    payoutMethod: PayoutMethodInput!

    """
    Account where the payout method will be associated
    """
    account: AccountReferenceInput!
  ): PayoutMethod

  """
  Remove the given payout method. Scope: "expenses".
  """
  removePayoutMethod(payoutMethodId: String!): PayoutMethod!

  """
  Restore the given payout method. Scope: "expenses".
  """
  restorePayoutMethod(
    """
    Payout Method reference
    """
    payoutMethod: PayoutMethodReferenceInput!
  ): PayoutMethod!
  editPayoutMethod(
    """
    Payout Method reference
    """
    payoutMethod: PayoutMethodInput!
  ): PayoutMethod!

  """
  Generate a Plaid Link token
  """
  generatePlaidLinkToken(
    """
    The account to which the Plaid account should be connected
    """
    host: AccountReferenceInput!

    """
    Use this parameter to specify the import to update (when using the Plaid update flow)
    """
    transactionImport: TransactionsImportReferenceInput

    """
    The countries to enable in the accounts selection. Defaults to the host country.
    """
    countries: [CountryISO!]

    """
    The language to use in the Plaid Link flow. Defaults to "en".
    """
    locale: Locale

    """
    If true, the account selection flow will be enabled. Requires a `transactionImport`.
    """
    accountSelectionEnabled: Boolean
  ): PlaidLinkTokenCreateResponse!

  """
  Connect a Plaid account
  """
  connectPlaidAccount(
    """
    The public token returned by the Plaid Link flow
    """
    publicToken: String!

    """
    The account to which the Plaid account should be connected
    """
    host: AccountReferenceInput!

    """
    The name of the bank
    """
    sourceName: String

    """
    The name of the bank account
    """
    name: String
  ): PlaidConnectAccountResponse!

  """
  Manually request a sync for Plaid account
  """
  syncPlaidAccount(
    """
    The connected account to refresh
    """
    connectedAccount: ConnectedAccountReferenceInput!
  ): TransactionsImport!

  """
  Refresh the list of sub-accounts & other metadata by re-fetching the account info
  """
  refreshPlaidAccount(
    """
    The Plaid connected account to refresh
    """
    connectedAccount: ConnectedAccountReferenceInput

    """
    The transactions import to refresh
    """
    transactionImport: TransactionsImportReferenceInput
  ): PlaidConnectAccountResponse!

  """
  [Root only] Edits account flags (deleted, banned, archived, trusted host)
  """
  editAccountFlags(
    """
    Account to change the flags for
    """
    account: AccountReferenceInput!

    """
    Specify whether the account is archived
    """
    isArchived: Boolean

    """
    Specify whether the account is a trusted host
    """
    isTrustedHost: Boolean

    """
    Set this to false to disable 2FA. Other values have no effect.
    """
    isTwoFactorAuthEnabled: Boolean
  ): Account!

  """
  [Root only] Edits account type from User to Organization
  """
  editAccountType(
    """
    Account to change the type for
    """
    account: AccountReferenceInput!
  ): Account!

  """
  [Root only] Clears the cache for a given account
  """
  clearCacheForAccount(
    """
    Account to clear the cache for
    """
    account: AccountReferenceInput!

    """
    Types of cache to clear
    """
    type: [AccountCacheType]! = [CLOUDFLARE, GRAPHQL_QUERIES, CONTRIBUTORS]
  ): Account!

  """
  [Root only] Merge two accounts, returns the result account
  """
  mergeAccounts(
    """
    Account to merge from
    """
    fromAccount: AccountReferenceInput!

    """
    Account to merge to
    """
    toAccount: AccountReferenceInput!

    """
    If true, the result will be simulated and summarized in the response message
    """
    dryRun: Boolean! = true
  ): MergeAccountsResponse!

  """
  [Root only] Ban accounts
  """
  banAccount(
    """
    Account(s) to ban
    """
    account: [AccountReferenceInput!]!

    """
    If true, the associated accounts will also be banned
    """
    includeAssociatedAccounts: Boolean!

    """
    If true, the result will be simulated and summarized in the response message
    """
    dryRun: Boolean!
  ): BanAccountResponse!

  """
  [Root only] A mutation to move expenses from one account to another
  """
  moveExpenses(
    """
    The orders to move
    """
    expenses: [ExpenseReferenceInput!]!

    """
    The account to move the expenses to. This must be a non USER account.
    """
    destinationAccount: AccountReferenceInput!
  ): [Expense]!

  """
  [Root only] Anonymizes an account
  """
  rootAnonymizeAccount(
    """
    Account to anonymize
    """
    account: AccountReferenceInput!
  ): Account!

  """
  Refunds a transaction. Scope: "transactions".
  """
  refundTransaction(
    """
    Reference of the transaction to refund
    """
    transaction: TransactionReferenceInput!

    """
    If true, the refund will be processed even if it exceeds the balance of the Collective
    """
    ignoreBalanceCheck: Boolean
  ): Transaction

  """
  Rejects transaction, removes member from Collective, and sends a message to the contributor. Scope: "transactions".
  """
  rejectTransaction(
    """
    Reference of the transaction to refund
    """
    transaction: TransactionReferenceInput!

    """
    Message to send to the contributor whose contribution has been rejected
    """
    message: String
  ): Transaction!

  """
  Create a new import. To manually add transactions to it, use `importTransactions`.
  """
  createTransactionsImport(
    """
    Account that will hold the import (usually the host)
    """
    account: AccountReferenceInput!

    """
    Source of the import (e.g. "Bank of America", "Eventbrite", etc...)
    """
    source: NonEmptyString!

    """
    Name of the import (e.g. "Contributions May 2021", "Tickets for Mautic Conference 2024")
    """
    name: NonEmptyString!

    """
    Type of the import
    """
    type: TransactionsImportType!
  ): TransactionsImport!

  """
  Edit an import
  """
  editTransactionsImport(
    """
    ID of the import to edit
    """
    id: NonEmptyString!

    """
    Source of the import (e.g. "Bank of America", "Eventbrite", etc...)
    """
    source: NonEmptyString

    """
    Name of the import (e.g. "Contributions May 2021", "Tickets for Mautic Conference 2024")
    """
    name: NonEmptyString

    """
    Assignments for the import
    """
    assignments: [TransactionsImportAssignmentInput!]
  ): TransactionsImport!

  """
  Import transactions, manually or from a CSV file
  """
  importTransactions(
    """
    ID of the import to add transactions to
    """
    id: NonEmptyString!

    """
    Raw file from which the data was extracted
    """
    file: Upload

    """
    Configuration of the CSV file
    """
    csvConfig: JSONObject

    """
    Data to import
    """
    data: [TransactionsImportRowCreateInput!]!
  ): TransactionsImport!

  """
  Update transactions import rows to set new values or perform actions on them
  """
  updateTransactionsImportRows(
    """
    ID of the import to add transactions to
    """
    id: NonEmptyString!

    """
    Rows to update
    """
    rows: [TransactionsImportRowUpdateInput!]

    """
    Action to perform on all non-processed rows
    """
    action: TransactionsImportRowAction!
  ): TransactionsImportEditResponse!

  """
  Delete an import and all its associated rows
  """
  deleteTransactionsImport(
    """
    ID of the import to delete
    """
    id: NonEmptyString!
  ): Boolean!

  """
  Create update. Scope: "updates".
  """
  createUpdate(update: UpdateCreateInput!): Update!

  """
  Edit update. Scope: "updates".
  """
  editUpdate(update: UpdateUpdateInput!): Update!

  """
  Publish update. Scope: "updates".
  """
  publishUpdate(id: String!, notificationAudience: UpdateAudience): Update!

  """
  Unpublish update. Scope: "updates".
  """
  unpublishUpdate(id: String!): Update!

  """
  Delete update. Scope: "updates".
  """
  deleteUpdate(id: String!): Update!
  uploadFile(
    """
    The files to upload
    """
    files: [UploadFileInput!]!
  ): [UploadFileResult!]!

  """
  Assign Virtual Card information to existing hosted collective. Scope: "virtualCards".
  """
  assignNewVirtualCard(
    """
    Virtual Card data
    """
    virtualCard: VirtualCardInput!

    """
    Account where the virtual card will be associated
    """
    account: AccountReferenceInput!

    """
    Individual account responsible for the card
    """
    assignee: AccountReferenceInput!
  ): VirtualCard!

  """
  Create new Stripe Virtual Card for existing hosted collective. Scope: "virtualCards".
  """
  createVirtualCard(
    """
    Virtual card name
    """
    name: String!

    """
    Virtual card limit amount
    """
    limitAmount: AmountInput!

    """
    Virtual card limit interval
    """
    limitInterval: VirtualCardLimitInterval!

    """
    Account where the virtual card will be associated
    """
    account: AccountReferenceInput!

    """
    Individual account responsible for the virtual card
    """
    assignee: AccountReferenceInput!

    """
    Virtual card request to link to this virtual card
    """
    virtualCardRequest: VirtualCardRequestReferenceInput
  ): VirtualCard!

  """
  Edit existing Virtual Card information. Scope: "virtualCards".
  """
  editVirtualCard(
    """
    Virtual card reference
    """
    virtualCard: VirtualCardReferenceInput!

    """
    Virtual card name
    """
    name: String

    """
    Individual account responsible for the card
    """
    assignee: AccountReferenceInput

    """
    Virtual card limit amount
    """
    limitAmount: AmountInput

    """
    Virtual card limit interval
    """
    limitInterval: VirtualCardLimitInterval
  ): VirtualCard!

  """
  Request Virtual Card to host. Scope: "virtualCards".
  """
  requestVirtualCard(
    """
    Request notes
    """
    notes: String

    """
    Purpose for this Virtual Card
    """
    purpose: String

    """
    Monthly budget you want for this Virtual Card
    """
    budget: Int @deprecated(reason: "2023-06-29: Use spendingLimitAmount")

    """
    Limit you want for this Virtual Card in the given use interval
    """
    spendingLimitAmount: AmountInput

    """
    Interval to apply the amount limit on this virtual card
    """
    spendingLimitInterval: VirtualCardLimitInterval = MONTHLY

    """
    Account where the virtual card will be associated
    """
    account: AccountReferenceInput!
  ): Boolean

  """
  Reject a virtual card request. Scope: "virtualCards"
  """
  rejectVirtualCardRequest(
    """
    Virtual card request
    """
    virtualCardRequest: VirtualCardRequestReferenceInput
  ): VirtualCardRequest!

  """
  Pause active Virtual Card. Scope: "virtualCards".
  """
  pauseVirtualCard(
    """
    Virtual Card reference
    """
    virtualCard: VirtualCardReferenceInput!
  ): VirtualCard!

  """
  Resume paused Virtual Card. Scope: "virtualCards".
  """
  resumeVirtualCard(
    """
    Virtual Card reference
    """
    virtualCard: VirtualCardReferenceInput!
  ): VirtualCard!

  """
  Delete Virtual Card. Scope: "virtualCards".
  """
  deleteVirtualCard(
    """
    Virtual Card reference
    """
    virtualCard: VirtualCardReferenceInput!
  ): Boolean

  """
  Create webhook. Scope: "webhooks".
  """
  createWebhook(webhook: WebhookCreateInput!): Webhook

  """
  Update webhook. Scope: "webhooks".
  """
  updateWebhook(webhook: WebhookUpdateInput!): Webhook

  """
  Delete webhook. Scope: "webhooks".
  """
  deleteWebhook(webhook: WebhookReferenceInput!): Webhook

  """
  Set email notification subscription for requesting logged-in user
  """
  setEmailNotification(
    type: ActivityAndClassesType!

    """
    Scope account which this notification preference is applied to
    """
    account: AccountReferenceInput
    active: Boolean!
  ): ActivitySubscription

  """
  Edit a tier.
  """
  editTier(tier: TierUpdateInput!): Tier!

  """
  Create a tier.
  """
  createTier(
    tier: TierCreateInput!

    """
    Account to create tier in
    """
    account: AccountReferenceInput!
  ): Tier!

  """
  Delete a tier.
  """
  deleteTier(tier: TierReferenceInput!, stopRecurringContributions: Boolean! = false): Tier!
  createPersonalToken(personalToken: PersonalTokenCreateInput!): PersonalToken!
  updatePersonalToken(personalToken: PersonalTokenUpdateInput!): PersonalToken!
  deletePersonalToken(personalToken: PersonalTokenReferenceInput!): PersonalToken

  """
  Updates collective social links
  """
  updateSocialLinks(
    """
    Account where the social link will be associated
    """
    account: AccountReferenceInput!

    """
    The social links in order of preference
    """
    socialLinks: [SocialLinkInput!]!
  ): [SocialLink!]!
  setTags(
    """
    Tags associated with the object being updated
    """
    tags: [String]
    order: OrderReferenceInput
    expense: ExpenseReferenceInput
  ): TagResponse!

  """
  Add an agreement for the given host account. Scope: "host".
  """
  addAgreement(
    """
    Agreement title.
    """
    title: NonEmptyString!

    """
    Optional date in which this agreement expires.
    """
    expiresAt: DateTime

    """
    Host where the agreement will be created.
    """
    host: AccountReferenceInput!

    """
    Account that is a party in this agreement
    """
    account: AccountReferenceInput!

    """
    Agreement attachment
    """
    attachment: Upload

    """
    Additional notes about the agreement for the host admins
    """
    notes: String
  ): Agreement!

  """
  Edit an agreement for the given host account. Scope: "host".
  """
  editAgreement(
    """
    Agreement to update.
    """
    agreement: AgreementReferenceInput!

    """
    Updated agreement title
    """
    title: NonEmptyString

    """
    Optional date in which this agreement expires.
    """
    expiresAt: DateTime

    """
    Agreement attachment
    """
    attachment: Upload

    """
    Additional notes about the agreement for the host admins
    """
    notes: String
  ): Agreement!

  """
  Delete an agreement for the given host account. Scope: "host".
  """
  deleteAgreement(
    """
    Agreement to delete.
    """
    agreement: AgreementReferenceInput!
  ): Agreement!

  """
  Create a new vendor for given host
  """
  createVendor(
    """
    Reference to the host that holds the vendor
    """
    host: AccountReferenceInput!

    """
    The vendor to create
    """
    vendor: VendorCreateInput!
  ): Vendor!

  """
  Edit an existing vendor
  """
  editVendor(
    """
    Reference to the host that holds the vendor
    """
    vendor: VendorEditInput!

    """
    Whether to archive (true) or unarchive (unarchive) the vendor
    """
    archive: Boolean
  ): Vendor!

  """
  Delete a vendor
  """
  deleteVendor(
    """
    Reference to the vendor to delete
    """
    vendor: AccountReferenceInput!
  ): Boolean!

  """
  Convert an organization to a vendor
  """
  convertOrganizationToVendor(
    """
    Reference to the organization to convert
    """
    organization: AccountReferenceInput!

    """
    Reference to the host that will hold the vendor
    """
    host: AccountReferenceInput!
  ): Vendor!

  """
  Send In-App Survey response
  """
  sendSurveyResponse(surveyKey: String!, responseId: String!, score: Int!, text: String, okToContact: Boolean): Boolean
}

input CollectiveCreateInput {
  name: String!
  slug: String!
  description: String!
  tags: [String]
  location: LocationInput
  githubHandle: String @deprecated(reason: "2022-06-03: Please use repositoryUrl")
  repositoryUrl: String @deprecated(reason: "2023-01-16: Please use socialLinks")
  settings: JSON

  """
  The profile avatar image
  """
  image: Upload

  """
  The profile background image, for the banner and social media sharing
  """
  backgroundImage: Upload
}

"""
Input type for Geographic location
"""
input LocationInput {
  """
  A short name for the location (eg. Open Collective Headquarters)
  """
  name: String

  """
  Postal address without country (eg. 12 opensource avenue, 7500 Paris)
  """
  address: String

  """
  Two letters country code (eg. FR, BE...etc)
  """
  country: CountryISO

  """
  Latitude
  """
  lat: Float

  """
  Longitude
  """
  long: Float

  """
  Structured JSON address
  """
  structured: JSON
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input IndividualCreateInput {
  name: String!
  email: String!
}

input InviteMemberInput {
  """
  Reference to an account for the invitee
  """
  memberAccount: AccountReferenceInput

  """
  Email and name of the invitee if no reference.
  """
  memberInfo: IndividualCreateInput

  """
  Role of the invitee
  """
  role: MemberRole!
  description: String
  since: DateTime
}

input EventCreateInput {
  name: String!
  slug: String
  description: String
  tags: [String]
  settings: JSON

  """
  The Event start date and time
  """
  startsAt: DateTime!

  """
  The Event end date and time
  """
  endsAt: DateTime!

  """
  Timezone of the Event (TZ database format, e.g. UTC or Europe/Berlin)
  """
  timezone: String!

  """
  The profile avatar image
  """
  image: Upload

  """
  The profile background image, for the banner and social media sharing
  """
  backgroundImage: Upload
}

input FundCreateInput {
  name: String!
  slug: String!
  description: String!
  tags: [String]
  settings: JSON

  """
  The profile avatar image
  """
  image: Upload

  """
  The profile background image, for the banner and social media sharing
  """
  backgroundImage: Upload
}

input OrganizationCreateInput {
  name: String!
  legalName: String
  slug: String!
  description: String!
  website: String @deprecated(reason: "2024-11-12: Please use socialLinks")
  settings: JSON

  """
  The profile avatar image
  """
  image: Upload

  """
  The profile background image, for the banner and social media sharing
  """
  backgroundImage: Upload
}

input ProjectCreateInput {
  name: String!
  slug: String!
  description: String!
  tags: [String]
  settings: JSON

  """
  The social links in order of preference
  """
  socialLinks: [SocialLinkInput!]

  """
  The profile avatar image
  """
  image: Upload

  """
  The profile background image, for the banner and social media sharing
  """
  backgroundImage: Upload
}

input SocialLinkInput {
  type: SocialLinkType!
  url: URL!
}

"""
Which data should be copied when duplicating the account
"""
input DuplicateAccountDataTypeInput {
  admins: Boolean! = false
  tiers: Boolean! = false
  projects: Boolean! = false
  events: Boolean! = false
}

"""
Values that can be edited in Account's settings
"""
scalar AccountSettingsKey

enum AccountFreezeAction {
  FREEZE
  UNFREEZE
}

"""
Response for the addTwoFactorAuthTokenToIndividual mutation
"""
type AddTwoFactorAuthTokenToIndividualResponse {
  """
  The Individual that the 2FA has been enabled for
  """
  account: Individual!

  """
  The recovery codes for the Individual to write down
  """
  recoveryCodes: [String]
}

input UserTwoFactorMethodReferenceInput {
  id: String
  legacyId: Int
}

input AccountUpdateInput {
  """
  The public id identifying the account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String!
  currency: Currency
}

input PoliciesInput {
  EXPENSE_POLICIES: PoliciesExpensePolicies
  EXPENSE_AUTHOR_CANNOT_APPROVE: PoliciesCollectiveExpenseAuthorCannotApprove
  REQUIRE_2FA_FOR_ADMINS: Boolean
  COLLECTIVE_ADMINS_CAN_REFUND: Boolean
  COLLECTIVE_MINIMUM_ADMINS: PoliciesCollectiveMinimumAdminsInput
  EXPENSE_CATEGORIZATION: PoliciesExpenseCategorizationInput
  EXPENSE_PUBLIC_VENDORS: Boolean
  COLLECTIVE_ADMINS_CAN_SEE_PAYOUT_METHODS: Boolean
  CONTRIBUTOR_INFO_THRESHOLDS: PoliciesContributorInfoThresholdsInput
}

input PoliciesExpensePolicies {
  invoicePolicy: String
  receiptPolicy: String
  titlePolicy: String
}

input PoliciesCollectiveExpenseAuthorCannotApprove {
  amountInCents: Int
  enabled: Boolean
  appliesToHostedCollectives: Boolean
  appliesToSingleAdminCollectives: Boolean
}

input PoliciesCollectiveMinimumAdminsInput {
  numberOfAdmins: Int
  applies: PolicyApplication
  freeze: Boolean
}

input PoliciesExpenseCategorizationInput {
  requiredForExpenseSubmitters: Boolean
  requiredForCollectiveAdmins: Boolean
}

input PoliciesContributorInfoThresholdsInput {
  legalName: Int
  address: Int
}

type SendMessageResult {
  success: Boolean
}

"""
Input for creating or updating an account category
"""
input AccountingCategoryInput {
  """
  The ID of the accounting category to edit
  """
  id: NonEmptyString
  kind: AccountingCategoryKind! = EXPENSE

  """
  The code of the accounting category
  """
  code: NonEmptyString

  """
  The technical name of the accounting category
  """
  name: NonEmptyString

  """
  A friendly name for non-accountants (i.e. expense submitters and collective admins)
  """
  friendlyName: String

  """
  Whether this category is only meant for the host admins
  """
  hostOnly: Boolean! = false
  instructions: String

  """
  If meant for expenses, the types of expenses this category applies to
  """
  expensesTypes: [ExpenseType]

  """
  If the category is applicable to the Host or Hosted Collectives, or both if null
  """
  appliesTo: AccountingCategoryAppliesTo
}

"""
Input to set taxes for an expense
"""
input TaxInput {
  """
  Tax type
  """
  type: TaxType!

  """
  Tax rate as a float number between 0 and 1
  """
  rate: Float!

  """
  Tax identification number, if any
  """
  idNumber: String

  """
  Country ISO code of the entity paying the tax
  """
  country: CountryISO

  """
  An optional tax amount to make sure the tax displayed in your frontend matches the one calculated by the API
  """
  amount: AmountInput
}

"""
Reference to an accounting category
"""
input AccountingCategoryReferenceInput {
  """
  The ID of the accounting category
  """
  id: NonEmptyString!
}

input TransactionsImportRowReferenceInput {
  """
  The id of the row
  """
  id: NonEmptyString!
}

"""
Input type for Application
"""
input ApplicationCreateInput {
  type: ApplicationType! = OAUTH
  name: String
  description: String
  redirectUri: URL

  """
  The account to use as the owner of the application. Defaults to currently logged in user.
  """
  account: AccountReferenceInput
}

"""
Input type for Application
"""
input ApplicationUpdateInput {
  """
  The public id identifying the application (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The legacy public id identifying the application (ie: 4242)
  """
  legacyId: Int

  """
  The clientId for the application.
  """
  clientId: String
  name: String
  description: String
  redirectUri: URL
}

input ApplicationReferenceInput {
  """
  The public id identifying the application (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The legacy public id identifying the application (ie: 4242)
  """
  legacyId: Int

  """
  The clientId for the application.
  """
  clientId: String
}

input CommentUpdateInput {
  id: String!
  html: String
}

"""
Input to create a comment. You can only specify one entity type: expense, conversation, update or host application
"""
input CommentCreateInput {
  html: String

  """
  If your comment is linked to an expense, set it here
  """
  expense: ExpenseReferenceInput

  """
  If your comment is linked to an host application, set it here
  """
  hostApplication: HostApplicationReferenceInput

  """
  If your comment is linked to an order, set it here
  """
  order: OrderReferenceInput
  ConversationId: String @deprecated(reason: "2022-08-26: Please use \"conversation\"")
  conversation: ConversationReferenceInput
  update: UpdateReferenceInput

  """
  The type of the comment
  """
  type: CommentType = COMMENT
}

input ConversationReferenceInput {
  """
  The public id identifying the conversation
  """
  id: String
  legacyId: Int
}

input UpdateReferenceInput {
  """
  The public id identifying the update
  """
  id: String
}

input ConnectedAccountCreateInput {
  """
  Optional Client ID for the token or secret
  """
  clientId: String

  """
  Private data related to the connected account
  """
  data: JSON

  """
  Refresh token for the connected account
  """
  refreshToken: String

  """
  Public data related to the connected account
  """
  settings: JSON

  """
  Secret token used to call service
  """
  token: String

  """
  Service which the connected account belongs to
  """
  service: ConnectedAccountService

  """
  Optional username for the connected account
  """
  username: String
}

input ConnectedAccountReferenceInput {
  """
  The public id identifying the connected account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the account (ie: 580)
  """
  legacyId: Int
}

type EmojiReactionResponse {
  """
  Reference to the update corresponding to the emojis
  """
  update: Update

  """
  Reference to the comment corresponding to the emojis
  """
  comment: Comment
}

input CommentReferenceInput {
  """
  The public id identifying the comment
  """
  id: String
}

input ExpenseCreateInput {
  """
  Main title of the expense
  """
  description: String!

  """
  Longer text to attach to the expense
  """
  longDescription: String

  """
  Currency that should be used for the payout. Defaults to the account currency
  """
  currency: Currency

  """
  Tags associated to the expense (ie. Food, Engineering...)
  """
  tags: [String]

  """
  The type of the expense
  """
  type: ExpenseType!

  """
  A private note that will be attached to your invoice, as HTML. Only visible to the payee and the collective/host admins.
  """
  privateMessage: String

  """
  Custom information to print on the invoice
  """
  invoiceInfo: String

  """
  The payout method that will be used to reimburse the expense
  """
  payoutMethod: PayoutMethodInput!

  """
  The list of items for this expense. Total amount will be computed from them.
  """
  items: [ExpenseItemCreateInput]

  """
  (Optional) A list of files that you want to attach to this expense
  """
  attachedFiles: [ExpenseAttachedFileInput!]

  """
  (Optional - applicable to invoice expense only) The invoice file for this expense
  """
  invoiceFile: ExpenseAttachedFileInput

  """
  Account to reimburse
  """
  payee: AccountReferenceInput!

  """
  The address of the payee
  """
  payeeLocation: LocationInput

  """
  The list of taxes that should be applied to the expense (VAT, GST, etc...)
  """
  tax: [ExpenseTaxInput]

  """
  Custom data to be stored in the expense
  """
  customData: JSON

  """
  The accounting category this expense belongs to
  """
  accountingCategory: AccountingCategoryReferenceInput

  """
  User-provided reference number or any other identifier that references the invoice
  """
  reference: String
}

input PayoutMethodInput {
  """
  The unique identifier of the payout method
  """
  id: String

  """
  The legacy identifier used in older systems
  """
  legacyId: Int

  """
  Additional data specific to the payout method type. For custom payout methods (type=OTHER), must contain only `content` (string) and `currency` fields. For other types, may contain type-specific details (e.g., bank account details, PayPal email)
  """
  data: JSON

  """
  A human-readable name for the payout method
  """
  name: String

  """
  Whether this payout method should be saved for future use
  """
  isSaved: Boolean

  """
  The type of payout method (e.g., PayPal, bank transfer)
  """
  type: PayoutMethodType
}

input ExpenseItemCreateInput {
  """
  Amount in cents
  """
  amount: Int @deprecated(reason: "Please use `amountV2`")

  """
  Amount
  """
  amountV2: AmountInput

  """
  What is this item about?
  """
  description: String!

  """
  URL of the file linked to this item. Must be provided if the expense type is RECEIPT.
  """
  url: URL

  """
  When was the money spent?
  """
  incurredAt: DateTime
}

input ExpenseAttachedFileInput {
  """
  ID of the file
  """
  id: String

  """
  Original filename
  """
  name: String
    @deprecated(
      reason: "2023-02-02: This must now be provided when uploading the file. This parameter will be ignored."
    )

  """
  URL of the file
  """
  url: URL!
}

"""
Input to set taxes for an expense
"""
input ExpenseTaxInput {
  type: TaxType!

  """
  Tax rate as a float number between 0 and 1
  """
  rate: Float!

  """
  Tax identification number, if any
  """
  idNumber: String
}

input RecurringExpenseInput {
  """
  The interval in which this recurring expense is created
  """
  interval: RecurringExpenseInterval!

  """
  The date when this recurring expense should cease
  """
  endsAt: DateTime
}

input ExpenseUpdateInput {
  """
  ID of the expense that you are trying to edit
  """
  id: String!

  """
  Main title of the expense
  """
  description: String

  """
  Longer text to attach to the expense
  """
  longDescription: String

  """
  User-provided reference number or any other identifier that references the invoice
  """
  reference: String

  """
  Currency that should be used for the payout. Defaults to the account currency
  """
  currency: Currency

  """
  Tags associated to the expense (ie. Food, Engineering...)
  """
  tags: [String]

  """
  The type of the expense
  """
  type: ExpenseType

  """
  A private note that will be attached to your invoice, as HTML
  """
  privateMessage: String

  """
  Tax ID, VAT number...etc This information will be printed on your invoice.
  """
  invoiceInfo: String

  """
  The payout method that will be used to reimburse the expense
  """
  payoutMethod: PayoutMethodInput

  """
  @deprecated 2020-04-08: Please use the items field - The list of items for this expense. Total amount will be computed from them.
  """
  attachments: [ExpenseItemInput]

  """
  The list of items for this expense. Total amount will be computed from them.
  """
  items: [ExpenseItemInput]

  """
  (Optional) A list of files that you want to attach to this expense
  """
  attachedFiles: [ExpenseAttachedFileInput!]

  """
  (Optional - applicable to invoice expense only) The invoice file for this expense
  """
  invoiceFile: ExpenseAttachedFileInput

  """
  Account to reimburse
  """
  payee: NewAccountOrReferenceInput

  """
  The address of the payee
  """
  payeeLocation: LocationInput

  """
  The list of taxes that should be applied to the expense (VAT, GST, etc...)
  """
  tax: [ExpenseTaxInput]

  """
  Custom data to be stored in the expense
  """
  customData: JSON

  """
  The accounting category this expense belongs to
  """
  accountingCategory: AccountingCategoryReferenceInput
}

input ExpenseItemInput {
  """
  ID of the item
  """
  id: String

  """
  Amount in cents
  """
  amount: Int @deprecated(reason: "Please use `amountV2`")

  """
  Amount
  """
  amountV2: AmountInput

  """
  What is this item about?
  """
  description: String

  """
  URL of the file linked to this item. Must be provided if the expense type is RECEIPT.
  """
  url: URL

  """
  When was the money spent?
  """
  incurredAt: DateTime
}

input NewAccountOrReferenceInput {
  """
  The public id identifying the account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the account (ie: 580)
  """
  legacyId: Int @deprecated(reason: "2020-01-01: should only be used during the transition to GraphQL API v2.")

  """
  The slug identifying the account (ie: babel for https://opencollective.com/babel)
  """
  slug: String
  name: String
  legalName: String
  email: String
  organization: NewAccountOrganizationInput
  newsletterOptIn: Boolean
}

input NewAccountOrganizationInput {
  name: String
  legalName: String
  slug: String
  description: String
  website: String
}

"""
All supported expense types
"""
enum ExpenseProcessAction {
  """
  To mark the expense as approved
  """
  APPROVE

  """
  To mark the expense as pending after it has been approved
  """
  UNAPPROVE

  """
  To request re-approval of the expense, marking it as pending.
  """
  REQUEST_RE_APPROVAL

  """
  To mark the expense as rejected
  """
  REJECT

  """
  To mark the expense as unpaid (marks the transaction as refunded)
  """
  MARK_AS_UNPAID

  """
  To schedule the expense for payment
  """
  SCHEDULE_FOR_PAYMENT

  """
  To unschedule the expense payment
  """
  UNSCHEDULE_PAYMENT

  """
  To trigger the payment
  """
  PAY

  """
  To mark the expense as spam
  """
  MARK_AS_SPAM

  """
  To mark the expense as incomplete and notify the payee it requires more information
  """
  MARK_AS_INCOMPLETE

  """
  To put the expense on hold
  """
  HOLD

  """
  To release the expense from hold
  """
  RELEASE

  """
  To decline an invited expense
  """
  DECLINE_INVITED_EXPENSE
}

"""
Parameters for paying an expense
"""
input ProcessExpensePaymentParams {
  """
  The fee charged by payment processor in host currency
  """
  paymentProcessorFeeInHostCurrency: Int

  """
  The total amount paid in host currency
  """
  totalAmountPaidInHostCurrency: Int

  """
  Whether the payment processor fees should be refunded when triggering MARK_AS_UNPAID
  """
  shouldRefundPaymentProcessorFee: Boolean

  """
  New expense status when triggering MARK_AS_UNPAID
  """
  markAsUnPaidStatus: MarkAsUnPaidExpenseStatus = APPROVED

  """
  Bypass automatic integrations (ie. PayPal, Transferwise) to process the expense manually
  """
  forceManual: Boolean

  """
  Who is responsible for paying any due fees.
  """
  feesPayer: FeesPayer = COLLECTIVE

  """
  Transfer details for fulfilling the expense
  """
  transfer: ProcessExpenseTransferParams

  """
  Payment method using for paying the expense
  """
  paymentMethodService: PaymentMethodService

  """
  Date funds were cleared on the fiscal host bank, Wise, PayPal, Stripe or any other external account holding these funds.
  """
  clearedAt: DateTime
}

enum MarkAsUnPaidExpenseStatus {
  APPROVED
  INCOMPLETE
  ERROR
}

input ProcessExpenseTransferParams {
  """
  Wise transfer details
  """
  details: WiseTransferDetails
}

input WiseTransferDetails {
  reference: String
  transferPurpose: String
  sourceOfFunds: String
  transferNature: String
}

input ExpenseInviteDraftInput {
  """
  Main title of the expense
  """
  description: String

  """
  Longer text to attach to the expense
  """
  longDescription: String

  """
  Currency that should be used for the payout. Defaults to the account currency
  """
  currency: Currency

  """
  Tags associated to the expense (ie. Food, Engineering...)
  """
  tags: [String]

  """
  The type of the expense
  """
  type: ExpenseType!

  """
  A private note that will be attached to your invoice, as HTML. Only visible to the payee and the collective/host admins.
  """
  privateMessage: String

  """
  Custom information to print on the invoice
  """
  invoiceInfo: String

  """
  The payout method that will be used to reimburse the expense
  """
  payoutMethod: PayoutMethodInput

  """
  The list of items for this expense. Total amount will be computed from them.
  """
  items: [JSON]

  """
  (Optional) A list of files that you want to attach to this expense
  """
  attachedFiles: [JSON]

  """
  (Optional - applicable to invoice expense only) The invoice file for this expense
  """
  invoiceFile: JSON

  """
  Account to reimburse
  """
  payee: ExpenseInvitee!

  """
  The address of the payee
  """
  payeeLocation: LocationInput

  """
  The list of taxes that should be applied to the expense (VAT, GST, etc...)
  """
  tax: [ExpenseTaxInput]

  """
  Custom data to be stored in the expense
  """
  customData: JSON

  """
  The accounting category this expense belongs to
  """
  accountingCategory: AccountingCategoryReferenceInput

  """
  User-provided reference number or any other identifier that references the invoice
  """
  reference: String

  """
  Note to be sent to the invited user through email.
  """
  recipientNote: String
}

input ExpenseInvitee {
  id: Int @deprecated(reason: "2023-04-12: Please use legacyId")
  legacyId: Int
  slug: String
  name: String
  email: String
  isInvite: Boolean
  organization: ExpenseInviteeOrganizationInput
}

input ExpenseInviteeOrganizationInput {
  description: String
  name: String
  slug: String
  website: String
}

"""
Response for the confirmGuestAccount mutation
"""
type ConfirmGuestAccountResponse {
  """
  The validated account
  """
  account: Account!

  """
  A token that can be used to sign in
  """
  accessToken: String!
}

type ProcessHostApplicationResponse {
  """
  The account that applied to the host
  """
  account: Account!

  """
  When sending a public message, this field will have the info about the conversation created
  """
  conversation: Conversation
  hostApplication: HostApplication
}

"""
Action taken for an account application to the host
"""
enum ProcessHostApplicationAction {
  """
  Approve the account request to be hosted
  """
  APPROVE

  """
  Rejects the account request to be hosted
  """
  REJECT

  """
  Sends a private message to the admins of the account
  """
  SEND_PRIVATE_MESSAGE

  """
  Creates a public conversation
  """
  SEND_PUBLIC_MESSAGE
}

type SetPasswordResponse {
  individual: Individual!
  token: String
}

type IndividualConfirmEmailResponse {
  """
  The account that was confirmed
  """
  individual: Individual!

  """
  A new session token to use for the account. Only returned if user is signed in already.
  """
  sessionToken: String
}

input MemberInvitationReferenceInput {
  """
  The public id identifying the member invitation (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the invitation (ie: 580)
  """
  legacyId: Int
}

type FollowAccountResult {
  individual: Individual!
  member: Member!
}

type UnfollowAccountResult {
  individual: Individual!
  member: Member
}

input OAuthAuthorizationReferenceInput {
  """
  The id identifying the OAuth Authorization (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String
}

type OrderWithPayment {
  """
  The order created
  """
  order: Order!

  """
  If donating as a guest, this will contain your guest token to confirm your order
  """
  guestToken: String

  """
  This field will be set if the order was created but there was an error with Stripe during the payment
  """
  stripeError: StripeError
}

type StripeError {
  message: String
  account: String
  response: JSON
}

"""
Input to create a new order
"""
input OrderCreateInput {
  quantity: Int! = 1

  """
  The contribution amount for 1 quantity, without platform contribution and taxes
  """
  amount: AmountInput!
  frequency: ContributionFrequency!

  """
  The profile making the order. Can be null for guest contributions.
  """
  fromAccount: AccountReferenceInput

  """
  Additional information about the contributing profile
  """
  fromAccountInfo: OrderFromAccountInfo

  """
  The profile you want to contribute to
  """
  toAccount: AccountReferenceInput!

  """
  Use this when fromAccount is null to pass the guest info
  """
  guestInfo: GuestInfoInput

  """
  The payment method used for this order
  """
  paymentMethod: PaymentMethodInput

  """
  Platform tip attached to this order
  """
  platformTipAmount: AmountInput

  """
  The tax to apply to the order
  """
  tax: TaxInput

  """
  Use this field to set the taxes associated to this order
  """
  taxes: [OrderTaxInput] @deprecated(reason: "2023-04-11: Please use `tax` instead")

  """
  The tier you are contributing to
  """
  tier: TierReferenceInput

  """
  Data related to this order
  """
  data: JSON

  """
  If the tier has some "customFields", use this field to set their values
  """
  customData: JSON

  """
  Some context about how this order was created
  """
  context: OrderContextInput

  """
  Whether this is transferring the remaining balance from a project/event/collective
  """
  isBalanceTransfer: Boolean

  """
  Tags associated to the order
  """
  tags: [String]
}

"""
Some context about how an order was created
"""
input OrderFromAccountInfo {
  """
  The location of the contributor. Account location will be updated with this address if different from the existing one.
  """
  location: LocationInput
  name: String
  email: String
  legalName: String
}

"""
Input type for guest contributions
"""
input GuestInfoInput {
  """
  Contributor's email
  """
  email: EmailAddress!

  """
  Display name of the user
  """
  name: String

  """
  Legal name of the user
  """
  legalName: String

  """
  Address of the user, mandatory when amount is above $5000.
  """
  location: LocationInput

  """
  Captcha validation for creating an order
  """
  captcha: CaptchaInput
}

"""
Captcha related information
"""
input CaptchaInput {
  """
  Captcha validation token
  """
  token: String!

  """
  Catpcha provider
  """
  provider: CaptchaProvider!
}

"""
Implemented Captcha Providers
"""
enum CaptchaProvider {
  HCAPTCHA
  RECAPTCHA
  TURNSTILE
}

"""
An input to use for creating or retrieving payment methods
"""
input PaymentMethodInput {
  """
  The id assigned to the payment method
  """
  id: String

  """
  Service of this payment method
  """
  service: PaymentMethodService

  """
  Type of this payment method
  """
  type: PaymentMethodType

  """
  Type of this payment method
  """
  legacyType: PaymentMethodLegacyType @deprecated(reason: "2021-03-02: Please use service + type")
  newType: PaymentMethodType @deprecated(reason: "2021-08-20: Please use type instead")

  """
  Name of this payment method
  """
  name: String

  """
  Whether this payment method should be saved for future payments
  """
  isSavedForLater: Boolean

  """
  When creating a credit card, use this field to set its info
  """
  creditCardInfo: CreditCardCreateInput

  """
  To pass when type is PAYPAL
  """
  paypalInfo: PaypalPaymentInput

  """
  The Payment Intent ID used in this checkout
  """
  paymentIntentId: String
}

input CreditCardCreateInput {
  token: String!
  brand: String @deprecated(reason: "2022-11-22: the `token` parameter is sufficient")
  country: String @deprecated(reason: "2022-11-22: the `token` parameter is sufficient")
  expMonth: Int @deprecated(reason: "2022-11-22: the `token` parameter is sufficient")
  expYear: Int @deprecated(reason: "2022-11-22: the `token` parameter is sufficient")
  fullName: String @deprecated(reason: "2022-11-22: the field was not used since 2017")
  funding: String @deprecated(reason: "2022-11-22: the `token` parameter is sufficient")
  zip: String
}

input PaypalPaymentInput {
  token: String
  data: JSON
  orderId: String
  subscriptionId: String
}

"""
Input to set taxes for an order
"""
input OrderTaxInput {
  type: TaxType!
  amount: AmountInput!

  """
  Country of the account ordering, to know from where to apply the tax
  """
  country: CountryISO

  """
  Tax identification number, if any
  """
  idNumber: String
}

"""
Some context about how an order was created
"""
input OrderContextInput {
  """
  Whether this order was created using the embedded contribution flow
  """
  isEmbed: Boolean

  """
  Whether this order was created using the new platform tip flow
  """
  isNewPlatformTipFlow: Boolean
}

input OrderUpdateInput {
  """
  The public id identifying the order (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The legacy public id identifying the order (ie: 4242)
  """
  legacyId: Int

  """
  Amount received by collective, excluding any tips, taxes or fees
  """
  amount: AmountInput

  """
  The tax to apply to the order
  """
  tax: TaxInput

  """
  Amount paid in fees for the payment processor
  """
  paymentProcessorFee: AmountInput

  """
  Amount intended as tip for the platform
  """
  platformTip: AmountInput

  """
  Host fee percent to be applied to the order
  """
  hostFeePercent: Float

  """
  Date the funds were received
  """
  processedAt: DateTime

  """
  Reference to the transaction import row to link the order to
  """
  transactionsImportRow: TransactionsImportRowReferenceInput
}

"""
Action to apply on the order
"""
enum ProcessOrderAction {
  """
  To mark the order as expired
  """
  MARK_AS_EXPIRED

  """
  To mark the order as paid
  """
  MARK_AS_PAID
}

"""
A Stripe payment intent
"""
type PaymentIntent {
  id: String!
  paymentIntentClientSecret: String!
  stripeAccount: String!
  stripeAccountPublishableSecret: String!
}

"""
Input to create a Stripe payment intent
"""
input PaymentIntentInput {
  amount: AmountInput!
  fromAccount: AccountReferenceInput
  toAccount: AccountReferenceInput!
  frequency: ContributionFrequency
}

"""
Input to create a new pending order
"""
input PendingOrderCreateInput {
  """
  The contribution amount, without platform contribution and taxes
  """
  amount: AmountInput!

  """
  The profile making the contribution.
  """
  fromAccount: AccountReferenceInput!

  """
  Additional information about the contributing profile
  """
  fromAccountInfo: OrderFromAccountInfo

  """
  The collective you want to contribute to
  """
  toAccount: AccountReferenceInput!

  """
  The tax to apply to the order
  """
  tax: TaxInput

  """
  The tier you are contributing to
  """
  tier: TierReferenceInput

  """
  Public order description
  """
  description: String

  """
  Private memo for the host
  """
  memo: String

  """
  External identifier for the order
  """
  ponumber: String

  """
  Payment method expected for this order
  """
  paymentMethod: String

  """
  When is the money expected?
  """
  expectedAt: DateTime

  """
  Custom Host fee percent for this order
  """
  hostFeePercent: Float

  """
  The accounting category of this order
  """
  accountingCategory: AccountingCategoryReferenceInput
}

"""
Input to edit an existing pending order
"""
input PendingOrderEditInput {
  """
  The public id identifying the order (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The legacy public id identifying the order (ie: 4242)
  """
  legacyId: Int

  """
  The contribution amount, without platform contribution and taxes
  """
  amount: AmountInput!

  """
  Platform tip attached to this order
  """
  platformTipAmount: AmountInput

  """
  The profile making the contribution.
  """
  fromAccount: AccountReferenceInput

  """
  Additional information about the contributing profile
  """
  fromAccountInfo: OrderFromAccountInfo

  """
  The tax to apply to the order
  """
  tax: TaxInput

  """
  The tier you are contributing to
  """
  tier: TierReferenceInput

  """
  Public order description
  """
  description: String

  """
  Private memo for the host
  """
  memo: String

  """
  External identifier for the order
  """
  ponumber: String

  """
  Payment method expected for this order
  """
  paymentMethod: String

  """
  When is the money expected?
  """
  expectedAt: DateTime

  """
  Custom Host fee percent for this order
  """
  hostFeePercent: Float

  """
  The accounting category of this order
  """
  accountingCategory: AccountingCategoryReferenceInput
}

type CreditCardWithStripeError {
  """
  The payment method created
  """
  paymentMethod: PaymentMethod!

  """
  This field will be set if there was an error with Stripe during strong customer authentication
  """
  stripeError: StripeError
}

"""
A Stripe setup intent
"""
type SetupIntent {
  id: String!
  setupIntentClientSecret: String!
  stripeAccount: String!
  stripeAccountPublishableSecret: String!
}

"""
A Stripe setup intent
"""
input SetupIntentInput {
  id: String!
  stripeAccount: String!
}

type PlaidLinkTokenCreateResponse {
  """
  The link token that will be used to initialize the Plaid Link flow.
  """
  linkToken: String!

  """
  The expiration date for the link token in ISO 8601 format.
  """
  expiration: String!

  """
  A unique identifier for the request, which can be used for troubleshooting.
  """
  requestId: String!

  """
  A URL of a Plaid-hosted Link flow that will use the Link token returned by this request. Only present if the client is enabled for Host
  """
  hostedLinkUrl: String
}

input TransactionsImportReferenceInput {
  """
  The id of the row
  """
  id: NonEmptyString!
}

"""
The locale in the format of a BCP 47 (RFC 5646) standard string
"""
scalar Locale

type PlaidConnectAccountResponse {
  """
  The connected account that was created
  """
  connectedAccount: ConnectedAccount!

  """
  The transactions import that was created
  """
  transactionsImport: TransactionsImport!
}

enum AccountCacheType {
  CLOUDFLARE
  GRAPHQL_QUERIES
  CONTRIBUTORS
}

type MergeAccountsResponse {
  """
  The resulting account
  """
  account: Account!

  """
  A message to display to the user about the result
  """
  message: String
}

type BanAccountResponse {
  """
  Whether the accounts can be banned
  """
  isAllowed: Boolean!

  """
  A summary of the changes
  """
  message: String

  """
  The accounts impacted by the mutation
  """
  accounts: [Account!]!
}

input TransactionsImportAssignmentInput {
  """
  The ID of the account to assign the transactions to
  """
  importedAccountId: NonEmptyString!

  """
  The accounts to assign the transactions to
  """
  accounts: [AccountReferenceInput!]!
}

input TransactionsImportRowCreateInput {
  """
  The source id of the row
  """
  sourceId: NonEmptyString!

  """
  The description of the row
  """
  description: String

  """
  The date of the row
  """
  date: DateTime!

  """
  The amount of the row
  """
  amount: AmountInput!

  """
  The raw value of the row
  """
  rawValue: JSONObject
}

type TransactionsImportEditResponse {
  """
  Updated import
  """
  import: TransactionsImport!

  """
  The rows updated by the mutation
  """
  rows: [TransactionsImportRow]!
}

input TransactionsImportRowUpdateInput {
  """
  The id of the row
  """
  id: NonEmptyString!

  """
  The source id of the row
  """
  sourceId: NonEmptyString

  """
  The description of the row
  """
  description: String

  """
  The date of the row
  """
  date: DateTime

  """
  The amount of the row
  """
  amount: AmountInput

  """
  To update the status of the row. Will be ignored if the status is not applicable (e.g. trying to ignore a row that is already linked)
  """
  status: TransactionsImportRowStatus

  """
  The order associated with the row
  """
  order: OrderReferenceInput

  """
  The expense associated with the row
  """
  expense: ExpenseReferenceInput

  """
  Optional note for the row
  """
  note: String
}

"""
Action to perform on transactions import rows
"""
enum TransactionsImportRowAction {
  DISMISS_ALL
  RESTORE_ALL
  PUT_ON_HOLD_ALL
  UPDATE_ROWS
}

"""
Input type for UpdateType
"""
input UpdateCreateInput {
  title: String!
  isPrivate: Boolean
  isChangelog: Boolean
  makePublicOn: DateTime
  html: String!
  fromAccount: AccountReferenceInput
  account: AccountReferenceInput!
  notificationAudience: UpdateAudience
}

"""
Input type for UpdateType
"""
input UpdateUpdateInput {
  id: String!
  slug: String
  title: String
  isPrivate: Boolean
  isChangelog: Boolean
  makePublicOn: DateTime
  html: String
  fromAccount: AccountReferenceInput
  notificationAudience: UpdateAudience
}

type UploadFileResult {
  file: FileInfo!
  parsingResult: ParseUploadedFileResult
}

type ParseUploadedFileResult {
  """
  Whether the parsing was successful
  """
  success: Boolean!

  """
  A message describing the parsing result, usually an error message (if parsing failed) or some warnings
  """
  message: String

  """
  The parsed expense information
  """
  expense: ExpenseParsedFileInfo
}

type ExpenseParsedFileInfo {
  confidence: StrictPercentage
  description: String
  amount: Amount
  date: Date
  items: [ExpenseItemParsedFileInfo!]!
}

"""
A positive float value between 0 and 100
"""
scalar StrictPercentage

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type ExpenseItemParsedFileInfo {
  description: String
  amount: Amount
  incurredAt: Date
  url: String
}

input UploadFileInput {
  """
  The file to upload
  """
  file: Upload!

  """
  The kind of file to uploaded
  """
  kind: UploadedFileKind!

  """
  Whether to run OCR on the document. Note that this feature is only available to selected accounts.
  """
  parseDocument: Boolean! = false

  """
  If `parseDocument` is true, you can use this field to pass options to the OCR parser.
  """
  parsingOptions: OCRParsingOptionsInput = null
}

"""
The kind of file that was uploaded
"""
enum UploadedFileKind {
  ACCOUNT_AVATAR
  ACCOUNT_BANNER
  EXPENSE_ATTACHED_FILE
  EXPENSE_ITEM
  TRANSACTIONS_IMPORT
  ACCOUNT_LONG_DESCRIPTION
  UPDATE
  COMMENT
  TIER_LONG_DESCRIPTION
  ACCOUNT_CUSTOM_EMAIL
  AGREEMENT_ATTACHMENT
  EXPENSE_INVOICE
}

"""
To configure the OCR parsing
"""
input OCRParsingOptionsInput {
  """
  The currency that you'd like to use for the amounts
  """
  currency: Currency = null
}

input VirtualCardInput {
  id: String
  name: String
  last4: String
  data: JSONObject
  privateData: JSONObject
  provider: VirtualCardProvider
}

enum VirtualCardProvider {
  PRIVACY
  STRIPE
}

"""
Input type for Webhooks
"""
input WebhookCreateInput {
  """
  The account to attach the Webhook
  """
  account: AccountReferenceInput!
  activityType: ActivityType! = ACTIVITY_ALL
  webhookUrl: URL!
}

"""
Input type to update a Webhook
"""
input WebhookUpdateInput {
  """
  The public id identifying the webhook (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The legacy public id identifying the webhook (ie: 4242)
  """
  legacyId: Int
  activityType: ActivityType! = ACTIVITY_ALL
  webhookUrl: URL!
}

input WebhookReferenceInput {
  """
  The public id identifying the webhook (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The legacy public id identifying the webhook (ie: 4242)
  """
  legacyId: Int
}

input TierUpdateInput {
  """
  The public id identifying the tier (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String!
  amount: AmountInput
  name: NonEmptyString
  description: String
  longDescription: String
  videoUrl: URL
  button: String
  goal: AmountInput
  type: TierType
  amountType: TierAmountType
  frequency: TierFrequency
  presets: [Int!]
  maxQuantity: Int
  minimumAmount: AmountInput
  useStandalonePage: Boolean
  invoiceTemplate: String
  singleTicket: Boolean
}

input TierCreateInput {
  amount: AmountInput
  name: NonEmptyString!
  description: String
  button: String
  goal: AmountInput
  type: TierType!
  amountType: TierAmountType!
  frequency: TierFrequency!
  presets: [Int!]
  maxQuantity: Int
  minimumAmount: AmountInput
  useStandalonePage: Boolean
  invoiceTemplate: String
  singleTicket: Boolean
}

"""
Input type for PersonalToken
"""
input PersonalTokenCreateInput {
  name: String
  scope: [OAuthScope]
  expiresAt: String

  """
  Whether this token is allowed to directly use operations that would normally require 2FA
  """
  preAuthorize2FA: Boolean = false

  """
  The account to use as the owner of the application. Defaults to currently logged in user.
  """
  account: AccountReferenceInput
}

"""
Input type for PersonalToken
"""
input PersonalTokenUpdateInput {
  """
  The public id identifying the personal-token (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The legacy public id identifying the personal-token (ie: 4242)
  """
  legacyId: Int
  name: String
  scope: [OAuthScope]
  expiresAt: String

  """
  Whether this token is allowed to directly use operations that would normally require 2FA
  """
  preAuthorize2FA: Boolean
}

input PersonalTokenReferenceInput {
  """
  The public id identifying the personal-token (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The legacy public id identifying the personal-token (ie: 4242)
  """
  legacyId: Int
}

type TagResponse {
  order: Order
  expense: Expense
}

input AgreementReferenceInput {
  """
  The public id identifying the agreement (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the agreement (ie: 580)
  """
  legacyId: Int
}

input VendorCreateInput {
  name: NonEmptyString!
  legalName: String
  tags: [NonEmptyString]
  location: LocationInput
  imageUrl: String @deprecated(reason: "2024-11-26: Please use image + backgroundImage fields")
  vendorInfo: VendorInfoInput
  payoutMethod: PayoutMethodInput

  """
  The profile avatar image
  """
  image: Upload

  """
  The profile background image, for the banner and social media sharing
  """
  backgroundImage: Upload
}

"""
Some context about the vendor
"""
input VendorInfoInput {
  contact: VendorContactInput
  taxFormRequired: Boolean
  taxFormUrl: String
  taxType: String
  taxId: String
  notes: String
}

"""
Some context about the vendor contact person
"""
input VendorContactInput {
  name: String
  email: String
}

input VendorEditInput {
  """
  The public id identifying the account (ie: dgm9bnk8-0437xqry-ejpvzeol-jdayw5re)
  """
  id: String

  """
  The internal id of the account (ie: 580)
  """
  legacyId: Int @deprecated(reason: "2020-01-01: should only be used during the transition to GraphQL API v2.")

  """
  The slug identifying the account (ie: babel for https://opencollective.com/babel)
  """
  slug: String
  name: NonEmptyString
  legalName: String
  tags: [NonEmptyString]
  location: LocationInput
  imageUrl: String @deprecated(reason: "2024-11-26: Please use image + backgroundImage fields")
  vendorInfo: VendorInfoInput
  payoutMethod: PayoutMethodInput

  """
  The profile avatar image
  """
  image: Upload

  """
  The profile background image, for the banner and social media sharing
  """
  backgroundImage: Upload
}
